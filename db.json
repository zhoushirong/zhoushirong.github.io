{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1526906154033},{"_id":"source/favicon.ico","hash":"182d666465c598213c3239906fdc7508bf91c40d","modified":1527078124672},{"_id":"themes/landscape/_config.yml","hash":"01c16934ba7fd4a2f7ccb60821d62383885c1f09","modified":1528209544717},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1526906154034},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1526906154034},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1526989847030},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1526906154049},{"_id":"source/_draft/linux1.md","hash":"d8c73120351bc745c464e4c6f46f47ce0e146d08","modified":1528209412604},{"_id":"source/_draft/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1526992524439},{"_id":"source/_posts/dns.md","hash":"9f652f5ff81862d4a225375e27be7d4a9635e26f","modified":1526992524440},{"_id":"source/_posts/getrect.md","hash":"d8e5465dc5fec2951dcce1376dc37fe792756b51","modified":1526992524441},{"_id":"source/_posts/git.md","hash":"3fd57109c6655226e78f2febfd8d28d768e2b89f","modified":1527680329504},{"_id":"source/_posts/gulp.md","hash":"7f96f23c17125445b982cf09948757281907db8c","modified":1526992524442},{"_id":"source/_posts/host-ip.md","hash":"83879336ba46abf071adcdd15cc3a25121b369bb","modified":1526992524442},{"_id":"source/_posts/http.md","hash":"958deef76ae526ee570127831a8849b990078565","modified":1526992524443},{"_id":"source/_posts/http2.md","hash":"1bb46d0a5693554fe4c50887d2f6fbf24e9a49e7","modified":1526992524443},{"_id":"source/_posts/https.md","hash":"ef3d6c4cb2f0d6c6f28c2152d0d0ae34e455936c","modified":1526992524444},{"_id":"source/_posts/javapath.md","hash":"f8889b4fb02dab0f1098d3a61fde4ba0571d9dd1","modified":1526992524444},{"_id":"source/_posts/js1.md","hash":"fe32648ced127854ad7a949bd74abaa3e25073dc","modified":1526992524445},{"_id":"source/_posts/js2.md","hash":"d5a5fdcd16f353e3037a5a0d6f4b5c0e97c93ba1","modified":1526992524445},{"_id":"source/_posts/mac-terminal.md","hash":"9241d90120c7128598c4c5574c7830e6682d1629","modified":1528199361527},{"_id":"source/_posts/jsencrypt.md","hash":"adfc3e77b1619d6aa426c24c993b2b9f8d432128","modified":1526992524446},{"_id":"source/_posts/linux.md","hash":"dc40a1166d0b985bb0b5af4cd31f42fc85204fef","modified":1526992524446},{"_id":"source/_posts/mysql.md","hash":"9b3cc96d6010779912cfc33b7478e86c137acb5b","modified":1526992524447},{"_id":"source/_posts/nginx.md","hash":"ea5578c96439699c29512bcbb4c3daa89f2cd7e7","modified":1527680528143},{"_id":"source/_posts/nodejs.md","hash":"9a5acd6cfaaab0a3b389d427f1527fc6e2cf5728","modified":1527680812965},{"_id":"source/_posts/object.md","hash":"3e08d55c80daf06a2b567c5ca152ceb6833d978e","modified":1526992524448},{"_id":"source/_posts/pm2.md","hash":"273f49e0be664df3f41695fa0c45244ae66862a2","modified":1526992524449},{"_id":"source/_posts/proxy-error.md","hash":"5ddc592bd4d659a677c7f3f0673a5789606bfa93","modified":1526992524449},{"_id":"source/_posts/svn.md","hash":"826e430c7cb959082ee4f2db497b09a5692391e6","modified":1526992524450},{"_id":"source/_posts/npm-lock.md","hash":"be237189bdbbf2692340035f0a09ca1d452179bb","modified":1527852378313},{"_id":"source/_posts/vim.md","hash":"76508b7799572e6635d5c0f2989f9f07af4bf04c","modified":1526992524451},{"_id":"source/_posts/react.md","hash":"3a7badb50940e2c1375ad93ce563e3d9ebcca0ee","modified":1526992524450},{"_id":"source/_posts/webpack.md","hash":"392da0560f26337016649951259e665278fac046","modified":1526992524452},{"_id":"source/_posts/websafe.md","hash":"b8d62c56cc1d1e3b08b6d023c9382b876f97571e","modified":1526992524452},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1526906154035},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1526906154035},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1526906154035},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1526906154036},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1526906154036},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1526906154037},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1526906154036},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1526906154037},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1526906154037},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1526906154038},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1526906154037},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1526906154038},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1526906154047},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1526906154048},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1526906154047},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1526990653156},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1526906154051},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526906154048},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526906154048},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1526906154049},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1526906154039},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1526906154039},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"863773f5c191422b39ca13b3dcd2b51f854ab129","modified":1526992524454},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1526906154040},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1526906154040},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1526906154041},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1526906154040},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1526906154041},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1526906154042},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1526906154042},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1526906154045},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1526906154046},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1526906154046},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1526906154046},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1526906154046},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1526906154047},{"_id":"themes/landscape/source/css/_extend.styl","hash":"30413043e52dd3a12a05550649b274da2ae5ecab","modified":1526992524455},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1526906154068},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1526906154081},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526906154082},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526906154084},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526906154083},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526906154083},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526906154083},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526906154085},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1526906154091},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1526906154089},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1526906154090},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1526906154090},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1526906154043},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1526906154043},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1526906154044},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1526906154044},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1526906154044},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1526906154045},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"c8a777a181778541d084c6e6e287a399bc24c39d","modified":1526992524456},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1526906154063},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1526906154063},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1526906154064},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1526906154064},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1526906154065},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1526906154065},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1526906154066},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1526906154066},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1526906154067},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1526906154067},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1526906154068},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1526906154071},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1526906154070},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1526906154077},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526906154086},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526906154086},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1526906154087},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1526906154087},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526906154088},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1526906154088},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1526906154076},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1526906154074},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1526906154080}],"Category":[{"name":"技术","_id":"cji1sigiw0002xwqt5hdul9ke"},{"name":"笔记","_id":"cji1sjglr003nxwqt5rrc328f"}],"Data":[],"Page":[],"Post":[{"layout":"default","title":"DNS查询","date":"2016-12-26T00:08:48.000Z","_content":"\n从在浏览器输入网址到打开页面看到网页信息是一个非常复杂的过程。DNS解析是非常关键的一步。\n完整的执行一次页面的请求是一个非常复杂的过程，同时也是一个非常耗时的过程。\n好在经过这么多年的发展，技术的不断积累，已经做了非常多的优化，比如各种缓存、各种算法的优化等。\nDNS的主要作用就是将主机域名转换为ip地址。\n这里记录一下本人对于dns查询的一些笔记。\n\n\n发起一次http（非http2）请求需要经历下面的步骤\n\n``` html\n用户发起一次http请求（在浏览器输入url地址）\n\nDNS 域名解析\n\n发起 TCP 的 3 次握手\n\n建立 TCP 连接后发起 http 请求\n\n服务器响应 http 请求\n\n客户端接受信息展示给用户\n```\n\n这里主要介绍一下DNS的解析步骤，简化版的DNS查询过程如下\n\n``` html\n1.浏览器缓存：首先会查询浏览器是否存在dns缓存，如果用户访问过某个网站，浏览器会缓存这个DNS记录。\n在chrome浏览器可以输入这个查看（chrome://net-internals/#dns）\n\n2.操作系统缓存，如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用，这样便可获得系统缓存中的记录。\nOS缓存会参考DNS服务器响应的TTL值，但是不完全等于TTL值。\n\n3.路由器缓存，如果前面没有查询到，则会将请求发向路由器，它一般会有自己的DNS缓存。\n\n4.ISP DNS 缓存 – 接下来要check的就是ISP缓存DNS的服务器。在这一般都能找到相应的缓存记录。\n\n5.各个DNS服务器查询，通过一系列复杂的算法进行DNS查询（有人说是递归搜索）\n```\n\n\n\n### 名词解释\n\n\n**DNS:**网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。\n它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。\nDNS使用TCP和UDP端口53。\n当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。\n\n**ISP:** 互联网服务供应商(Internet Service Provider)又称因特网服务提供者、互联网服务提供商、网络服务供应商，即指提供互联网存取服务的公司。通常大型的电讯公司都会兼任互联网服务供应商。\n\n**主机记录(A记录):** A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。\n\n**别名记录(CNAME记录):** CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。\n\n**TTL:** 表示 DNS 记录在 DNS 服务器上缓存时间\n\n**域名解析**: DNS就像是一个自动的电话号码簿。\n我们上网的时候通过在浏览器输入网址 (http://www.epoos.com) 的时候，就相当于输入用户名，解析（查找ip）就相当于通过用户名自动找到电话号码\n\n","source":"_posts/dns.md","raw":"---\nlayout: default\ntitle: DNS查询\ndate: 2016-12-26 08:08:48\ntag: dns\ncategory: 技术\n---\n\n从在浏览器输入网址到打开页面看到网页信息是一个非常复杂的过程。DNS解析是非常关键的一步。\n完整的执行一次页面的请求是一个非常复杂的过程，同时也是一个非常耗时的过程。\n好在经过这么多年的发展，技术的不断积累，已经做了非常多的优化，比如各种缓存、各种算法的优化等。\nDNS的主要作用就是将主机域名转换为ip地址。\n这里记录一下本人对于dns查询的一些笔记。\n\n\n发起一次http（非http2）请求需要经历下面的步骤\n\n``` html\n用户发起一次http请求（在浏览器输入url地址）\n\nDNS 域名解析\n\n发起 TCP 的 3 次握手\n\n建立 TCP 连接后发起 http 请求\n\n服务器响应 http 请求\n\n客户端接受信息展示给用户\n```\n\n这里主要介绍一下DNS的解析步骤，简化版的DNS查询过程如下\n\n``` html\n1.浏览器缓存：首先会查询浏览器是否存在dns缓存，如果用户访问过某个网站，浏览器会缓存这个DNS记录。\n在chrome浏览器可以输入这个查看（chrome://net-internals/#dns）\n\n2.操作系统缓存，如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用，这样便可获得系统缓存中的记录。\nOS缓存会参考DNS服务器响应的TTL值，但是不完全等于TTL值。\n\n3.路由器缓存，如果前面没有查询到，则会将请求发向路由器，它一般会有自己的DNS缓存。\n\n4.ISP DNS 缓存 – 接下来要check的就是ISP缓存DNS的服务器。在这一般都能找到相应的缓存记录。\n\n5.各个DNS服务器查询，通过一系列复杂的算法进行DNS查询（有人说是递归搜索）\n```\n\n\n\n### 名词解释\n\n\n**DNS:**网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。\n它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。\nDNS使用TCP和UDP端口53。\n当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。\n\n**ISP:** 互联网服务供应商(Internet Service Provider)又称因特网服务提供者、互联网服务提供商、网络服务供应商，即指提供互联网存取服务的公司。通常大型的电讯公司都会兼任互联网服务供应商。\n\n**主机记录(A记录):** A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。\n\n**别名记录(CNAME记录):** CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。\n\n**TTL:** 表示 DNS 记录在 DNS 服务器上缓存时间\n\n**域名解析**: DNS就像是一个自动的电话号码簿。\n我们上网的时候通过在浏览器输入网址 (http://www.epoos.com) 的时候，就相当于输入用户名，解析（查找ip）就相当于通过用户名自动找到电话号码\n\n","slug":"dns","published":1,"updated":"2018-05-22T12:35:24.440Z","comments":1,"photos":[],"link":"","_id":"cji1sigip0000xwqtovogaos6","content":"<p>从在浏览器输入网址到打开页面看到网页信息是一个非常复杂的过程。DNS解析是非常关键的一步。<br>完整的执行一次页面的请求是一个非常复杂的过程，同时也是一个非常耗时的过程。<br>好在经过这么多年的发展，技术的不断积累，已经做了非常多的优化，比如各种缓存、各种算法的优化等。<br>DNS的主要作用就是将主机域名转换为ip地址。<br>这里记录一下本人对于dns查询的一些笔记。</p>\n<p>发起一次http（非http2）请求需要经历下面的步骤</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户发起一次http请求（在浏览器输入url地址）</span><br><span class=\"line\"></span><br><span class=\"line\">DNS 域名解析</span><br><span class=\"line\"></span><br><span class=\"line\">发起 TCP 的 3 次握手</span><br><span class=\"line\"></span><br><span class=\"line\">建立 TCP 连接后发起 http 请求</span><br><span class=\"line\"></span><br><span class=\"line\">服务器响应 http 请求</span><br><span class=\"line\"></span><br><span class=\"line\">客户端接受信息展示给用户</span><br></pre></td></tr></table></figure>\n<p>这里主要介绍一下DNS的解析步骤，简化版的DNS查询过程如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.浏览器缓存：首先会查询浏览器是否存在dns缓存，如果用户访问过某个网站，浏览器会缓存这个DNS记录。</span><br><span class=\"line\">在chrome浏览器可以输入这个查看（chrome://net-internals/#dns）</span><br><span class=\"line\"></span><br><span class=\"line\">2.操作系统缓存，如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用，这样便可获得系统缓存中的记录。</span><br><span class=\"line\">OS缓存会参考DNS服务器响应的TTL值，但是不完全等于TTL值。</span><br><span class=\"line\"></span><br><span class=\"line\">3.路由器缓存，如果前面没有查询到，则会将请求发向路由器，它一般会有自己的DNS缓存。</span><br><span class=\"line\"></span><br><span class=\"line\">4.ISP DNS 缓存 – 接下来要check的就是ISP缓存DNS的服务器。在这一般都能找到相应的缓存记录。</span><br><span class=\"line\"></span><br><span class=\"line\">5.各个DNS服务器查询，通过一系列复杂的算法进行DNS查询（有人说是递归搜索）</span><br></pre></td></tr></table></figure>\n<h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><p><strong>DNS:</strong>网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。<br>它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。<br>DNS使用TCP和UDP端口53。<br>当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p>\n<p><strong>ISP:</strong> 互联网服务供应商(Internet Service Provider)又称因特网服务提供者、互联网服务提供商、网络服务供应商，即指提供互联网存取服务的公司。通常大型的电讯公司都会兼任互联网服务供应商。</p>\n<p><strong>主机记录(A记录):</strong> A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。</p>\n<p><strong>别名记录(CNAME记录):</strong> CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。</p>\n<p><strong>TTL:</strong> 表示 DNS 记录在 DNS 服务器上缓存时间</p>\n<p><strong>域名解析</strong>: DNS就像是一个自动的电话号码簿。<br>我们上网的时候通过在浏览器输入网址 (<a href=\"http://www.epoos.com\">http://www.epoos.com</a>) 的时候，就相当于输入用户名，解析（查找ip）就相当于通过用户名自动找到电话号码</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从在浏览器输入网址到打开页面看到网页信息是一个非常复杂的过程。DNS解析是非常关键的一步。<br>完整的执行一次页面的请求是一个非常复杂的过程，同时也是一个非常耗时的过程。<br>好在经过这么多年的发展，技术的不断积累，已经做了非常多的优化，比如各种缓存、各种算法的优化等。<br>DNS的主要作用就是将主机域名转换为ip地址。<br>这里记录一下本人对于dns查询的一些笔记。</p>\n<p>发起一次http（非http2）请求需要经历下面的步骤</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户发起一次http请求（在浏览器输入url地址）</span><br><span class=\"line\"></span><br><span class=\"line\">DNS 域名解析</span><br><span class=\"line\"></span><br><span class=\"line\">发起 TCP 的 3 次握手</span><br><span class=\"line\"></span><br><span class=\"line\">建立 TCP 连接后发起 http 请求</span><br><span class=\"line\"></span><br><span class=\"line\">服务器响应 http 请求</span><br><span class=\"line\"></span><br><span class=\"line\">客户端接受信息展示给用户</span><br></pre></td></tr></table></figure>\n<p>这里主要介绍一下DNS的解析步骤，简化版的DNS查询过程如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.浏览器缓存：首先会查询浏览器是否存在dns缓存，如果用户访问过某个网站，浏览器会缓存这个DNS记录。</span><br><span class=\"line\">在chrome浏览器可以输入这个查看（chrome://net-internals/#dns）</span><br><span class=\"line\"></span><br><span class=\"line\">2.操作系统缓存，如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用，这样便可获得系统缓存中的记录。</span><br><span class=\"line\">OS缓存会参考DNS服务器响应的TTL值，但是不完全等于TTL值。</span><br><span class=\"line\"></span><br><span class=\"line\">3.路由器缓存，如果前面没有查询到，则会将请求发向路由器，它一般会有自己的DNS缓存。</span><br><span class=\"line\"></span><br><span class=\"line\">4.ISP DNS 缓存 – 接下来要check的就是ISP缓存DNS的服务器。在这一般都能找到相应的缓存记录。</span><br><span class=\"line\"></span><br><span class=\"line\">5.各个DNS服务器查询，通过一系列复杂的算法进行DNS查询（有人说是递归搜索）</span><br></pre></td></tr></table></figure>\n<h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><p><strong>DNS:</strong>网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。<br>它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。<br>DNS使用TCP和UDP端口53。<br>当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p>\n<p><strong>ISP:</strong> 互联网服务供应商(Internet Service Provider)又称因特网服务提供者、互联网服务提供商、网络服务供应商，即指提供互联网存取服务的公司。通常大型的电讯公司都会兼任互联网服务供应商。</p>\n<p><strong>主机记录(A记录):</strong> A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。</p>\n<p><strong>别名记录(CNAME记录):</strong> CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。</p>\n<p><strong>TTL:</strong> 表示 DNS 记录在 DNS 服务器上缓存时间</p>\n<p><strong>域名解析</strong>: DNS就像是一个自动的电话号码簿。<br>我们上网的时候通过在浏览器输入网址 (<a href=\"http://www.epoos.com\">http://www.epoos.com</a>) 的时候，就相当于输入用户名，解析（查找ip）就相当于通过用户名自动找到电话号码</p>\n"},{"title":"getBoundingClientReact方法","date":"2018-03-19T16:00:00.000Z","_content":"\n\n##### getBoundingClientRect方法兼容IE7写法\n\n```javascript\nrectObject = object.getBoundingClientRect(); // 返回元素的大小及其相对于视口的位置\n```\n\nie7中的getBoundingClientRect方法只有bottom、left、right、top属性，没有width合height\n\n![图片](http://zhoushirong.github.io/img/rect.png)\n\n通过上图可以看出：\n除了width和height，其它几个属性都是相对于视口的左上角而言的。\n\n根据left、right的值可以推算出width\n\n根据top、bottom的值可以推算出height\n\n完整的代码如下：\n```javascript\n/**\n * getBoundingClientRect 兼容IE7\n * @param {DOM Object} obj \n */\nfunction getBoundingClientRect(obj) {\n    var boundingClientRect = obj.getBoundingClientRect();\n    var newObj = {\n        bottom: boundingClientRect.bottom,\n        left: boundingClientRect.left,\n        right: boundingClientRect.right,\n        top: boundingClientRect.top\n    }\n\n\tif (boundingClientRect.width) {\n\t\tnewObj.width = boundingClientRect.width;\n\t\tnewObj.height = boundingClientRect.height;\n\t} else {\n\t\tnewObj.width = boundingClientRect.right - boundingClientRect.left;\n\t\tnewObj.height = boundingClientRect.bottom - boundingClientRect.top;\n    }\n\treturn newObj;\n}\n```\n\n\n\n### 参考链接\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect","source":"_posts/getrect.md","raw":"---\ntitle: getBoundingClientReact方法\ndate: 2018/03/20\ntag: js\ncategory: 技术\n---\n\n\n##### getBoundingClientRect方法兼容IE7写法\n\n```javascript\nrectObject = object.getBoundingClientRect(); // 返回元素的大小及其相对于视口的位置\n```\n\nie7中的getBoundingClientRect方法只有bottom、left、right、top属性，没有width合height\n\n![图片](http://zhoushirong.github.io/img/rect.png)\n\n通过上图可以看出：\n除了width和height，其它几个属性都是相对于视口的左上角而言的。\n\n根据left、right的值可以推算出width\n\n根据top、bottom的值可以推算出height\n\n完整的代码如下：\n```javascript\n/**\n * getBoundingClientRect 兼容IE7\n * @param {DOM Object} obj \n */\nfunction getBoundingClientRect(obj) {\n    var boundingClientRect = obj.getBoundingClientRect();\n    var newObj = {\n        bottom: boundingClientRect.bottom,\n        left: boundingClientRect.left,\n        right: boundingClientRect.right,\n        top: boundingClientRect.top\n    }\n\n\tif (boundingClientRect.width) {\n\t\tnewObj.width = boundingClientRect.width;\n\t\tnewObj.height = boundingClientRect.height;\n\t} else {\n\t\tnewObj.width = boundingClientRect.right - boundingClientRect.left;\n\t\tnewObj.height = boundingClientRect.bottom - boundingClientRect.top;\n    }\n\treturn newObj;\n}\n```\n\n\n\n### 参考链接\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect","slug":"getrect","published":1,"updated":"2018-05-22T12:35:24.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigiu0001xwqt23o6knca","content":"<h5 id=\"getBoundingClientRect方法兼容IE7写法\"><a href=\"#getBoundingClientRect方法兼容IE7写法\" class=\"headerlink\" title=\"getBoundingClientRect方法兼容IE7写法\"></a>getBoundingClientRect方法兼容IE7写法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rectObject = object.getBoundingClientRect(); <span class=\"comment\">// 返回元素的大小及其相对于视口的位置</span></span><br></pre></td></tr></table></figure>\n<p>ie7中的getBoundingClientRect方法只有bottom、left、right、top属性，没有width合height</p>\n<p><img src=\"http://zhoushirong.github.io/img/rect.png\" alt=\"图片\"></p>\n<p>通过上图可以看出：<br>除了width和height，其它几个属性都是相对于视口的左上角而言的。</p>\n<p>根据left、right的值可以推算出width</p>\n<p>根据top、bottom的值可以推算出height</p>\n<p>完整的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * getBoundingClientRect 兼容IE7</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;DOM Object&#125; obj </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBoundingClientRect</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> boundingClientRect = obj.getBoundingClientRect();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newObj = &#123;</span><br><span class=\"line\">        bottom: boundingClientRect.bottom,</span><br><span class=\"line\">        left: boundingClientRect.left,</span><br><span class=\"line\">        right: boundingClientRect.right,</span><br><span class=\"line\">        top: boundingClientRect.top</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (boundingClientRect.width) &#123;</span><br><span class=\"line\">\t\tnewObj.width = boundingClientRect.width;</span><br><span class=\"line\">\t\tnewObj.height = boundingClientRect.height;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnewObj.width = boundingClientRect.right - boundingClientRect.left;</span><br><span class=\"line\">\t\tnewObj.height = boundingClientRect.bottom - boundingClientRect.top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"getBoundingClientRect方法兼容IE7写法\"><a href=\"#getBoundingClientRect方法兼容IE7写法\" class=\"headerlink\" title=\"getBoundingClientRect方法兼容IE7写法\"></a>getBoundingClientRect方法兼容IE7写法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rectObject = object.getBoundingClientRect(); <span class=\"comment\">// 返回元素的大小及其相对于视口的位置</span></span><br></pre></td></tr></table></figure>\n<p>ie7中的getBoundingClientRect方法只有bottom、left、right、top属性，没有width合height</p>\n<p><img src=\"http://zhoushirong.github.io/img/rect.png\" alt=\"图片\"></p>\n<p>通过上图可以看出：<br>除了width和height，其它几个属性都是相对于视口的左上角而言的。</p>\n<p>根据left、right的值可以推算出width</p>\n<p>根据top、bottom的值可以推算出height</p>\n<p>完整的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * getBoundingClientRect 兼容IE7</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;DOM Object&#125; obj </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBoundingClientRect</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> boundingClientRect = obj.getBoundingClientRect();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newObj = &#123;</span><br><span class=\"line\">        bottom: boundingClientRect.bottom,</span><br><span class=\"line\">        left: boundingClientRect.left,</span><br><span class=\"line\">        right: boundingClientRect.right,</span><br><span class=\"line\">        top: boundingClientRect.top</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (boundingClientRect.width) &#123;</span><br><span class=\"line\">\t\tnewObj.width = boundingClientRect.width;</span><br><span class=\"line\">\t\tnewObj.height = boundingClientRect.height;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnewObj.width = boundingClientRect.right - boundingClientRect.left;</span><br><span class=\"line\">\t\tnewObj.height = boundingClientRect.bottom - boundingClientRect.top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect</a></p>\n"},{"title":"常用的git命令","date":"2018-01-09T16:00:00.000Z","_content":"\ngit是一种分布式版本管理工具，他有着强大的开源社区github，结合smartgit能够快速、高效、准确的对分支进行切换。\n但是如果仅仅只是使用smartgit图形界面有时候也很不方便，至少在服务器上就没招了，因此了解一些git bash的基本命令是十分必要的。\n接下来会介绍一些常用的基本的git bash命令。\n\n### 配置git用户名和邮箱\n\n``` shell\ngit config user.username \"用户名\" \n\ngit config user.email \"邮箱\"\n```\n\n### 生成ssh-key\n\n``` shell\nzsr :: ~ ‹master*› % ssh-keygen                                                                 \nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/zsr/.ssh/id_rsa): /Users/zsr/.ssh/githubsshkey # 填写路径\nEnter passphrase (empty for no passphrase): # 密码可为空\nEnter same passphrase again: # 密码可为空\nYour identification has been saved in /Users/zsr/.ssh/githubsshkey.\nYour public key has been saved in /Users/zsr/.ssh/githubsshkey.pub.\nThe key fingerprint is:\nSHA256:Va57YAfyxN86cD5a1ejR6imhQiJuM/2IeTyK5FI+W+4 zsr@zsr.local\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            .    |\n|         . o     |\n|        . = .    |\n|         = + . + |\n|        S * + = o|\n|  . . . .. B.+ o |\n| o...+ o  ..B.o  |\n|.oo+=o=.. .+.+ . |\n| .+=E=.o...  .o  |\n+----[SHA256]-----+\n```\n\n然后根据提示连续回车即可在/Users/zsr/.ssh 目录下得到githubsshkey 和githubsshkey.pub \n其中githubsshkey.pub文件里面存放的就是我们要使用的public key。\n\n\n### 生成多个ssh-key\n\n要生成多个key重复上面操作即可，生成之后再.ssh目录下创建一个config文件，并配置私钥(没有.pub的那个文件)的相对路径\n``` shell\nHost github.com\nUser zhoushirong\nIdentityFile ~/.ssh/githubsshkey\n```\n\n### git 常用命令\n\n``` shell\ngit clone git仓库地址 # 从git仓库拉取git代码到本地\n\ngit branch # 列出本地分支\n\ngit branch -r # 列出远程分支\n\ngit branch -a # 列出本地和远程分支\n\ngit branch 分支名 # 创建一个分支（*只是创建，不切换）\n\ngit branch -d | -D 分支名 # 删除本地分支\n\ngit branch -d | -D  -r 分支名 # 删除远程分支\n\ngit checkout 分支名 # 拉取远程分支\n\n```\n\n\n### git commit && push\n\n``` shell\ngit commit # 提交缓存区里面的文件\n\ngit commit -m \"提交描述信息\"\n\ngit push # 将本地仓库修改推送到服务器上的仓库\n\ngit push origin develop#— 将新分支push到远程分支\n\ngit push --set-upstream origin develop#— 将新分支push到远程分支并与之关联起来\n```\n\n### git 合并a 分支到 b分支\n\nstep1:\n\n``` shell\ngit checkout b\n```\n\nstep2:\n\n``` shell\ngit merge a\n```\n\n### git查看log\n\nstep1:\n``` shell\ngit log —— 按提交时间列出所有的更新\n\ngit log --pretty # pretty确定输出格式\n\ngit log --pretty=oneline # 日志简化版，只有commit message 和 hash\n\ngit log --pretty=oneline 文件名 # 显示某一个文件的git日志\n\ngit log -p -2 # -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：\n```\n\n\n### gitignore\n\n有时候会遇到加入.gitignore文件的时候无效的问题，这个是因为某些文件已经被纳入了版本库\n\n解决办法：\n\n``` shell\ngit rm -r --cached .\n\ngit add .\n\ngit commit -m 'clean commit messages'\n\ngit push\n```\n\n### git撤销修改\n\ngit有四个区：工作区（Working Area）、暂存区（Stage）、本地仓库（Local Repository）、远程仓库（Remote Repository）\ngit有五种状态：未修改（Orgin）、已修改（Modified）、已暂存(Staged)、已提交（Committed）、已推送（Pushed）\n\n1.已修改，未暂存\n``` shell\ngit diff # 查看修改\ngit checkout . # 撤销修改(方法一)\ngit reset --hard # 撤销修改(方法二)\n```\n\n2.已暂存\n``` shell\ngit add . # 加入暂存\ngit diff --cached #  查看修改\n\ngit reset # 把修改退回到git add .之前\ngit checkcout . # 撤回已修改，未缓存状态\n\ngit reset --hard # 等同于上面两个命令的组合\n```\n\n3.已提交，未推送\n``` shell\ngit commit -m 'commit message' # 提交修改\ngit diff master orgin/master # 查看修改\ngit reset --hard orgin/master # 撤回修改（orgin/master代表远程仓库，相当于从远程仓库把代码取回来）\n```\n\n4.已推送的代码撤销\n``` shell\ngit reset --hard HEAD^ # 恢复本地仓库\ngit push -f # 强制push到远程仓库\n```\n\n\n### git push提示没有权限\n\n```shell\nzsr@zsr:~/wywork/epay% git push\ngit@g.hz.netease.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n解决办法\n```shell\nssh-add -l\n# Then, if you don't see your key listed, add it with:\nssh-add ~/.ssh/identity # 生成的私钥\n```\n\n### 提示DNS欺骗检测\n\n```shel \n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@       WARNING: POSSIBLE DNS SPOOFING DETECTED!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nThe ECDSA host key for [g.hz.netease.com]:22222 has changed,\nand the key for the corresponding IP address [59.111.178.110]:22222\nis unknown. This could either mean that\nDNS SPOOFING is happening or the IP address for the host\nand its host key have changed at the same time.\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ECDSA key sent by the remote host is\nSHA256:iktCbxKzaP13xO9iY/5B9tkuIYE9BZfC31uW1Z6F4YQ.\nPlease contact your system administrator.\nAdd correct host key in /Users/zsr/.ssh/known_hosts to get rid of this message.\nOffending ECDSA key in /Users/zsr/.ssh/known_hosts:20\nECDSA host key for [g.hz.netease.com]:22222 has changed and you have requested strict checking.\nHost key verification failed.\nfatal: Could not read from remote repository.\n```\n\n出错原因：\n```shell\nknow_hosts \n# ssh登录的时候，当远程主机的公钥被接受以后，就会保存远程主机的公钥到此文件\n# 出错的原因可能是公钥和对应的主机对应不上了。\n```\n\n解决办法\n```shell\n# 删除~/.ssh/known_hosts里面对应的公钥条目、或者直接删除此文件\nrm -rf ~/.ssh/known_hosts\n```\n\n\n\n### 传送门\n\n[https://git-scm.com/book/zh/v1/起步-关于版本控制](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5)\n\n","source":"_posts/git.md","raw":"---\ntitle: 常用的git命令\ndate: 2018/01/10\ntag: git\ncategory: 技术\n---\n\ngit是一种分布式版本管理工具，他有着强大的开源社区github，结合smartgit能够快速、高效、准确的对分支进行切换。\n但是如果仅仅只是使用smartgit图形界面有时候也很不方便，至少在服务器上就没招了，因此了解一些git bash的基本命令是十分必要的。\n接下来会介绍一些常用的基本的git bash命令。\n\n### 配置git用户名和邮箱\n\n``` shell\ngit config user.username \"用户名\" \n\ngit config user.email \"邮箱\"\n```\n\n### 生成ssh-key\n\n``` shell\nzsr :: ~ ‹master*› % ssh-keygen                                                                 \nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/zsr/.ssh/id_rsa): /Users/zsr/.ssh/githubsshkey # 填写路径\nEnter passphrase (empty for no passphrase): # 密码可为空\nEnter same passphrase again: # 密码可为空\nYour identification has been saved in /Users/zsr/.ssh/githubsshkey.\nYour public key has been saved in /Users/zsr/.ssh/githubsshkey.pub.\nThe key fingerprint is:\nSHA256:Va57YAfyxN86cD5a1ejR6imhQiJuM/2IeTyK5FI+W+4 zsr@zsr.local\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            .    |\n|         . o     |\n|        . = .    |\n|         = + . + |\n|        S * + = o|\n|  . . . .. B.+ o |\n| o...+ o  ..B.o  |\n|.oo+=o=.. .+.+ . |\n| .+=E=.o...  .o  |\n+----[SHA256]-----+\n```\n\n然后根据提示连续回车即可在/Users/zsr/.ssh 目录下得到githubsshkey 和githubsshkey.pub \n其中githubsshkey.pub文件里面存放的就是我们要使用的public key。\n\n\n### 生成多个ssh-key\n\n要生成多个key重复上面操作即可，生成之后再.ssh目录下创建一个config文件，并配置私钥(没有.pub的那个文件)的相对路径\n``` shell\nHost github.com\nUser zhoushirong\nIdentityFile ~/.ssh/githubsshkey\n```\n\n### git 常用命令\n\n``` shell\ngit clone git仓库地址 # 从git仓库拉取git代码到本地\n\ngit branch # 列出本地分支\n\ngit branch -r # 列出远程分支\n\ngit branch -a # 列出本地和远程分支\n\ngit branch 分支名 # 创建一个分支（*只是创建，不切换）\n\ngit branch -d | -D 分支名 # 删除本地分支\n\ngit branch -d | -D  -r 分支名 # 删除远程分支\n\ngit checkout 分支名 # 拉取远程分支\n\n```\n\n\n### git commit && push\n\n``` shell\ngit commit # 提交缓存区里面的文件\n\ngit commit -m \"提交描述信息\"\n\ngit push # 将本地仓库修改推送到服务器上的仓库\n\ngit push origin develop#— 将新分支push到远程分支\n\ngit push --set-upstream origin develop#— 将新分支push到远程分支并与之关联起来\n```\n\n### git 合并a 分支到 b分支\n\nstep1:\n\n``` shell\ngit checkout b\n```\n\nstep2:\n\n``` shell\ngit merge a\n```\n\n### git查看log\n\nstep1:\n``` shell\ngit log —— 按提交时间列出所有的更新\n\ngit log --pretty # pretty确定输出格式\n\ngit log --pretty=oneline # 日志简化版，只有commit message 和 hash\n\ngit log --pretty=oneline 文件名 # 显示某一个文件的git日志\n\ngit log -p -2 # -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：\n```\n\n\n### gitignore\n\n有时候会遇到加入.gitignore文件的时候无效的问题，这个是因为某些文件已经被纳入了版本库\n\n解决办法：\n\n``` shell\ngit rm -r --cached .\n\ngit add .\n\ngit commit -m 'clean commit messages'\n\ngit push\n```\n\n### git撤销修改\n\ngit有四个区：工作区（Working Area）、暂存区（Stage）、本地仓库（Local Repository）、远程仓库（Remote Repository）\ngit有五种状态：未修改（Orgin）、已修改（Modified）、已暂存(Staged)、已提交（Committed）、已推送（Pushed）\n\n1.已修改，未暂存\n``` shell\ngit diff # 查看修改\ngit checkout . # 撤销修改(方法一)\ngit reset --hard # 撤销修改(方法二)\n```\n\n2.已暂存\n``` shell\ngit add . # 加入暂存\ngit diff --cached #  查看修改\n\ngit reset # 把修改退回到git add .之前\ngit checkcout . # 撤回已修改，未缓存状态\n\ngit reset --hard # 等同于上面两个命令的组合\n```\n\n3.已提交，未推送\n``` shell\ngit commit -m 'commit message' # 提交修改\ngit diff master orgin/master # 查看修改\ngit reset --hard orgin/master # 撤回修改（orgin/master代表远程仓库，相当于从远程仓库把代码取回来）\n```\n\n4.已推送的代码撤销\n``` shell\ngit reset --hard HEAD^ # 恢复本地仓库\ngit push -f # 强制push到远程仓库\n```\n\n\n### git push提示没有权限\n\n```shell\nzsr@zsr:~/wywork/epay% git push\ngit@g.hz.netease.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n解决办法\n```shell\nssh-add -l\n# Then, if you don't see your key listed, add it with:\nssh-add ~/.ssh/identity # 生成的私钥\n```\n\n### 提示DNS欺骗检测\n\n```shel \n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@       WARNING: POSSIBLE DNS SPOOFING DETECTED!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nThe ECDSA host key for [g.hz.netease.com]:22222 has changed,\nand the key for the corresponding IP address [59.111.178.110]:22222\nis unknown. This could either mean that\nDNS SPOOFING is happening or the IP address for the host\nand its host key have changed at the same time.\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ECDSA key sent by the remote host is\nSHA256:iktCbxKzaP13xO9iY/5B9tkuIYE9BZfC31uW1Z6F4YQ.\nPlease contact your system administrator.\nAdd correct host key in /Users/zsr/.ssh/known_hosts to get rid of this message.\nOffending ECDSA key in /Users/zsr/.ssh/known_hosts:20\nECDSA host key for [g.hz.netease.com]:22222 has changed and you have requested strict checking.\nHost key verification failed.\nfatal: Could not read from remote repository.\n```\n\n出错原因：\n```shell\nknow_hosts \n# ssh登录的时候，当远程主机的公钥被接受以后，就会保存远程主机的公钥到此文件\n# 出错的原因可能是公钥和对应的主机对应不上了。\n```\n\n解决办法\n```shell\n# 删除~/.ssh/known_hosts里面对应的公钥条目、或者直接删除此文件\nrm -rf ~/.ssh/known_hosts\n```\n\n\n\n### 传送门\n\n[https://git-scm.com/book/zh/v1/起步-关于版本控制](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5)\n\n","slug":"git","published":1,"updated":"2018-05-30T11:38:49.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigiz0004xwqtfhhsy2uy","content":"<p>git是一种分布式版本管理工具，他有着强大的开源社区github，结合smartgit能够快速、高效、准确的对分支进行切换。<br>但是如果仅仅只是使用smartgit图形界面有时候也很不方便，至少在服务器上就没招了，因此了解一些git bash的基本命令是十分必要的。<br>接下来会介绍一些常用的基本的git bash命令。</p>\n<h3 id=\"配置git用户名和邮箱\"><a href=\"#配置git用户名和邮箱\" class=\"headerlink\" title=\"配置git用户名和邮箱\"></a>配置git用户名和邮箱</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.username \"用户名\" </span><br><span class=\"line\"></span><br><span class=\"line\">git config user.email \"邮箱\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh-key\"></a>生成ssh-key</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsr :: ~ ‹master*› % ssh-keygen                                                                 </span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/zsr/.ssh/id_rsa): /Users/zsr/.ssh/githubsshkey # 填写路径</span><br><span class=\"line\">Enter passphrase (empty for no passphrase): # 密码可为空</span><br><span class=\"line\">Enter same passphrase again: # 密码可为空</span><br><span class=\"line\">Your identification has been saved in /Users/zsr/.ssh/githubsshkey.</span><br><span class=\"line\">Your public key has been saved in /Users/zsr/.ssh/githubsshkey.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:Va57YAfyxN86cD5a1ejR6imhQiJuM/2IeTyK5FI+W+4 zsr@zsr.local</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            .    |</span><br><span class=\"line\">|         . o     |</span><br><span class=\"line\">|        . = .    |</span><br><span class=\"line\">|         = + . + |</span><br><span class=\"line\">|        S * + = o|</span><br><span class=\"line\">|  . . . .. B.+ o |</span><br><span class=\"line\">| o...+ o  ..B.o  |</span><br><span class=\"line\">|.oo+=o=.. .+.+ . |</span><br><span class=\"line\">| .+=E=.o...  .o  |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n<p>然后根据提示连续回车即可在/Users/zsr/.ssh 目录下得到githubsshkey 和githubsshkey.pub<br>其中githubsshkey.pub文件里面存放的就是我们要使用的public key。</p>\n<h3 id=\"生成多个ssh-key\"><a href=\"#生成多个ssh-key\" class=\"headerlink\" title=\"生成多个ssh-key\"></a>生成多个ssh-key</h3><p>要生成多个key重复上面操作即可，生成之后再.ssh目录下创建一个config文件，并配置私钥(没有.pub的那个文件)的相对路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">User zhoushirong</span><br><span class=\"line\">IdentityFile ~/.ssh/githubsshkey</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-常用命令\"><a href=\"#git-常用命令\" class=\"headerlink\" title=\"git 常用命令\"></a>git 常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git仓库地址 # 从git仓库拉取git代码到本地</span><br><span class=\"line\"></span><br><span class=\"line\">git branch # 列出本地分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r # 列出远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a # 列出本地和远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch 分支名 # 创建一个分支（*只是创建，不切换）</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d | -D 分支名 # 删除本地分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d | -D  -r 分支名 # 删除远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout 分支名 # 拉取远程分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-commit-amp-amp-push\"><a href=\"#git-commit-amp-amp-push\" class=\"headerlink\" title=\"git commit &amp;&amp; push\"></a>git commit &amp;&amp; push</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit # 提交缓存区里面的文件</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m \"提交描述信息\"</span><br><span class=\"line\"></span><br><span class=\"line\">git push # 将本地仓库修改推送到服务器上的仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin develop#— 将新分支push到远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git push --set-upstream origin develop#— 将新分支push到远程分支并与之关联起来</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-合并a-分支到-b分支\"><a href=\"#git-合并a-分支到-b分支\" class=\"headerlink\" title=\"git 合并a 分支到 b分支\"></a>git 合并a 分支到 b分支</h3><p>step1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout b</span><br></pre></td></tr></table></figure>\n<p>step2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge a</span><br></pre></td></tr></table></figure>\n<h3 id=\"git查看log\"><a href=\"#git查看log\" class=\"headerlink\" title=\"git查看log\"></a>git查看log</h3><p>step1:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log —— 按提交时间列出所有的更新</span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty # pretty确定输出格式</span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty=oneline # 日志简化版，只有commit message 和 hash</span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty=oneline 文件名 # 显示某一个文件的git日志</span><br><span class=\"line\"></span><br><span class=\"line\">git log -p -2 # -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\"gitignore\"></a>gitignore</h3><p>有时候会遇到加入.gitignore文件的时候无效的问题，这个是因为某些文件已经被纳入了版本库</p>\n<p>解决办法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m 'clean commit messages'</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"git撤销修改\"><a href=\"#git撤销修改\" class=\"headerlink\" title=\"git撤销修改\"></a>git撤销修改</h3><p>git有四个区：工作区（Working Area）、暂存区（Stage）、本地仓库（Local Repository）、远程仓库（Remote Repository）<br>git有五种状态：未修改（Orgin）、已修改（Modified）、已暂存(Staged)、已提交（Committed）、已推送（Pushed）</p>\n<p>1.已修改，未暂存<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff # 查看修改</span><br><span class=\"line\">git checkout . # 撤销修改(方法一)</span><br><span class=\"line\">git reset --hard # 撤销修改(方法二)</span><br></pre></td></tr></table></figure></p>\n<p>2.已暂存<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . # 加入暂存</span><br><span class=\"line\">git diff --cached #  查看修改</span><br><span class=\"line\"></span><br><span class=\"line\">git reset # 把修改退回到git add .之前</span><br><span class=\"line\">git checkcout . # 撤回已修改，未缓存状态</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard # 等同于上面两个命令的组合</span><br></pre></td></tr></table></figure></p>\n<p>3.已提交，未推送<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m 'commit message' # 提交修改</span><br><span class=\"line\">git diff master orgin/master # 查看修改</span><br><span class=\"line\">git reset --hard orgin/master # 撤回修改（orgin/master代表远程仓库，相当于从远程仓库把代码取回来）</span><br></pre></td></tr></table></figure></p>\n<p>4.已推送的代码撤销<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^ # 恢复本地仓库</span><br><span class=\"line\">git push -f # 强制push到远程仓库</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-push提示没有权限\"><a href=\"#git-push提示没有权限\" class=\"headerlink\" title=\"git push提示没有权限\"></a>git push提示没有权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsr@zsr:~/wywork/epay% git push</span><br><span class=\"line\">git@g.hz.netease.com: Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n<p>解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -l</span><br><span class=\"line\"><span class=\"meta\">#</span> Then, if you don't see your key listed, add it with:</span><br><span class=\"line\">ssh-add ~/.ssh/identity # 生成的私钥</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"提示DNS欺骗检测\"><a href=\"#提示DNS欺骗检测\" class=\"headerlink\" title=\"提示DNS欺骗检测\"></a>提示DNS欺骗检测</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@       WARNING: POSSIBLE DNS SPOOFING DETECTED!          @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">The ECDSA host key for [g.hz.netease.com]:22222 has changed,</span><br><span class=\"line\">and the key for the corresponding IP address [59.111.178.110]:22222</span><br><span class=\"line\">is unknown. This could either mean that</span><br><span class=\"line\">DNS SPOOFING is happening or the IP address for the host</span><br><span class=\"line\">and its host key have changed at the same time.</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class=\"line\">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class=\"line\">It is also possible that a host key has just been changed.</span><br><span class=\"line\">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class=\"line\">SHA256:iktCbxKzaP13xO9iY/5B9tkuIYE9BZfC31uW1Z6F4YQ.</span><br><span class=\"line\">Please contact your system administrator.</span><br><span class=\"line\">Add correct host key in /Users/zsr/.ssh/known_hosts to get rid of this message.</span><br><span class=\"line\">Offending ECDSA key in /Users/zsr/.ssh/known_hosts:20</span><br><span class=\"line\">ECDSA host key for [g.hz.netease.com]:22222 has changed and you have requested strict checking.</span><br><span class=\"line\">Host key verification failed.</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure>\n<p>出错原因：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">know_hosts </span><br><span class=\"line\"><span class=\"meta\">#</span> ssh登录的时候，当远程主机的公钥被接受以后，就会保存远程主机的公钥到此文件</span><br><span class=\"line\"><span class=\"meta\">#</span> 出错的原因可能是公钥和对应的主机对应不上了。</span><br></pre></td></tr></table></figure></p>\n<p>解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 删除~/.ssh/known_hosts里面对应的公钥条目、或者直接删除此文件</span><br><span class=\"line\">rm -rf ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3><p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v1/起步-关于版本控制</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>git是一种分布式版本管理工具，他有着强大的开源社区github，结合smartgit能够快速、高效、准确的对分支进行切换。<br>但是如果仅仅只是使用smartgit图形界面有时候也很不方便，至少在服务器上就没招了，因此了解一些git bash的基本命令是十分必要的。<br>接下来会介绍一些常用的基本的git bash命令。</p>\n<h3 id=\"配置git用户名和邮箱\"><a href=\"#配置git用户名和邮箱\" class=\"headerlink\" title=\"配置git用户名和邮箱\"></a>配置git用户名和邮箱</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.username \"用户名\" </span><br><span class=\"line\"></span><br><span class=\"line\">git config user.email \"邮箱\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh-key\"></a>生成ssh-key</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsr :: ~ ‹master*› % ssh-keygen                                                                 </span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/zsr/.ssh/id_rsa): /Users/zsr/.ssh/githubsshkey # 填写路径</span><br><span class=\"line\">Enter passphrase (empty for no passphrase): # 密码可为空</span><br><span class=\"line\">Enter same passphrase again: # 密码可为空</span><br><span class=\"line\">Your identification has been saved in /Users/zsr/.ssh/githubsshkey.</span><br><span class=\"line\">Your public key has been saved in /Users/zsr/.ssh/githubsshkey.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:Va57YAfyxN86cD5a1ejR6imhQiJuM/2IeTyK5FI+W+4 zsr@zsr.local</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            .    |</span><br><span class=\"line\">|         . o     |</span><br><span class=\"line\">|        . = .    |</span><br><span class=\"line\">|         = + . + |</span><br><span class=\"line\">|        S * + = o|</span><br><span class=\"line\">|  . . . .. B.+ o |</span><br><span class=\"line\">| o...+ o  ..B.o  |</span><br><span class=\"line\">|.oo+=o=.. .+.+ . |</span><br><span class=\"line\">| .+=E=.o...  .o  |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n<p>然后根据提示连续回车即可在/Users/zsr/.ssh 目录下得到githubsshkey 和githubsshkey.pub<br>其中githubsshkey.pub文件里面存放的就是我们要使用的public key。</p>\n<h3 id=\"生成多个ssh-key\"><a href=\"#生成多个ssh-key\" class=\"headerlink\" title=\"生成多个ssh-key\"></a>生成多个ssh-key</h3><p>要生成多个key重复上面操作即可，生成之后再.ssh目录下创建一个config文件，并配置私钥(没有.pub的那个文件)的相对路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">User zhoushirong</span><br><span class=\"line\">IdentityFile ~/.ssh/githubsshkey</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-常用命令\"><a href=\"#git-常用命令\" class=\"headerlink\" title=\"git 常用命令\"></a>git 常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git仓库地址 # 从git仓库拉取git代码到本地</span><br><span class=\"line\"></span><br><span class=\"line\">git branch # 列出本地分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r # 列出远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a # 列出本地和远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch 分支名 # 创建一个分支（*只是创建，不切换）</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d | -D 分支名 # 删除本地分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d | -D  -r 分支名 # 删除远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout 分支名 # 拉取远程分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-commit-amp-amp-push\"><a href=\"#git-commit-amp-amp-push\" class=\"headerlink\" title=\"git commit &amp;&amp; push\"></a>git commit &amp;&amp; push</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit # 提交缓存区里面的文件</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m \"提交描述信息\"</span><br><span class=\"line\"></span><br><span class=\"line\">git push # 将本地仓库修改推送到服务器上的仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin develop#— 将新分支push到远程分支</span><br><span class=\"line\"></span><br><span class=\"line\">git push --set-upstream origin develop#— 将新分支push到远程分支并与之关联起来</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-合并a-分支到-b分支\"><a href=\"#git-合并a-分支到-b分支\" class=\"headerlink\" title=\"git 合并a 分支到 b分支\"></a>git 合并a 分支到 b分支</h3><p>step1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout b</span><br></pre></td></tr></table></figure>\n<p>step2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge a</span><br></pre></td></tr></table></figure>\n<h3 id=\"git查看log\"><a href=\"#git查看log\" class=\"headerlink\" title=\"git查看log\"></a>git查看log</h3><p>step1:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log —— 按提交时间列出所有的更新</span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty # pretty确定输出格式</span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty=oneline # 日志简化版，只有commit message 和 hash</span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty=oneline 文件名 # 显示某一个文件的git日志</span><br><span class=\"line\"></span><br><span class=\"line\">git log -p -2 # -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\"gitignore\"></a>gitignore</h3><p>有时候会遇到加入.gitignore文件的时候无效的问题，这个是因为某些文件已经被纳入了版本库</p>\n<p>解决办法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m 'clean commit messages'</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"git撤销修改\"><a href=\"#git撤销修改\" class=\"headerlink\" title=\"git撤销修改\"></a>git撤销修改</h3><p>git有四个区：工作区（Working Area）、暂存区（Stage）、本地仓库（Local Repository）、远程仓库（Remote Repository）<br>git有五种状态：未修改（Orgin）、已修改（Modified）、已暂存(Staged)、已提交（Committed）、已推送（Pushed）</p>\n<p>1.已修改，未暂存<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff # 查看修改</span><br><span class=\"line\">git checkout . # 撤销修改(方法一)</span><br><span class=\"line\">git reset --hard # 撤销修改(方法二)</span><br></pre></td></tr></table></figure></p>\n<p>2.已暂存<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . # 加入暂存</span><br><span class=\"line\">git diff --cached #  查看修改</span><br><span class=\"line\"></span><br><span class=\"line\">git reset # 把修改退回到git add .之前</span><br><span class=\"line\">git checkcout . # 撤回已修改，未缓存状态</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard # 等同于上面两个命令的组合</span><br></pre></td></tr></table></figure></p>\n<p>3.已提交，未推送<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m 'commit message' # 提交修改</span><br><span class=\"line\">git diff master orgin/master # 查看修改</span><br><span class=\"line\">git reset --hard orgin/master # 撤回修改（orgin/master代表远程仓库，相当于从远程仓库把代码取回来）</span><br></pre></td></tr></table></figure></p>\n<p>4.已推送的代码撤销<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^ # 恢复本地仓库</span><br><span class=\"line\">git push -f # 强制push到远程仓库</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-push提示没有权限\"><a href=\"#git-push提示没有权限\" class=\"headerlink\" title=\"git push提示没有权限\"></a>git push提示没有权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsr@zsr:~/wywork/epay% git push</span><br><span class=\"line\">git@g.hz.netease.com: Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n<p>解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -l</span><br><span class=\"line\"><span class=\"meta\">#</span> Then, if you don't see your key listed, add it with:</span><br><span class=\"line\">ssh-add ~/.ssh/identity # 生成的私钥</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"提示DNS欺骗检测\"><a href=\"#提示DNS欺骗检测\" class=\"headerlink\" title=\"提示DNS欺骗检测\"></a>提示DNS欺骗检测</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@       WARNING: POSSIBLE DNS SPOOFING DETECTED!          @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">The ECDSA host key for [g.hz.netease.com]:22222 has changed,</span><br><span class=\"line\">and the key for the corresponding IP address [59.111.178.110]:22222</span><br><span class=\"line\">is unknown. This could either mean that</span><br><span class=\"line\">DNS SPOOFING is happening or the IP address for the host</span><br><span class=\"line\">and its host key have changed at the same time.</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class=\"line\">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class=\"line\">It is also possible that a host key has just been changed.</span><br><span class=\"line\">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class=\"line\">SHA256:iktCbxKzaP13xO9iY/5B9tkuIYE9BZfC31uW1Z6F4YQ.</span><br><span class=\"line\">Please contact your system administrator.</span><br><span class=\"line\">Add correct host key in /Users/zsr/.ssh/known_hosts to get rid of this message.</span><br><span class=\"line\">Offending ECDSA key in /Users/zsr/.ssh/known_hosts:20</span><br><span class=\"line\">ECDSA host key for [g.hz.netease.com]:22222 has changed and you have requested strict checking.</span><br><span class=\"line\">Host key verification failed.</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure>\n<p>出错原因：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">know_hosts </span><br><span class=\"line\"><span class=\"meta\">#</span> ssh登录的时候，当远程主机的公钥被接受以后，就会保存远程主机的公钥到此文件</span><br><span class=\"line\"><span class=\"meta\">#</span> 出错的原因可能是公钥和对应的主机对应不上了。</span><br></pre></td></tr></table></figure></p>\n<p>解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 删除~/.ssh/known_hosts里面对应的公钥条目、或者直接删除此文件</span><br><span class=\"line\">rm -rf ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3><p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v1/起步-关于版本控制</a></p>\n"},{"title":"Gulp基本用法","date":"2016-12-19T16:00:00.000Z","_content":"\nGulp是一个模块化打包工具。\nGulp本身只有几个入口，支持他拥有强大功能的是各种各样的插件。\nGulp的使用看起来非常简单，只需要一个一个任务链式执行就可以了，它还可以与Webpack结合起来使用\n比如将Webpack作为一个插件来处理ES6转换为ES5的操作。\n下面记录一下Gulp的API以及一些用到的插件。\n\n\n``` javascript\ngulp.src(globs[, options])\n```\n输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。\n\nglobs：一种匹配文件的规则。\n\n---\n\n``` javascript\ngulp.dest(path[, options])\n```\n能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。\n\n文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。 请查看上述的 gulp.src 来了解更多信息。\n\n---\n\n``` javascript\ngulp.task(name[, deps], fn)\n```\n定义一个使用 Orchestrator 实现的任务（task）\n\nOrchestrator: 一个执行并发任务的库。\n\n---\n\n``` javascript\ngulp.watch(glob[, opts], tasks)\n```\n监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。\n\nglob：\n\n类型： String or Array\n\n一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。\n\neg:\n\n``` javascript\nvar watcher = gulp.watch('js/**/*.js', ['uglify','reload']);\nwatcher.on('change', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n\ngulp.watch('js/**/*.js', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n```\n\n---\n\n\n\n### 相关链接：\n\n中文网官网：\n\nhttp://www.gulpjs.com.cn/docs/api/\n\n#### gulp-babel插件：\n\ngulp使用babel编译文件\n\nhttps://github.com/babel/gulp-babel\n\n\n#### gulp-util插件\n\ngulp插件的一些实用方法（Utility functions for gulp plugins）\n\nhttps://github.com/gulpjs/gulp-util\n\n\n#### gulp-imagemin插件\n\n压缩png、jpeg、gif、svg图片用的压缩工具（Minify PNG, JPEG, GIF and SVG images with imagemin）\n\nhttps://github.com/sindresorhus/gulp-imagemin\n\n\n#### gulp-clean插件\n\n用来移除文件或者文件夹的插件（A gulp plugin for removing files and folders from given paths.）\n\nhttps://github.com/peter-vilja/gulp-clean\n\n\n#### gulp-sequence插件\n\n执行一个连续的gulp任务（Run a series of gulp tasks in order.）\n\nhttps://github.com/teambition/gulp-sequence\n\n\n#### gulp.spritesmith插件\n\n合并图片（不会翻译）（Convert a set of images into a spritesheet and CSS variables via gulp）\n\nhttps://github.com/twolfson/gulp.spritesmith\n\n\n#### gulp-sourcemaps插件\n\ngulp sourcemap支持（Source map support for Gulp.js）\n\nhttps://github.com/floridoo/gulp-sourcemaps\n\n\n#### gulp-concat插件\n\n合并文件流（Streaming concat middleware for gulp）\n\nhttps://github.com/contra/gulp-concat\n\n\n#### gulp-autoprefixer 插件\n\n给css加前缀（Prefix CSS）\n\nhttps://github.com/sindresorhus/gulp-autoprefixer\n\n\n#### gulp-file-include插件\n\n文件include合并支持（a gulp plugin for file include）\n\nhttps://github.com/coderhaoxin/gulp-file-include\n\n\n#### gulp-rev插件\n\n静态资源加hash重命名\n(Static asset revisioning by appending content hash to filenames: unicorn.css → unicorn-d41d8cd98f.css)\n\nhttps://github.com/sindresorhus/gulp-rev\n\n\n#### gulp-rev-collector插件\n\n文件变化之后修改时间戳（不会翻译）\n\n（Static asset revision data collector from manifests, generated from different streams, and replace their links in html template.）\n\nhttps://github.com/shonny-ua/gulp-rev-collector\n\n\n#### browser-sync插件\n\n浏览器实时更新(Keep multiple browsers & devices in sync when building websites.)\n\nhttps://github.com/browsersync/browser-sync\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/gulp.md","raw":"---\ntitle: Gulp基本用法\ndate: 2016/12/20\ntag: gulp\ncategory: 技术\n---\n\nGulp是一个模块化打包工具。\nGulp本身只有几个入口，支持他拥有强大功能的是各种各样的插件。\nGulp的使用看起来非常简单，只需要一个一个任务链式执行就可以了，它还可以与Webpack结合起来使用\n比如将Webpack作为一个插件来处理ES6转换为ES5的操作。\n下面记录一下Gulp的API以及一些用到的插件。\n\n\n``` javascript\ngulp.src(globs[, options])\n```\n输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。\n\nglobs：一种匹配文件的规则。\n\n---\n\n``` javascript\ngulp.dest(path[, options])\n```\n能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。\n\n文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。 请查看上述的 gulp.src 来了解更多信息。\n\n---\n\n``` javascript\ngulp.task(name[, deps], fn)\n```\n定义一个使用 Orchestrator 实现的任务（task）\n\nOrchestrator: 一个执行并发任务的库。\n\n---\n\n``` javascript\ngulp.watch(glob[, opts], tasks)\n```\n监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。\n\nglob：\n\n类型： String or Array\n\n一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。\n\neg:\n\n``` javascript\nvar watcher = gulp.watch('js/**/*.js', ['uglify','reload']);\nwatcher.on('change', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n\ngulp.watch('js/**/*.js', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n```\n\n---\n\n\n\n### 相关链接：\n\n中文网官网：\n\nhttp://www.gulpjs.com.cn/docs/api/\n\n#### gulp-babel插件：\n\ngulp使用babel编译文件\n\nhttps://github.com/babel/gulp-babel\n\n\n#### gulp-util插件\n\ngulp插件的一些实用方法（Utility functions for gulp plugins）\n\nhttps://github.com/gulpjs/gulp-util\n\n\n#### gulp-imagemin插件\n\n压缩png、jpeg、gif、svg图片用的压缩工具（Minify PNG, JPEG, GIF and SVG images with imagemin）\n\nhttps://github.com/sindresorhus/gulp-imagemin\n\n\n#### gulp-clean插件\n\n用来移除文件或者文件夹的插件（A gulp plugin for removing files and folders from given paths.）\n\nhttps://github.com/peter-vilja/gulp-clean\n\n\n#### gulp-sequence插件\n\n执行一个连续的gulp任务（Run a series of gulp tasks in order.）\n\nhttps://github.com/teambition/gulp-sequence\n\n\n#### gulp.spritesmith插件\n\n合并图片（不会翻译）（Convert a set of images into a spritesheet and CSS variables via gulp）\n\nhttps://github.com/twolfson/gulp.spritesmith\n\n\n#### gulp-sourcemaps插件\n\ngulp sourcemap支持（Source map support for Gulp.js）\n\nhttps://github.com/floridoo/gulp-sourcemaps\n\n\n#### gulp-concat插件\n\n合并文件流（Streaming concat middleware for gulp）\n\nhttps://github.com/contra/gulp-concat\n\n\n#### gulp-autoprefixer 插件\n\n给css加前缀（Prefix CSS）\n\nhttps://github.com/sindresorhus/gulp-autoprefixer\n\n\n#### gulp-file-include插件\n\n文件include合并支持（a gulp plugin for file include）\n\nhttps://github.com/coderhaoxin/gulp-file-include\n\n\n#### gulp-rev插件\n\n静态资源加hash重命名\n(Static asset revisioning by appending content hash to filenames: unicorn.css → unicorn-d41d8cd98f.css)\n\nhttps://github.com/sindresorhus/gulp-rev\n\n\n#### gulp-rev-collector插件\n\n文件变化之后修改时间戳（不会翻译）\n\n（Static asset revision data collector from manifests, generated from different streams, and replace their links in html template.）\n\nhttps://github.com/shonny-ua/gulp-rev-collector\n\n\n#### browser-sync插件\n\n浏览器实时更新(Keep multiple browsers & devices in sync when building websites.)\n\nhttps://github.com/browsersync/browser-sync\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"gulp","published":1,"updated":"2018-05-22T12:35:24.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigj00005xwqt4lb82xje","content":"<p>Gulp是一个模块化打包工具。<br>Gulp本身只有几个入口，支持他拥有强大功能的是各种各样的插件。<br>Gulp的使用看起来非常简单，只需要一个一个任务链式执行就可以了，它还可以与Webpack结合起来使用<br>比如将Webpack作为一个插件来处理ES6转换为ES5的操作。<br>下面记录一下Gulp的API以及一些用到的插件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(globs[, options])</span><br></pre></td></tr></table></figure>\n<p>输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。</p>\n<p>globs：一种匹配文件的规则。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.dest(path[, options])</span><br></pre></td></tr></table></figure>\n<p>能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。</p>\n<p>文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。 请查看上述的 gulp.src 来了解更多信息。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(name[, deps], fn)</span><br></pre></td></tr></table></figure>\n<p>定义一个使用 Orchestrator 实现的任务（task）</p>\n<p>Orchestrator: 一个执行并发任务的库。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.watch(glob[, opts], tasks)</span><br></pre></td></tr></table></figure>\n<p>监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</p>\n<p>glob：</p>\n<p>类型： String or Array</p>\n<p>一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。</p>\n<p>eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> watcher = gulp.watch(<span class=\"string\">'js/**/*.js'</span>, [<span class=\"string\">'uglify'</span>,<span class=\"string\">'reload'</span>]);</span><br><span class=\"line\">watcher.on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'File '</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.watch(<span class=\"string\">'js/**/*.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'File '</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"相关链接：\"><a href=\"#相关链接：\" class=\"headerlink\" title=\"相关链接：\"></a>相关链接：</h3><p>中文网官网：</p>\n<p><a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"noopener\">http://www.gulpjs.com.cn/docs/api/</a></p>\n<h4 id=\"gulp-babel插件：\"><a href=\"#gulp-babel插件：\" class=\"headerlink\" title=\"gulp-babel插件：\"></a>gulp-babel插件：</h4><p>gulp使用babel编译文件</p>\n<p><a href=\"https://github.com/babel/gulp-babel\" target=\"_blank\" rel=\"noopener\">https://github.com/babel/gulp-babel</a></p>\n<h4 id=\"gulp-util插件\"><a href=\"#gulp-util插件\" class=\"headerlink\" title=\"gulp-util插件\"></a>gulp-util插件</h4><p>gulp插件的一些实用方法（Utility functions for gulp plugins）</p>\n<p><a href=\"https://github.com/gulpjs/gulp-util\" target=\"_blank\" rel=\"noopener\">https://github.com/gulpjs/gulp-util</a></p>\n<h4 id=\"gulp-imagemin插件\"><a href=\"#gulp-imagemin插件\" class=\"headerlink\" title=\"gulp-imagemin插件\"></a>gulp-imagemin插件</h4><p>压缩png、jpeg、gif、svg图片用的压缩工具（Minify PNG, JPEG, GIF and SVG images with imagemin）</p>\n<p><a href=\"https://github.com/sindresorhus/gulp-imagemin\" target=\"_blank\" rel=\"noopener\">https://github.com/sindresorhus/gulp-imagemin</a></p>\n<h4 id=\"gulp-clean插件\"><a href=\"#gulp-clean插件\" class=\"headerlink\" title=\"gulp-clean插件\"></a>gulp-clean插件</h4><p>用来移除文件或者文件夹的插件（A gulp plugin for removing files and folders from given paths.）</p>\n<p><a href=\"https://github.com/peter-vilja/gulp-clean\" target=\"_blank\" rel=\"noopener\">https://github.com/peter-vilja/gulp-clean</a></p>\n<h4 id=\"gulp-sequence插件\"><a href=\"#gulp-sequence插件\" class=\"headerlink\" title=\"gulp-sequence插件\"></a>gulp-sequence插件</h4><p>执行一个连续的gulp任务（Run a series of gulp tasks in order.）</p>\n<p><a href=\"https://github.com/teambition/gulp-sequence\" target=\"_blank\" rel=\"noopener\">https://github.com/teambition/gulp-sequence</a></p>\n<h4 id=\"gulp-spritesmith插件\"><a href=\"#gulp-spritesmith插件\" class=\"headerlink\" title=\"gulp.spritesmith插件\"></a>gulp.spritesmith插件</h4><p>合并图片（不会翻译）（Convert a set of images into a spritesheet and CSS variables via gulp）</p>\n<p><a href=\"https://github.com/twolfson/gulp.spritesmith\" target=\"_blank\" rel=\"noopener\">https://github.com/twolfson/gulp.spritesmith</a></p>\n<h4 id=\"gulp-sourcemaps插件\"><a href=\"#gulp-sourcemaps插件\" class=\"headerlink\" title=\"gulp-sourcemaps插件\"></a>gulp-sourcemaps插件</h4><p>gulp sourcemap支持（Source map support for Gulp.js）</p>\n<p><a href=\"https://github.com/floridoo/gulp-sourcemaps\" target=\"_blank\" rel=\"noopener\">https://github.com/floridoo/gulp-sourcemaps</a></p>\n<h4 id=\"gulp-concat插件\"><a href=\"#gulp-concat插件\" class=\"headerlink\" title=\"gulp-concat插件\"></a>gulp-concat插件</h4><p>合并文件流（Streaming concat middleware for gulp）</p>\n<p><a href=\"https://github.com/contra/gulp-concat\" target=\"_blank\" rel=\"noopener\">https://github.com/contra/gulp-concat</a></p>\n<h4 id=\"gulp-autoprefixer-插件\"><a href=\"#gulp-autoprefixer-插件\" class=\"headerlink\" title=\"gulp-autoprefixer 插件\"></a>gulp-autoprefixer 插件</h4><p>给css加前缀（Prefix CSS）</p>\n<p><a href=\"https://github.com/sindresorhus/gulp-autoprefixer\" target=\"_blank\" rel=\"noopener\">https://github.com/sindresorhus/gulp-autoprefixer</a></p>\n<h4 id=\"gulp-file-include插件\"><a href=\"#gulp-file-include插件\" class=\"headerlink\" title=\"gulp-file-include插件\"></a>gulp-file-include插件</h4><p>文件include合并支持（a gulp plugin for file include）</p>\n<p><a href=\"https://github.com/coderhaoxin/gulp-file-include\" target=\"_blank\" rel=\"noopener\">https://github.com/coderhaoxin/gulp-file-include</a></p>\n<h4 id=\"gulp-rev插件\"><a href=\"#gulp-rev插件\" class=\"headerlink\" title=\"gulp-rev插件\"></a>gulp-rev插件</h4><p>静态资源加hash重命名<br>(Static asset revisioning by appending content hash to filenames: unicorn.css → unicorn-d41d8cd98f.css)</p>\n<p><a href=\"https://github.com/sindresorhus/gulp-rev\" target=\"_blank\" rel=\"noopener\">https://github.com/sindresorhus/gulp-rev</a></p>\n<h4 id=\"gulp-rev-collector插件\"><a href=\"#gulp-rev-collector插件\" class=\"headerlink\" title=\"gulp-rev-collector插件\"></a>gulp-rev-collector插件</h4><p>文件变化之后修改时间戳（不会翻译）</p>\n<p>（Static asset revision data collector from manifests, generated from different streams, and replace their links in html template.）</p>\n<p><a href=\"https://github.com/shonny-ua/gulp-rev-collector\" target=\"_blank\" rel=\"noopener\">https://github.com/shonny-ua/gulp-rev-collector</a></p>\n<h4 id=\"browser-sync插件\"><a href=\"#browser-sync插件\" class=\"headerlink\" title=\"browser-sync插件\"></a>browser-sync插件</h4><p>浏览器实时更新(Keep multiple browsers &amp; devices in sync when building websites.)</p>\n<p><a href=\"https://github.com/browsersync/browser-sync\" target=\"_blank\" rel=\"noopener\">https://github.com/browsersync/browser-sync</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Gulp是一个模块化打包工具。<br>Gulp本身只有几个入口，支持他拥有强大功能的是各种各样的插件。<br>Gulp的使用看起来非常简单，只需要一个一个任务链式执行就可以了，它还可以与Webpack结合起来使用<br>比如将Webpack作为一个插件来处理ES6转换为ES5的操作。<br>下面记录一下Gulp的API以及一些用到的插件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(globs[, options])</span><br></pre></td></tr></table></figure>\n<p>输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。</p>\n<p>globs：一种匹配文件的规则。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.dest(path[, options])</span><br></pre></td></tr></table></figure>\n<p>能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。</p>\n<p>文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。 请查看上述的 gulp.src 来了解更多信息。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(name[, deps], fn)</span><br></pre></td></tr></table></figure>\n<p>定义一个使用 Orchestrator 实现的任务（task）</p>\n<p>Orchestrator: 一个执行并发任务的库。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.watch(glob[, opts], tasks)</span><br></pre></td></tr></table></figure>\n<p>监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</p>\n<p>glob：</p>\n<p>类型： String or Array</p>\n<p>一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。</p>\n<p>eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> watcher = gulp.watch(<span class=\"string\">'js/**/*.js'</span>, [<span class=\"string\">'uglify'</span>,<span class=\"string\">'reload'</span>]);</span><br><span class=\"line\">watcher.on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'File '</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.watch(<span class=\"string\">'js/**/*.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'File '</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"相关链接：\"><a href=\"#相关链接：\" class=\"headerlink\" title=\"相关链接：\"></a>相关链接：</h3><p>中文网官网：</p>\n<p><a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"noopener\">http://www.gulpjs.com.cn/docs/api/</a></p>\n<h4 id=\"gulp-babel插件：\"><a href=\"#gulp-babel插件：\" class=\"headerlink\" title=\"gulp-babel插件：\"></a>gulp-babel插件：</h4><p>gulp使用babel编译文件</p>\n<p><a href=\"https://github.com/babel/gulp-babel\" target=\"_blank\" rel=\"noopener\">https://github.com/babel/gulp-babel</a></p>\n<h4 id=\"gulp-util插件\"><a href=\"#gulp-util插件\" class=\"headerlink\" title=\"gulp-util插件\"></a>gulp-util插件</h4><p>gulp插件的一些实用方法（Utility functions for gulp plugins）</p>\n<p><a href=\"https://github.com/gulpjs/gulp-util\" target=\"_blank\" rel=\"noopener\">https://github.com/gulpjs/gulp-util</a></p>\n<h4 id=\"gulp-imagemin插件\"><a href=\"#gulp-imagemin插件\" class=\"headerlink\" title=\"gulp-imagemin插件\"></a>gulp-imagemin插件</h4><p>压缩png、jpeg、gif、svg图片用的压缩工具（Minify PNG, JPEG, GIF and SVG images with imagemin）</p>\n<p><a href=\"https://github.com/sindresorhus/gulp-imagemin\" target=\"_blank\" rel=\"noopener\">https://github.com/sindresorhus/gulp-imagemin</a></p>\n<h4 id=\"gulp-clean插件\"><a href=\"#gulp-clean插件\" class=\"headerlink\" title=\"gulp-clean插件\"></a>gulp-clean插件</h4><p>用来移除文件或者文件夹的插件（A gulp plugin for removing files and folders from given paths.）</p>\n<p><a href=\"https://github.com/peter-vilja/gulp-clean\" target=\"_blank\" rel=\"noopener\">https://github.com/peter-vilja/gulp-clean</a></p>\n<h4 id=\"gulp-sequence插件\"><a href=\"#gulp-sequence插件\" class=\"headerlink\" title=\"gulp-sequence插件\"></a>gulp-sequence插件</h4><p>执行一个连续的gulp任务（Run a series of gulp tasks in order.）</p>\n<p><a href=\"https://github.com/teambition/gulp-sequence\" target=\"_blank\" rel=\"noopener\">https://github.com/teambition/gulp-sequence</a></p>\n<h4 id=\"gulp-spritesmith插件\"><a href=\"#gulp-spritesmith插件\" class=\"headerlink\" title=\"gulp.spritesmith插件\"></a>gulp.spritesmith插件</h4><p>合并图片（不会翻译）（Convert a set of images into a spritesheet and CSS variables via gulp）</p>\n<p><a href=\"https://github.com/twolfson/gulp.spritesmith\" target=\"_blank\" rel=\"noopener\">https://github.com/twolfson/gulp.spritesmith</a></p>\n<h4 id=\"gulp-sourcemaps插件\"><a href=\"#gulp-sourcemaps插件\" class=\"headerlink\" title=\"gulp-sourcemaps插件\"></a>gulp-sourcemaps插件</h4><p>gulp sourcemap支持（Source map support for Gulp.js）</p>\n<p><a href=\"https://github.com/floridoo/gulp-sourcemaps\" target=\"_blank\" rel=\"noopener\">https://github.com/floridoo/gulp-sourcemaps</a></p>\n<h4 id=\"gulp-concat插件\"><a href=\"#gulp-concat插件\" class=\"headerlink\" title=\"gulp-concat插件\"></a>gulp-concat插件</h4><p>合并文件流（Streaming concat middleware for gulp）</p>\n<p><a href=\"https://github.com/contra/gulp-concat\" target=\"_blank\" rel=\"noopener\">https://github.com/contra/gulp-concat</a></p>\n<h4 id=\"gulp-autoprefixer-插件\"><a href=\"#gulp-autoprefixer-插件\" class=\"headerlink\" title=\"gulp-autoprefixer 插件\"></a>gulp-autoprefixer 插件</h4><p>给css加前缀（Prefix CSS）</p>\n<p><a href=\"https://github.com/sindresorhus/gulp-autoprefixer\" target=\"_blank\" rel=\"noopener\">https://github.com/sindresorhus/gulp-autoprefixer</a></p>\n<h4 id=\"gulp-file-include插件\"><a href=\"#gulp-file-include插件\" class=\"headerlink\" title=\"gulp-file-include插件\"></a>gulp-file-include插件</h4><p>文件include合并支持（a gulp plugin for file include）</p>\n<p><a href=\"https://github.com/coderhaoxin/gulp-file-include\" target=\"_blank\" rel=\"noopener\">https://github.com/coderhaoxin/gulp-file-include</a></p>\n<h4 id=\"gulp-rev插件\"><a href=\"#gulp-rev插件\" class=\"headerlink\" title=\"gulp-rev插件\"></a>gulp-rev插件</h4><p>静态资源加hash重命名<br>(Static asset revisioning by appending content hash to filenames: unicorn.css → unicorn-d41d8cd98f.css)</p>\n<p><a href=\"https://github.com/sindresorhus/gulp-rev\" target=\"_blank\" rel=\"noopener\">https://github.com/sindresorhus/gulp-rev</a></p>\n<h4 id=\"gulp-rev-collector插件\"><a href=\"#gulp-rev-collector插件\" class=\"headerlink\" title=\"gulp-rev-collector插件\"></a>gulp-rev-collector插件</h4><p>文件变化之后修改时间戳（不会翻译）</p>\n<p>（Static asset revision data collector from manifests, generated from different streams, and replace their links in html template.）</p>\n<p><a href=\"https://github.com/shonny-ua/gulp-rev-collector\" target=\"_blank\" rel=\"noopener\">https://github.com/shonny-ua/gulp-rev-collector</a></p>\n<h4 id=\"browser-sync插件\"><a href=\"#browser-sync插件\" class=\"headerlink\" title=\"browser-sync插件\"></a>browser-sync插件</h4><p>浏览器实时更新(Keep multiple browsers &amp; devices in sync when building websites.)</p>\n<p><a href=\"https://github.com/browsersync/browser-sync\" target=\"_blank\" rel=\"noopener\">https://github.com/browsersync/browser-sync</a></p>\n"},{"title":"Nginx防止别人的域名解析到自己的服务器上","date":"2017-02-22T16:00:00.000Z","_content":"\n今天早上打开百度统计，发现突然多了一些奇怪的入口页面，点进去全部是我的网站内容，当时我就懵逼了。\n看了下请求的页面地址的ip，发现是指向我的服务器的，还以为是中毒了，检查了下nginx配置和服务器登录信息，发现没有异常。后面经过google发现，原来是别人把自己的域名解析到了我的服务器上。他们这样做的目的是为了可以增加搜索引擎对他的域名的收录。\n虽然对自己的站点看似没什么影响，但是总感觉心里不爽，于是网上查了下资料，解决了此问题。\n\n### Top10入口页面\n入口页面\t| 浏览量(PV)\t| 占比\n-|-\nhttp://xxxxx1.com\t| 1 | 5.56%\nhttp://www.xxxxx2.com | 1 | 5.56%\nhttp://www.xxxxx3.com | 1 | 5.56%\nhttp://www.xxxxx4.com | 1 | 5.56%\nhttp://xxxxx5.com | 1 | 5.56%\nhttp://xxxxx6.com | 1 | 5.56%\nhttp://xxxxx7.com | 1\t| 5.56%\nhttp://www.xxxxx8.com\t| 1\t|5.56%\nhttp://www.xxxxx9.com | 1 | 5.56%\nhttp://www.xxxxx10.com\t| 1\t| 5.56%\n||\n\n### 解决办法\n将nginx的默认配置修改一下，将其指向500或者直接rewrite到自己的网站。\n\n``` shell\nserver {  \n  listen 80 default;  \n  return 500;  \n}\n```\n当然也可以写成这样，跳转到自己的网站\n\n``` shell\nserver {\n  listen 80 default;  \n  rewrite ^(.*) https://www.epoos.com;\n}  \n```\n\n还可以粗暴一点，直接返回404，并关闭到accesslog日志\n\n``` shel\nserver {\n  listen 80 default;\n  location / {\n    return 404;\n    access_log off;\n  }\n}\n```","source":"_posts/host-ip.md","raw":"---\ntitle: Nginx防止别人的域名解析到自己的服务器上\ndate: 2017/02/23\ntag: nginx\ncategory: 技术\n---\n\n今天早上打开百度统计，发现突然多了一些奇怪的入口页面，点进去全部是我的网站内容，当时我就懵逼了。\n看了下请求的页面地址的ip，发现是指向我的服务器的，还以为是中毒了，检查了下nginx配置和服务器登录信息，发现没有异常。后面经过google发现，原来是别人把自己的域名解析到了我的服务器上。他们这样做的目的是为了可以增加搜索引擎对他的域名的收录。\n虽然对自己的站点看似没什么影响，但是总感觉心里不爽，于是网上查了下资料，解决了此问题。\n\n### Top10入口页面\n入口页面\t| 浏览量(PV)\t| 占比\n-|-\nhttp://xxxxx1.com\t| 1 | 5.56%\nhttp://www.xxxxx2.com | 1 | 5.56%\nhttp://www.xxxxx3.com | 1 | 5.56%\nhttp://www.xxxxx4.com | 1 | 5.56%\nhttp://xxxxx5.com | 1 | 5.56%\nhttp://xxxxx6.com | 1 | 5.56%\nhttp://xxxxx7.com | 1\t| 5.56%\nhttp://www.xxxxx8.com\t| 1\t|5.56%\nhttp://www.xxxxx9.com | 1 | 5.56%\nhttp://www.xxxxx10.com\t| 1\t| 5.56%\n||\n\n### 解决办法\n将nginx的默认配置修改一下，将其指向500或者直接rewrite到自己的网站。\n\n``` shell\nserver {  \n  listen 80 default;  \n  return 500;  \n}\n```\n当然也可以写成这样，跳转到自己的网站\n\n``` shell\nserver {\n  listen 80 default;  \n  rewrite ^(.*) https://www.epoos.com;\n}  \n```\n\n还可以粗暴一点，直接返回404，并关闭到accesslog日志\n\n``` shel\nserver {\n  listen 80 default;\n  location / {\n    return 404;\n    access_log off;\n  }\n}\n```","slug":"host-ip","published":1,"updated":"2018-05-22T12:35:24.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigj20006xwqt6rshui72","content":"<p>今天早上打开百度统计，发现突然多了一些奇怪的入口页面，点进去全部是我的网站内容，当时我就懵逼了。<br>看了下请求的页面地址的ip，发现是指向我的服务器的，还以为是中毒了，检查了下nginx配置和服务器登录信息，发现没有异常。后面经过google发现，原来是别人把自己的域名解析到了我的服务器上。他们这样做的目的是为了可以增加搜索引擎对他的域名的收录。<br>虽然对自己的站点看似没什么影响，但是总感觉心里不爽，于是网上查了下资料，解决了此问题。</p>\n<h3 id=\"Top10入口页面\"><a href=\"#Top10入口页面\" class=\"headerlink\" title=\"Top10入口页面\"></a>Top10入口页面</h3><table>\n<thead>\n<tr>\n<th>入口页面</th>\n<th>浏览量(PV)</th>\n<th>占比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://xxxxx1.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx1.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx2.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx2.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx3.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx3.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx4.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx4.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://xxxxx5.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx5.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://xxxxx6.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx6.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://xxxxx7.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx7.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx8.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx8.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx9.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx9.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx10.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx10.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>将nginx的默认配置修改一下，将其指向500或者直接rewrite到自己的网站。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">  listen 80 default;  </span><br><span class=\"line\">  return 500;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然也可以写成这样，跳转到自己的网站</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80 default;  </span><br><span class=\"line\">  rewrite ^(.*) https://www.epoos.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还可以粗暴一点，直接返回404，并关闭到accesslog日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80 default;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    return 404;</span><br><span class=\"line\">    access_log off;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>今天早上打开百度统计，发现突然多了一些奇怪的入口页面，点进去全部是我的网站内容，当时我就懵逼了。<br>看了下请求的页面地址的ip，发现是指向我的服务器的，还以为是中毒了，检查了下nginx配置和服务器登录信息，发现没有异常。后面经过google发现，原来是别人把自己的域名解析到了我的服务器上。他们这样做的目的是为了可以增加搜索引擎对他的域名的收录。<br>虽然对自己的站点看似没什么影响，但是总感觉心里不爽，于是网上查了下资料，解决了此问题。</p>\n<h3 id=\"Top10入口页面\"><a href=\"#Top10入口页面\" class=\"headerlink\" title=\"Top10入口页面\"></a>Top10入口页面</h3><table>\n<thead>\n<tr>\n<th>入口页面</th>\n<th>浏览量(PV)</th>\n<th>占比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://xxxxx1.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx1.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx2.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx2.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx3.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx3.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx4.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx4.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://xxxxx5.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx5.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://xxxxx6.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx6.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://xxxxx7.com\" target=\"_blank\" rel=\"noopener\">http://xxxxx7.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx8.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx8.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx9.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx9.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td><a href=\"http://www.xxxxx10.com\" target=\"_blank\" rel=\"noopener\">http://www.xxxxx10.com</a></td>\n<td>1</td>\n<td>5.56%</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>将nginx的默认配置修改一下，将其指向500或者直接rewrite到自己的网站。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">  listen 80 default;  </span><br><span class=\"line\">  return 500;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然也可以写成这样，跳转到自己的网站</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80 default;  </span><br><span class=\"line\">  rewrite ^(.*) https://www.epoos.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还可以粗暴一点，直接返回404，并关闭到accesslog日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80 default;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    return 404;</span><br><span class=\"line\">    access_log off;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"超文本传输协议 HTTP","date":"2017-02-26T16:00:00.000Z","_content":"\n超文本传输协议（HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。\n通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。\nHTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）\n\n通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。\nHTTP服务器则在那个端口监听客户端的请求。\n一旦收到请求，服务器会向客户端返回一个状态，比如\"HTTP/1.1 200 OK\"，以及返回的内容，如请求的文件、错误消息、或者其它信息\n\n---\n### 版本\n0.9\nHTTP/1.0\nHTTP/1.1\nHTTP/2\n---\n\n### 请求方法\nHTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源\n\n- *OPTIONS：*这个方法可以使服务器传回该资源所支持的所有HTTP请求方法。用'\\*'来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。\n\n- *GET：*向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。\n\n- *HEAD：*与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。\n\n- *POST：*向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。\n\n- *PUT：*向指定资源位置上传其最新内容。\n\n- *DELETE：*请求服务器删除Request-URI所标识的资源。\n\n- *TRACE：*回显服务器收到的请求，主要用于测试或诊断。\n\n- *CONNECT：*HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。\n\n- *方法名称是区分大小写的。\n当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。*\n\n---\n\n### TCP三次握手\n- 第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n- 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n- 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n---\n\n### 四次挥手\n\n\n\n---\n\n### 状态码\n\n1xx：消息——请求已被服务器接收，继续处理\n2xx：成功——请求已成功被服务器接收、理解、并接受\n3xx：重定向——需要后续操作才能完成这一请求\n4xx：请求错误——请求含有词法错误或者无法被执行\n5xx：服务器错误——服务器在处理某个正确请求时发生错误\n\n---\n\n### http1.0和http1.1的区别\n\n- 缓存处理：增加缓存头来控制缓存策略。\n- 带宽优化及网络连接的使用：支持断点续传以及部分请求\n- 错误通知的管理：新增多个错误状态码\n- 互联网地址的维护：HTTP1.1的请求消息和响应消息都应支持Host头域\n- 长连接：一个tcp可用于多个http\n\n---\n\n### 影响Http网络请求的的主要因素\n带宽和延迟\n延迟的原因：\n\n``` html\n1.浏览器阻塞：浏览器限制请求并发\n2.DNS查询：ip查询\n3.建立连接：tcp三次握手\n```\n\n### http缓存\n\n通过http获取网络数据的成本是非常高的，尤其是当需要大范围获取数据的时候，好在浏览器都有缓存策略\n\n1.使用 ETag 验证缓存的响应：\n服务器下发给客户端的时候在ETag头返回一个验证令牌Response Headers（ETag:\"58b4e12b-2492d\"）\n当客户端再次请求的时候讲令牌带上,Request Headers（If-None-Match:W/\"58b4e12b-2492d\"）\n服务端验证令牌如果没有发生改变则返回304\n\n\n2.Cache-Control：\n每个资源都可以通过 Cache-Control HTTP 头来定义自己的缓存策略\nCache-Control 指令控制谁在什么条件下可以缓存响应以及可以缓存多久\n\n``` html\nCache-Control 头在 HTTP/1.1 规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires）。当前的所有浏览器都支持 Cache-Control，因此，使用它就够了\n```\n- no-cache 和 no-store\nno-cache：表示必须先与服务器确认返回的响应是否被更改，然后通过ETag来判断是否需要下载资源。\nno-store：禁止浏览器和所有中继缓存存储返回的任何版本的响应。\n例如：一个包含个人隐私数据或银行数据的响应。每次用户请求该资源时，都会向服务器发送一个请求，每次都会下载完整的响应\n\n- public和private\n如果响应被标记为public，即使有关联的 HTTP 认证，甚至响应状态码无法正常缓存，响应也可以被缓存。大多数情况下，public不是必须的，因为明确的缓存信息（例如max-age）已表示 响应可以被缓存。\n相比之下，浏览器可以缓存private响应，但是通常只为单个用户缓存，因此，不允许任何中继缓存对其进行缓存 - 例如，用户浏览器可以缓存包含用户私人信息的 HTML 网页，但是 CDN 不能缓存。\n\n- max-age\n该指令指定从当前请求开始，允许获取的响应被重用的最长时间（单位为秒）\n\n- s-maxage\n同max-age，只用于共享缓存（比如CDN缓存）。\n\n- Last-modified（类似于ETag）\n服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式\n当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。\n\n\n3.expires：\nExpires 头指定了一个日期/时间， 在这个日期/时间之后，HTTP响应被认为是过时的\n如果还有一个 设置了 \"max-age\" 或者 \"s-max-age\" 指令的Cache-Control响应头，那么  Expires 头就会被忽略。\n\n### http状态码\n##### 1\t1xx消息\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。[4] 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。\n``` html\n*100 Continue*\n\n服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。[2\n\n*101 Switching Protocols*\n服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。[5]\n只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。\n\n*102 Processing（WebDAV；RFC 2518）*\nWebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。\n```\n\n##### 2\t2xx成功\n``` html\n```\n3\t3xx重定向\n\n4\t4xx客户端错误\n5\t5xx服务器错误\n6\t非官方状态码\n```\n\n---\n\n## 相关链接\n\n### 维基百科（需代理方能打开）\nhttps://zh.wikipedia.org/wiki/超文本传输协议\n\n### http1.0和http1.1的区别\nhttp://blog.csdn.net/forgotaboutgirl/article/details/6936982\n\n### http、socket、tcp/ip的区别\nhttp://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html\n\n### http缓存\nhttps://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn\n\nhttp://www.alloyteam.com/2016/03/discussion-on-web-caching/\n\n### http状态码\n\nhttps://zh.wikipedia.org/wiki/HTTP状态码","source":"_posts/http.md","raw":"---\ntitle: 超文本传输协议 HTTP\ntag: [http,cache,缓存]\ndate: 2017/02/27\ncategory: 技术\n---\n\n超文本传输协议（HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。\n通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。\nHTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）\n\n通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。\nHTTP服务器则在那个端口监听客户端的请求。\n一旦收到请求，服务器会向客户端返回一个状态，比如\"HTTP/1.1 200 OK\"，以及返回的内容，如请求的文件、错误消息、或者其它信息\n\n---\n### 版本\n0.9\nHTTP/1.0\nHTTP/1.1\nHTTP/2\n---\n\n### 请求方法\nHTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源\n\n- *OPTIONS：*这个方法可以使服务器传回该资源所支持的所有HTTP请求方法。用'\\*'来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。\n\n- *GET：*向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。\n\n- *HEAD：*与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。\n\n- *POST：*向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。\n\n- *PUT：*向指定资源位置上传其最新内容。\n\n- *DELETE：*请求服务器删除Request-URI所标识的资源。\n\n- *TRACE：*回显服务器收到的请求，主要用于测试或诊断。\n\n- *CONNECT：*HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。\n\n- *方法名称是区分大小写的。\n当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。*\n\n---\n\n### TCP三次握手\n- 第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n- 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n- 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n---\n\n### 四次挥手\n\n\n\n---\n\n### 状态码\n\n1xx：消息——请求已被服务器接收，继续处理\n2xx：成功——请求已成功被服务器接收、理解、并接受\n3xx：重定向——需要后续操作才能完成这一请求\n4xx：请求错误——请求含有词法错误或者无法被执行\n5xx：服务器错误——服务器在处理某个正确请求时发生错误\n\n---\n\n### http1.0和http1.1的区别\n\n- 缓存处理：增加缓存头来控制缓存策略。\n- 带宽优化及网络连接的使用：支持断点续传以及部分请求\n- 错误通知的管理：新增多个错误状态码\n- 互联网地址的维护：HTTP1.1的请求消息和响应消息都应支持Host头域\n- 长连接：一个tcp可用于多个http\n\n---\n\n### 影响Http网络请求的的主要因素\n带宽和延迟\n延迟的原因：\n\n``` html\n1.浏览器阻塞：浏览器限制请求并发\n2.DNS查询：ip查询\n3.建立连接：tcp三次握手\n```\n\n### http缓存\n\n通过http获取网络数据的成本是非常高的，尤其是当需要大范围获取数据的时候，好在浏览器都有缓存策略\n\n1.使用 ETag 验证缓存的响应：\n服务器下发给客户端的时候在ETag头返回一个验证令牌Response Headers（ETag:\"58b4e12b-2492d\"）\n当客户端再次请求的时候讲令牌带上,Request Headers（If-None-Match:W/\"58b4e12b-2492d\"）\n服务端验证令牌如果没有发生改变则返回304\n\n\n2.Cache-Control：\n每个资源都可以通过 Cache-Control HTTP 头来定义自己的缓存策略\nCache-Control 指令控制谁在什么条件下可以缓存响应以及可以缓存多久\n\n``` html\nCache-Control 头在 HTTP/1.1 规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires）。当前的所有浏览器都支持 Cache-Control，因此，使用它就够了\n```\n- no-cache 和 no-store\nno-cache：表示必须先与服务器确认返回的响应是否被更改，然后通过ETag来判断是否需要下载资源。\nno-store：禁止浏览器和所有中继缓存存储返回的任何版本的响应。\n例如：一个包含个人隐私数据或银行数据的响应。每次用户请求该资源时，都会向服务器发送一个请求，每次都会下载完整的响应\n\n- public和private\n如果响应被标记为public，即使有关联的 HTTP 认证，甚至响应状态码无法正常缓存，响应也可以被缓存。大多数情况下，public不是必须的，因为明确的缓存信息（例如max-age）已表示 响应可以被缓存。\n相比之下，浏览器可以缓存private响应，但是通常只为单个用户缓存，因此，不允许任何中继缓存对其进行缓存 - 例如，用户浏览器可以缓存包含用户私人信息的 HTML 网页，但是 CDN 不能缓存。\n\n- max-age\n该指令指定从当前请求开始，允许获取的响应被重用的最长时间（单位为秒）\n\n- s-maxage\n同max-age，只用于共享缓存（比如CDN缓存）。\n\n- Last-modified（类似于ETag）\n服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式\n当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。\n\n\n3.expires：\nExpires 头指定了一个日期/时间， 在这个日期/时间之后，HTTP响应被认为是过时的\n如果还有一个 设置了 \"max-age\" 或者 \"s-max-age\" 指令的Cache-Control响应头，那么  Expires 头就会被忽略。\n\n### http状态码\n##### 1\t1xx消息\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。[4] 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。\n``` html\n*100 Continue*\n\n服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。[2\n\n*101 Switching Protocols*\n服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。[5]\n只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。\n\n*102 Processing（WebDAV；RFC 2518）*\nWebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。\n```\n\n##### 2\t2xx成功\n``` html\n```\n3\t3xx重定向\n\n4\t4xx客户端错误\n5\t5xx服务器错误\n6\t非官方状态码\n```\n\n---\n\n## 相关链接\n\n### 维基百科（需代理方能打开）\nhttps://zh.wikipedia.org/wiki/超文本传输协议\n\n### http1.0和http1.1的区别\nhttp://blog.csdn.net/forgotaboutgirl/article/details/6936982\n\n### http、socket、tcp/ip的区别\nhttp://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html\n\n### http缓存\nhttps://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn\n\nhttp://www.alloyteam.com/2016/03/discussion-on-web-caching/\n\n### http状态码\n\nhttps://zh.wikipedia.org/wiki/HTTP状态码","slug":"http","published":1,"updated":"2018-05-22T12:35:24.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigj5000axwqt2ujrquqr","content":"<p>超文本传输协议（HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。<br>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。<br>通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。<br>HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）</p>\n<p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。<br>HTTP服务器则在那个端口监听客户端的请求。<br>一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息</p>\n<hr>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>0.9<br>HTTP/1.0<br>HTTP/1.1</p>\n<h2 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源</p>\n<ul>\n<li><p><em>OPTIONS：</em>这个方法可以使服务器传回该资源所支持的所有HTTP请求方法。用’*‘来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p>\n</li>\n<li><p><em>GET：</em>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</p>\n</li>\n<li><p><em>HEAD：</em>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p>\n</li>\n<li><p><em>POST：</em>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p>\n</li>\n<li><p><em>PUT：</em>向指定资源位置上传其最新内容。</p>\n</li>\n<li><p><em>DELETE：</em>请求服务器删除Request-URI所标识的资源。</p>\n</li>\n<li><p><em>TRACE：</em>回显服务器收到的请求，主要用于测试或诊断。</p>\n</li>\n<li><p><em>CONNECT：</em>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</p>\n</li>\n<li><p><em>方法名称是区分大小写的。<br>当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</em></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><ul>\n<li>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</li>\n<li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li>\n<li>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li>\n</ul>\n<hr>\n<h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><hr>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><p>1xx：消息——请求已被服务器接收，继续处理<br>2xx：成功——请求已成功被服务器接收、理解、并接受<br>3xx：重定向——需要后续操作才能完成这一请求<br>4xx：请求错误——请求含有词法错误或者无法被执行<br>5xx：服务器错误——服务器在处理某个正确请求时发生错误</p>\n<hr>\n<h3 id=\"http1-0和http1-1的区别\"><a href=\"#http1-0和http1-1的区别\" class=\"headerlink\" title=\"http1.0和http1.1的区别\"></a>http1.0和http1.1的区别</h3><ul>\n<li>缓存处理：增加缓存头来控制缓存策略。</li>\n<li>带宽优化及网络连接的使用：支持断点续传以及部分请求</li>\n<li>错误通知的管理：新增多个错误状态码</li>\n<li>互联网地址的维护：HTTP1.1的请求消息和响应消息都应支持Host头域</li>\n<li>长连接：一个tcp可用于多个http</li>\n</ul>\n<hr>\n<h3 id=\"影响Http网络请求的的主要因素\"><a href=\"#影响Http网络请求的的主要因素\" class=\"headerlink\" title=\"影响Http网络请求的的主要因素\"></a>影响Http网络请求的的主要因素</h3><p>带宽和延迟<br>延迟的原因：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.浏览器阻塞：浏览器限制请求并发</span><br><span class=\"line\">2.DNS查询：ip查询</span><br><span class=\"line\">3.建立连接：tcp三次握手</span><br></pre></td></tr></table></figure>\n<h3 id=\"http缓存\"><a href=\"#http缓存\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h3><p>通过http获取网络数据的成本是非常高的，尤其是当需要大范围获取数据的时候，好在浏览器都有缓存策略</p>\n<p>1.使用 ETag 验证缓存的响应：<br>服务器下发给客户端的时候在ETag头返回一个验证令牌Response Headers（ETag:”58b4e12b-2492d”）<br>当客户端再次请求的时候讲令牌带上,Request Headers（If-None-Match:W/“58b4e12b-2492d”）<br>服务端验证令牌如果没有发生改变则返回304</p>\n<p>2.Cache-Control：<br>每个资源都可以通过 Cache-Control HTTP 头来定义自己的缓存策略<br>Cache-Control 指令控制谁在什么条件下可以缓存响应以及可以缓存多久</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control 头在 HTTP/1.1 规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires）。当前的所有浏览器都支持 Cache-Control，因此，使用它就够了</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>no-cache 和 no-store<br>no-cache：表示必须先与服务器确认返回的响应是否被更改，然后通过ETag来判断是否需要下载资源。<br>no-store：禁止浏览器和所有中继缓存存储返回的任何版本的响应。<br>例如：一个包含个人隐私数据或银行数据的响应。每次用户请求该资源时，都会向服务器发送一个请求，每次都会下载完整的响应</p>\n</li>\n<li><p>public和private<br>如果响应被标记为public，即使有关联的 HTTP 认证，甚至响应状态码无法正常缓存，响应也可以被缓存。大多数情况下，public不是必须的，因为明确的缓存信息（例如max-age）已表示 响应可以被缓存。<br>相比之下，浏览器可以缓存private响应，但是通常只为单个用户缓存，因此，不允许任何中继缓存对其进行缓存 - 例如，用户浏览器可以缓存包含用户私人信息的 HTML 网页，但是 CDN 不能缓存。</p>\n</li>\n<li><p>max-age<br>该指令指定从当前请求开始，允许获取的响应被重用的最长时间（单位为秒）</p>\n</li>\n<li><p>s-maxage<br>同max-age，只用于共享缓存（比如CDN缓存）。</p>\n</li>\n<li><p>Last-modified（类似于ETag）<br>服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式<br>当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。</p>\n</li>\n</ul>\n<p>3.expires：<br>Expires 头指定了一个日期/时间， 在这个日期/时间之后，HTTP响应被认为是过时的<br>如果还有一个 设置了 “max-age” 或者 “s-max-age” 指令的Cache-Control响应头，那么  Expires 头就会被忽略。</p>\n<h3 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h3><h5 id=\"1-1xx消息\"><a href=\"#1-1xx消息\" class=\"headerlink\" title=\"1    1xx消息\"></a>1    1xx消息</h5><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。[4] 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*100 Continue*</span><br><span class=\"line\"></span><br><span class=\"line\">服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。[2</span><br><span class=\"line\"></span><br><span class=\"line\">*101 Switching Protocols*</span><br><span class=\"line\">服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。[5]</span><br><span class=\"line\">只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</span><br><span class=\"line\"></span><br><span class=\"line\">*102 Processing（WebDAV；RFC 2518）*</span><br><span class=\"line\">WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-2xx成功\"><a href=\"#2-2xx成功\" class=\"headerlink\" title=\"2    2xx成功\"></a>2    2xx成功</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">3\t3xx重定向</span><br><span class=\"line\"></span><br><span class=\"line\">4\t4xx客户端错误</span><br><span class=\"line\">5\t5xx服务器错误</span><br><span class=\"line\">6\t非官方状态码</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><h3 id=\"维基百科（需代理方能打开）\"><a href=\"#维基百科（需代理方能打开）\" class=\"headerlink\" title=\"维基百科（需代理方能打开）\"></a>维基百科（需代理方能打开）</h3><p><a href=\"https://zh.wikipedia.org/wiki/超文本传输协议\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/超文本传输协议</a></p>\n<h3 id=\"http1-0和http1-1的区别-1\"><a href=\"#http1-0和http1-1的区别-1\" class=\"headerlink\" title=\"http1.0和http1.1的区别\"></a>http1.0和http1.1的区别</h3><p><a href=\"http://blog.csdn.net/forgotaboutgirl/article/details/6936982\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/forgotaboutgirl/article/details/6936982</a></p>\n<h3 id=\"http、socket、tcp-ip的区别\"><a href=\"#http、socket、tcp-ip的区别\" class=\"headerlink\" title=\"http、socket、tcp/ip的区别\"></a>http、socket、tcp/ip的区别</h3><p><a href=\"http://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html</a></p>\n<h3 id=\"http缓存-1\"><a href=\"#http缓存-1\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h3><p><a href=\"https://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn</a></p>\n<p><a href=\"http://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/2016/03/discussion-on-web-caching/</a></p>\n<h3 id=\"http状态码-1\"><a href=\"#http状态码-1\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h3><p><a href=\"https://zh.wikipedia.org/wiki/HTTP状态码\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/HTTP状态码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>超文本传输协议（HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。<br>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。<br>通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。<br>HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）</p>\n<p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。<br>HTTP服务器则在那个端口监听客户端的请求。<br>一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息</p>\n<hr>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>0.9<br>HTTP/1.0<br>HTTP/1.1</p>\n<h2 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源</p>\n<ul>\n<li><p><em>OPTIONS：</em>这个方法可以使服务器传回该资源所支持的所有HTTP请求方法。用’*‘来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p>\n</li>\n<li><p><em>GET：</em>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</p>\n</li>\n<li><p><em>HEAD：</em>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p>\n</li>\n<li><p><em>POST：</em>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p>\n</li>\n<li><p><em>PUT：</em>向指定资源位置上传其最新内容。</p>\n</li>\n<li><p><em>DELETE：</em>请求服务器删除Request-URI所标识的资源。</p>\n</li>\n<li><p><em>TRACE：</em>回显服务器收到的请求，主要用于测试或诊断。</p>\n</li>\n<li><p><em>CONNECT：</em>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</p>\n</li>\n<li><p><em>方法名称是区分大小写的。<br>当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</em></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><ul>\n<li>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</li>\n<li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li>\n<li>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li>\n</ul>\n<hr>\n<h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><hr>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><p>1xx：消息——请求已被服务器接收，继续处理<br>2xx：成功——请求已成功被服务器接收、理解、并接受<br>3xx：重定向——需要后续操作才能完成这一请求<br>4xx：请求错误——请求含有词法错误或者无法被执行<br>5xx：服务器错误——服务器在处理某个正确请求时发生错误</p>\n<hr>\n<h3 id=\"http1-0和http1-1的区别\"><a href=\"#http1-0和http1-1的区别\" class=\"headerlink\" title=\"http1.0和http1.1的区别\"></a>http1.0和http1.1的区别</h3><ul>\n<li>缓存处理：增加缓存头来控制缓存策略。</li>\n<li>带宽优化及网络连接的使用：支持断点续传以及部分请求</li>\n<li>错误通知的管理：新增多个错误状态码</li>\n<li>互联网地址的维护：HTTP1.1的请求消息和响应消息都应支持Host头域</li>\n<li>长连接：一个tcp可用于多个http</li>\n</ul>\n<hr>\n<h3 id=\"影响Http网络请求的的主要因素\"><a href=\"#影响Http网络请求的的主要因素\" class=\"headerlink\" title=\"影响Http网络请求的的主要因素\"></a>影响Http网络请求的的主要因素</h3><p>带宽和延迟<br>延迟的原因：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.浏览器阻塞：浏览器限制请求并发</span><br><span class=\"line\">2.DNS查询：ip查询</span><br><span class=\"line\">3.建立连接：tcp三次握手</span><br></pre></td></tr></table></figure>\n<h3 id=\"http缓存\"><a href=\"#http缓存\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h3><p>通过http获取网络数据的成本是非常高的，尤其是当需要大范围获取数据的时候，好在浏览器都有缓存策略</p>\n<p>1.使用 ETag 验证缓存的响应：<br>服务器下发给客户端的时候在ETag头返回一个验证令牌Response Headers（ETag:”58b4e12b-2492d”）<br>当客户端再次请求的时候讲令牌带上,Request Headers（If-None-Match:W/“58b4e12b-2492d”）<br>服务端验证令牌如果没有发生改变则返回304</p>\n<p>2.Cache-Control：<br>每个资源都可以通过 Cache-Control HTTP 头来定义自己的缓存策略<br>Cache-Control 指令控制谁在什么条件下可以缓存响应以及可以缓存多久</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control 头在 HTTP/1.1 规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires）。当前的所有浏览器都支持 Cache-Control，因此，使用它就够了</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>no-cache 和 no-store<br>no-cache：表示必须先与服务器确认返回的响应是否被更改，然后通过ETag来判断是否需要下载资源。<br>no-store：禁止浏览器和所有中继缓存存储返回的任何版本的响应。<br>例如：一个包含个人隐私数据或银行数据的响应。每次用户请求该资源时，都会向服务器发送一个请求，每次都会下载完整的响应</p>\n</li>\n<li><p>public和private<br>如果响应被标记为public，即使有关联的 HTTP 认证，甚至响应状态码无法正常缓存，响应也可以被缓存。大多数情况下，public不是必须的，因为明确的缓存信息（例如max-age）已表示 响应可以被缓存。<br>相比之下，浏览器可以缓存private响应，但是通常只为单个用户缓存，因此，不允许任何中继缓存对其进行缓存 - 例如，用户浏览器可以缓存包含用户私人信息的 HTML 网页，但是 CDN 不能缓存。</p>\n</li>\n<li><p>max-age<br>该指令指定从当前请求开始，允许获取的响应被重用的最长时间（单位为秒）</p>\n</li>\n<li><p>s-maxage<br>同max-age，只用于共享缓存（比如CDN缓存）。</p>\n</li>\n<li><p>Last-modified（类似于ETag）<br>服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式<br>当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。</p>\n</li>\n</ul>\n<p>3.expires：<br>Expires 头指定了一个日期/时间， 在这个日期/时间之后，HTTP响应被认为是过时的<br>如果还有一个 设置了 “max-age” 或者 “s-max-age” 指令的Cache-Control响应头，那么  Expires 头就会被忽略。</p>\n<h3 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h3><h5 id=\"1-1xx消息\"><a href=\"#1-1xx消息\" class=\"headerlink\" title=\"1    1xx消息\"></a>1    1xx消息</h5><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。[4] 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*100 Continue*</span><br><span class=\"line\"></span><br><span class=\"line\">服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。[2</span><br><span class=\"line\"></span><br><span class=\"line\">*101 Switching Protocols*</span><br><span class=\"line\">服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。[5]</span><br><span class=\"line\">只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</span><br><span class=\"line\"></span><br><span class=\"line\">*102 Processing（WebDAV；RFC 2518）*</span><br><span class=\"line\">WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-2xx成功\"><a href=\"#2-2xx成功\" class=\"headerlink\" title=\"2    2xx成功\"></a>2    2xx成功</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">3\t3xx重定向</span><br><span class=\"line\"></span><br><span class=\"line\">4\t4xx客户端错误</span><br><span class=\"line\">5\t5xx服务器错误</span><br><span class=\"line\">6\t非官方状态码</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><h3 id=\"维基百科（需代理方能打开）\"><a href=\"#维基百科（需代理方能打开）\" class=\"headerlink\" title=\"维基百科（需代理方能打开）\"></a>维基百科（需代理方能打开）</h3><p><a href=\"https://zh.wikipedia.org/wiki/超文本传输协议\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/超文本传输协议</a></p>\n<h3 id=\"http1-0和http1-1的区别-1\"><a href=\"#http1-0和http1-1的区别-1\" class=\"headerlink\" title=\"http1.0和http1.1的区别\"></a>http1.0和http1.1的区别</h3><p><a href=\"http://blog.csdn.net/forgotaboutgirl/article/details/6936982\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/forgotaboutgirl/article/details/6936982</a></p>\n<h3 id=\"http、socket、tcp-ip的区别\"><a href=\"#http、socket、tcp-ip的区别\" class=\"headerlink\" title=\"http、socket、tcp/ip的区别\"></a>http、socket、tcp/ip的区别</h3><p><a href=\"http://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html</a></p>\n<h3 id=\"http缓存-1\"><a href=\"#http缓存-1\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h3><p><a href=\"https://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn</a></p>\n<p><a href=\"http://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/2016/03/discussion-on-web-caching/</a></p>\n<h3 id=\"http状态码-1\"><a href=\"#http状态码-1\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h3><p><a href=\"https://zh.wikipedia.org/wiki/HTTP状态码\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/HTTP状态码</a></p>\n"},{"title":"Http2基础及本地环境搭建","date":"2016-12-28T16:00:00.000Z","_content":"\nHttp/2,超文本传输协议第二版，最初命名为http2.0,是http协议的第二个版本，使用于万维网。\n它是HTTP协议自1999年HTTP 1.1发布后的首个更新，主要基于SPDY协议。\n随着http2的标准的确定，各大浏览器的大力支持，http2这个字眼开始出现在我们的视野里。\n为什么要使用http2呢，它和之前的http有什么区别？\n\n### 相对于http1.1的优点\n\n``` html\n1.多路复用、请求优化：一个连接内可以有无限个并行的请求即允许多个并行的http请求共用一个tpc连接。\n多路复用还可以设置优先级，让重要的资源先行。\n\n2.压缩了 HTTP 头：多个请求\n\n3.支持服务器推送：可以将一些资源直接通过服务器推送到用户端，减少请求次数。\n\n4.强制使用SSL传输协议\n```\n\n\n### Http2的安装注意事项\n\n``` html\n1.Http2是基于https的，因此，在使用Http2之前，首先需要弄好https，也就是需要申请网站证书。\n我这里用的是腾讯云的主机、腾讯云的域名、腾讯云的证书（买域名免费用，文章后面有传送门，https证书的申请、证书的安装）。\n\n2.需要Nginx版本1.9.5及以上。\n从最新发布的 Nginx 1.9.5 开始，httpv2module 已经替换了 ngxhttpspdy_module 并正式开始提供全面的 HTTP/2 支持。\n\n3.openssl版本1.0.2及以上。\nHttp2 需要扩展支持，可以用的有 ALPN 和 NPN 两种（Chrome 已经移除了对 NPN 的支持）\n为了使用 ALPN 需要将 OpenSSL 升级到 1.0.2 以上版本。\n```\nps:\n本人就是卡在这里卡了几天，折腾了好久最终重装了ubuntu系统 Ubuntu Server 16.04.1。\n因为，Ubuntu 16.04 LTS 1.0.2g,之前的版本自带的openssl都不支持http2\n当然爱折腾的也可以在不升级系统的情况下，自己安装新的openssl、然后进行一系列的重新编译nginx\n\n\n### 查看nginx和openssl版本\n``` shell\nopenssl version # LibreSSL 2.2.7\nnginx -v # nginx version: nginx/1.10.1\nnginx -V # 同上\n```\n\n\n#### http2配置\n\n在上面https的配置里面找到之前配置443的地方，加上一个http2就可以了\n\n``` html\nserver {\n    listen 443 http2;\n    server_name localhost;\n    ssl on;\n    ssl_certificate 1_www.domain.com_bundle.crt;\n    ssl_certificate_key 2_www.domain.com.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n    ssl_prefer_server_ciphers on;\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n```\n\n至此，正http2环境已经搭建完成，刷新页面，就可以看见网站的请求已经变成了http2了 \n\neg:https://www.epoos.com/\n\n\n\n\n\n### 传送门：\n\n#### http2的兼容性\n\nhttp://caniuse.com/#search=http2\n\n#### https证书申请\n\nhttps://www.qcloud.com/document/product/214/6989\n\n#### https证书安装\n\nhttps://www.qcloud.com/document/product/400/4143\n\n#### Supporting HTTP/2\n\nhttps://www.nginx.com/blog/supporting-http2-google-chrome-users/","source":"_posts/http2.md","raw":"---\ntitle: Http2基础及本地环境搭建\ndate: 2016/12/29\ntag: http2\ncategory: 技术\n---\n\nHttp/2,超文本传输协议第二版，最初命名为http2.0,是http协议的第二个版本，使用于万维网。\n它是HTTP协议自1999年HTTP 1.1发布后的首个更新，主要基于SPDY协议。\n随着http2的标准的确定，各大浏览器的大力支持，http2这个字眼开始出现在我们的视野里。\n为什么要使用http2呢，它和之前的http有什么区别？\n\n### 相对于http1.1的优点\n\n``` html\n1.多路复用、请求优化：一个连接内可以有无限个并行的请求即允许多个并行的http请求共用一个tpc连接。\n多路复用还可以设置优先级，让重要的资源先行。\n\n2.压缩了 HTTP 头：多个请求\n\n3.支持服务器推送：可以将一些资源直接通过服务器推送到用户端，减少请求次数。\n\n4.强制使用SSL传输协议\n```\n\n\n### Http2的安装注意事项\n\n``` html\n1.Http2是基于https的，因此，在使用Http2之前，首先需要弄好https，也就是需要申请网站证书。\n我这里用的是腾讯云的主机、腾讯云的域名、腾讯云的证书（买域名免费用，文章后面有传送门，https证书的申请、证书的安装）。\n\n2.需要Nginx版本1.9.5及以上。\n从最新发布的 Nginx 1.9.5 开始，httpv2module 已经替换了 ngxhttpspdy_module 并正式开始提供全面的 HTTP/2 支持。\n\n3.openssl版本1.0.2及以上。\nHttp2 需要扩展支持，可以用的有 ALPN 和 NPN 两种（Chrome 已经移除了对 NPN 的支持）\n为了使用 ALPN 需要将 OpenSSL 升级到 1.0.2 以上版本。\n```\nps:\n本人就是卡在这里卡了几天，折腾了好久最终重装了ubuntu系统 Ubuntu Server 16.04.1。\n因为，Ubuntu 16.04 LTS 1.0.2g,之前的版本自带的openssl都不支持http2\n当然爱折腾的也可以在不升级系统的情况下，自己安装新的openssl、然后进行一系列的重新编译nginx\n\n\n### 查看nginx和openssl版本\n``` shell\nopenssl version # LibreSSL 2.2.7\nnginx -v # nginx version: nginx/1.10.1\nnginx -V # 同上\n```\n\n\n#### http2配置\n\n在上面https的配置里面找到之前配置443的地方，加上一个http2就可以了\n\n``` html\nserver {\n    listen 443 http2;\n    server_name localhost;\n    ssl on;\n    ssl_certificate 1_www.domain.com_bundle.crt;\n    ssl_certificate_key 2_www.domain.com.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n    ssl_prefer_server_ciphers on;\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n```\n\n至此，正http2环境已经搭建完成，刷新页面，就可以看见网站的请求已经变成了http2了 \n\neg:https://www.epoos.com/\n\n\n\n\n\n### 传送门：\n\n#### http2的兼容性\n\nhttp://caniuse.com/#search=http2\n\n#### https证书申请\n\nhttps://www.qcloud.com/document/product/214/6989\n\n#### https证书安装\n\nhttps://www.qcloud.com/document/product/400/4143\n\n#### Supporting HTTP/2\n\nhttps://www.nginx.com/blog/supporting-http2-google-chrome-users/","slug":"http2","published":1,"updated":"2018-05-22T12:35:24.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigj7000bxwqtlfy7fzxx","content":"<p>Http/2,超文本传输协议第二版，最初命名为http2.0,是http协议的第二个版本，使用于万维网。<br>它是HTTP协议自1999年HTTP 1.1发布后的首个更新，主要基于SPDY协议。<br>随着http2的标准的确定，各大浏览器的大力支持，http2这个字眼开始出现在我们的视野里。<br>为什么要使用http2呢，它和之前的http有什么区别？</p>\n<h3 id=\"相对于http1-1的优点\"><a href=\"#相对于http1-1的优点\" class=\"headerlink\" title=\"相对于http1.1的优点\"></a>相对于http1.1的优点</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.多路复用、请求优化：一个连接内可以有无限个并行的请求即允许多个并行的http请求共用一个tpc连接。</span><br><span class=\"line\">多路复用还可以设置优先级，让重要的资源先行。</span><br><span class=\"line\"></span><br><span class=\"line\">2.压缩了 HTTP 头：多个请求</span><br><span class=\"line\"></span><br><span class=\"line\">3.支持服务器推送：可以将一些资源直接通过服务器推送到用户端，减少请求次数。</span><br><span class=\"line\"></span><br><span class=\"line\">4.强制使用SSL传输协议</span><br></pre></td></tr></table></figure>\n<h3 id=\"Http2的安装注意事项\"><a href=\"#Http2的安装注意事项\" class=\"headerlink\" title=\"Http2的安装注意事项\"></a>Http2的安装注意事项</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Http2是基于https的，因此，在使用Http2之前，首先需要弄好https，也就是需要申请网站证书。</span><br><span class=\"line\">我这里用的是腾讯云的主机、腾讯云的域名、腾讯云的证书（买域名免费用，文章后面有传送门，https证书的申请、证书的安装）。</span><br><span class=\"line\"></span><br><span class=\"line\">2.需要Nginx版本1.9.5及以上。</span><br><span class=\"line\">从最新发布的 Nginx 1.9.5 开始，httpv2module 已经替换了 ngxhttpspdy_module 并正式开始提供全面的 HTTP/2 支持。</span><br><span class=\"line\"></span><br><span class=\"line\">3.openssl版本1.0.2及以上。</span><br><span class=\"line\">Http2 需要扩展支持，可以用的有 ALPN 和 NPN 两种（Chrome 已经移除了对 NPN 的支持）</span><br><span class=\"line\">为了使用 ALPN 需要将 OpenSSL 升级到 1.0.2 以上版本。</span><br></pre></td></tr></table></figure>\n<p>ps:<br>本人就是卡在这里卡了几天，折腾了好久最终重装了ubuntu系统 Ubuntu Server 16.04.1。<br>因为，Ubuntu 16.04 LTS 1.0.2g,之前的版本自带的openssl都不支持http2<br>当然爱折腾的也可以在不升级系统的情况下，自己安装新的openssl、然后进行一系列的重新编译nginx</p>\n<h3 id=\"查看nginx和openssl版本\"><a href=\"#查看nginx和openssl版本\" class=\"headerlink\" title=\"查看nginx和openssl版本\"></a>查看nginx和openssl版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl version # LibreSSL 2.2.7</span><br><span class=\"line\">nginx -v # nginx version: nginx/1.10.1</span><br><span class=\"line\">nginx -V # 同上</span><br></pre></td></tr></table></figure>\n<h4 id=\"http2配置\"><a href=\"#http2配置\" class=\"headerlink\" title=\"http2配置\"></a>http2配置</h4><p>在上面https的配置里面找到之前配置443的地方，加上一个http2就可以了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 http2;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate 1_www.domain.com_bundle.crt;</span><br><span class=\"line\">    ssl_certificate_key 2_www.domain.com.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，正http2环境已经搭建完成，刷新页面，就可以看见网站的请求已经变成了http2了 </p>\n<p>eg:<a href=\"https://www.epoos.com/\">https://www.epoos.com/</a></p>\n<h3 id=\"传送门：\"><a href=\"#传送门：\" class=\"headerlink\" title=\"传送门：\"></a>传送门：</h3><h4 id=\"http2的兼容性\"><a href=\"#http2的兼容性\" class=\"headerlink\" title=\"http2的兼容性\"></a>http2的兼容性</h4><p><a href=\"http://caniuse.com/#search=http2\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#search=http2</a></p>\n<h4 id=\"https证书申请\"><a href=\"#https证书申请\" class=\"headerlink\" title=\"https证书申请\"></a>https证书申请</h4><p><a href=\"https://www.qcloud.com/document/product/214/6989\" target=\"_blank\" rel=\"noopener\">https://www.qcloud.com/document/product/214/6989</a></p>\n<h4 id=\"https证书安装\"><a href=\"#https证书安装\" class=\"headerlink\" title=\"https证书安装\"></a>https证书安装</h4><p><a href=\"https://www.qcloud.com/document/product/400/4143\" target=\"_blank\" rel=\"noopener\">https://www.qcloud.com/document/product/400/4143</a></p>\n<h4 id=\"Supporting-HTTP-2\"><a href=\"#Supporting-HTTP-2\" class=\"headerlink\" title=\"Supporting HTTP/2\"></a>Supporting HTTP/2</h4><p><a href=\"https://www.nginx.com/blog/supporting-http2-google-chrome-users/\" target=\"_blank\" rel=\"noopener\">https://www.nginx.com/blog/supporting-http2-google-chrome-users/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Http/2,超文本传输协议第二版，最初命名为http2.0,是http协议的第二个版本，使用于万维网。<br>它是HTTP协议自1999年HTTP 1.1发布后的首个更新，主要基于SPDY协议。<br>随着http2的标准的确定，各大浏览器的大力支持，http2这个字眼开始出现在我们的视野里。<br>为什么要使用http2呢，它和之前的http有什么区别？</p>\n<h3 id=\"相对于http1-1的优点\"><a href=\"#相对于http1-1的优点\" class=\"headerlink\" title=\"相对于http1.1的优点\"></a>相对于http1.1的优点</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.多路复用、请求优化：一个连接内可以有无限个并行的请求即允许多个并行的http请求共用一个tpc连接。</span><br><span class=\"line\">多路复用还可以设置优先级，让重要的资源先行。</span><br><span class=\"line\"></span><br><span class=\"line\">2.压缩了 HTTP 头：多个请求</span><br><span class=\"line\"></span><br><span class=\"line\">3.支持服务器推送：可以将一些资源直接通过服务器推送到用户端，减少请求次数。</span><br><span class=\"line\"></span><br><span class=\"line\">4.强制使用SSL传输协议</span><br></pre></td></tr></table></figure>\n<h3 id=\"Http2的安装注意事项\"><a href=\"#Http2的安装注意事项\" class=\"headerlink\" title=\"Http2的安装注意事项\"></a>Http2的安装注意事项</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Http2是基于https的，因此，在使用Http2之前，首先需要弄好https，也就是需要申请网站证书。</span><br><span class=\"line\">我这里用的是腾讯云的主机、腾讯云的域名、腾讯云的证书（买域名免费用，文章后面有传送门，https证书的申请、证书的安装）。</span><br><span class=\"line\"></span><br><span class=\"line\">2.需要Nginx版本1.9.5及以上。</span><br><span class=\"line\">从最新发布的 Nginx 1.9.5 开始，httpv2module 已经替换了 ngxhttpspdy_module 并正式开始提供全面的 HTTP/2 支持。</span><br><span class=\"line\"></span><br><span class=\"line\">3.openssl版本1.0.2及以上。</span><br><span class=\"line\">Http2 需要扩展支持，可以用的有 ALPN 和 NPN 两种（Chrome 已经移除了对 NPN 的支持）</span><br><span class=\"line\">为了使用 ALPN 需要将 OpenSSL 升级到 1.0.2 以上版本。</span><br></pre></td></tr></table></figure>\n<p>ps:<br>本人就是卡在这里卡了几天，折腾了好久最终重装了ubuntu系统 Ubuntu Server 16.04.1。<br>因为，Ubuntu 16.04 LTS 1.0.2g,之前的版本自带的openssl都不支持http2<br>当然爱折腾的也可以在不升级系统的情况下，自己安装新的openssl、然后进行一系列的重新编译nginx</p>\n<h3 id=\"查看nginx和openssl版本\"><a href=\"#查看nginx和openssl版本\" class=\"headerlink\" title=\"查看nginx和openssl版本\"></a>查看nginx和openssl版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl version # LibreSSL 2.2.7</span><br><span class=\"line\">nginx -v # nginx version: nginx/1.10.1</span><br><span class=\"line\">nginx -V # 同上</span><br></pre></td></tr></table></figure>\n<h4 id=\"http2配置\"><a href=\"#http2配置\" class=\"headerlink\" title=\"http2配置\"></a>http2配置</h4><p>在上面https的配置里面找到之前配置443的地方，加上一个http2就可以了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 http2;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate 1_www.domain.com_bundle.crt;</span><br><span class=\"line\">    ssl_certificate_key 2_www.domain.com.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，正http2环境已经搭建完成，刷新页面，就可以看见网站的请求已经变成了http2了 </p>\n<p>eg:<a href=\"https://www.epoos.com/\">https://www.epoos.com/</a></p>\n<h3 id=\"传送门：\"><a href=\"#传送门：\" class=\"headerlink\" title=\"传送门：\"></a>传送门：</h3><h4 id=\"http2的兼容性\"><a href=\"#http2的兼容性\" class=\"headerlink\" title=\"http2的兼容性\"></a>http2的兼容性</h4><p><a href=\"http://caniuse.com/#search=http2\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#search=http2</a></p>\n<h4 id=\"https证书申请\"><a href=\"#https证书申请\" class=\"headerlink\" title=\"https证书申请\"></a>https证书申请</h4><p><a href=\"https://www.qcloud.com/document/product/214/6989\" target=\"_blank\" rel=\"noopener\">https://www.qcloud.com/document/product/214/6989</a></p>\n<h4 id=\"https证书安装\"><a href=\"#https证书安装\" class=\"headerlink\" title=\"https证书安装\"></a>https证书安装</h4><p><a href=\"https://www.qcloud.com/document/product/400/4143\" target=\"_blank\" rel=\"noopener\">https://www.qcloud.com/document/product/400/4143</a></p>\n<h4 id=\"Supporting-HTTP-2\"><a href=\"#Supporting-HTTP-2\" class=\"headerlink\" title=\"Supporting HTTP/2\"></a>Supporting HTTP/2</h4><p><a href=\"https://www.nginx.com/blog/supporting-http2-google-chrome-users/\" target=\"_blank\" rel=\"noopener\">https://www.nginx.com/blog/supporting-http2-google-chrome-users/</a></p>\n"},{"title":"Https基础以及本地Https搭建","date":"2017-12-11T16:00:00.000Z","_content":"\n### 一、https是什么（相关概念简述）？\n超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。 —— 维基百科\n\n#### 1.对称加密和非对称加密\n对称加密：需要对加解密的数据采用相同的密钥的加密算法。\n优点：加密算法公开，计算量小，加密速度快，通常用在消息发送方加密大量数据的时候使用\n缺点：需要消息传递的双方约定加密的密钥，一旦一方的密钥泄漏，信息就变得不安全了\n\n非对称加密：需要两个密钥（公钥和私钥）来进行加密和解密，公钥解密私钥的加密数据、私钥解密公钥的加密数据，私钥一般存储在服务器端不会外漏\n优点：相对于对称加密更安全，即使公钥泄漏也没办法解密\n缺点：加解密花费时间长，只适合小数据量的加解密。\n\n\n#### 2.https的加解密方式\nhttps采用的是非对称加密和对称加密混合的方式进行加密的。\n使用非对称加密的方式加密传递对称加密的密钥，随后使用对称加密进行通讯。\n\nHTTP 建立 TCP 链接需要进行三次握手\nHTTPS 在 TCP 之上又加上了 TLS 的握手过程，在握手过程中确定双方传输数据的密码信息。\nSSL/TLS 握手是为了安全的协商出一份对称加密的密钥\n\n#### 3.对称加密与非对称加密：\n\n对称加密算法在加密和解密时使用的是同一个秘钥；\n而非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）。\n\n与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。\n公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。\n因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。\n\n\n#### 4.https TLS握手过程：\n\n``` html\n1.浏览器发送一个消息：包含一个随机数Random1，支持的加密套件，TLS版本号（被叫做ClientHello请求）\n2.服务端接收消息并回应（被叫做ServerHello）\n\ta）验证tls版本是否支持\n\tb)服务端从客户端发送的加密规则中选择一组加密套件\n\tc)接收随机数Random1,生成一份随机数Random2\n\td)下发证书，包含公钥、随机数Random2（公钥放在服务器的数字证书中）\n\te)如果有必要服务端需要确认客户端身份，则会要求客户端发送自己的证书（如usb密钥）\n3.浏览器接收证书信息\n  a)验证证书的合法性\n  b)取出服务端发送过来的证书中的公钥,生成随机数Random3，并用证书中提供的公钥加密Random3\n  c)最后将加密后的随机数消息发送给服务器\n4.服务器接收浏览器发来的信息：使用自己的私钥将Random3解密出来，\n5.用三个随机数生成session Key作为对称密钥，为后续数据传输用\n```\n\n握手结束之后，之后所有的通信数据将由浏览器之前生成的随机密码并利用对称加密算法进行加密\n\nps：之前浏览器与服务端互相发送加密的握手消息验证，目的是为了保证双方都获得了一致的对称加解密的密码，并且验证双方可以正常的加解密数据，为后面的真正数据传输做一次测试。\n\n\n#### 5.https session Key\nhttps建立连接是一个比较复杂的过程，如果连接断开之后需要重新进行建立连接。\n重连有两种方式：sessionID和session ticket\n\n如果对话中断，客户端可以发送之前的session重连对话，如果服务端存在这个sessionId就可以重新建立连接。\n\nsession ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。\n所以，如果客户端的请求发到另一台服务器，就无法恢复对话。session ticket就是为了解决这个问题而诞生的，目前只有Firefox和Chrome浏览器支持。\n\n\n##### 6.openssl是什么？\n是一个开源程序的套件,这个套件有三个部分组成：一是libcryto，这是一个具有通用功能的加密库，里面实现了众多的加密库；二是libssl，这个是实现ssl机制的，它是用于实现TLS/SSL的功能；三是openssl，是个多功能命令行工具，它可以实现加密解密，甚至还可以当CA来用，可以让你创建证书、吊销证书。\n\n\n### 二、为什么要使用https\n1.数据加密，提高安全性。\n\n2.证书保证，防止冒充\n\n3.校验数据，防止被篡改\n\n\n\n### 三、如何使用https\n\n#### 1.使用openssl生成本地证书\n\n##### 1）准备工作\n创建一个存放证书的目录，如/sshkey：\n``` shell\ncd ~\nmkdir sshkey\n```\n\n在sskkey目录下创建demoCA子目录\n``` shell\ncd sshkey\nmkdir demoCA && cd demoCA && touch index.txt && touch serial && echo \"01\">./serial && mkdir newcerts\n```\n\n#### 2）正式生成：\n\n制作CA证书：\n\n第一步：生成ca.key CA私钥\n```shell\nopenssl genrsa -des3 -out ca.key 2048\n```\n\n第二步：生成ca.crt CA根证书（公钥）：\n```shell\nopenssl req -new -x509 -days 7305 -key ca.key -out ca.crt\n```\n\n生成网站的证书，并用CA签名认证（假设网站域名为www.example.com）\n\n第三步：生成www.example.com证书私钥：\n```shell\nopenssl genrsa -des3 -out www.example.com.pem 1024\n```\n\n第四步：制作解密后的www.example.com证书私钥：\n```shell\nopenssl rsa -in www.example.com.pem -out www.example.com.key\n```\nps:在common name中填入网站域名，如www.example.com即可生成改站点的证书(这里一定要填入common name，不然生成的东西为空)\n\n第五步：生成签名请求：\n```shell\nopenssl req -new -key www.example.com.pem -out www.example.com.csr\n```\n\n第六步：用CA进行签名：\n```shell\nopenssl ca -policy policy_anything -days 1460 -cert ca.crt -keyfile ca.key -in www.example.com.csr -out www.example.com.crt\n```\n\n如果一切顺利，生成完成之后在demoCA下应该会看到如下子目录\n\n```shell\n#ls\nca.crt # 根证书\nca.key # CA私钥\nwww.example.com.crt # \nwww.example.com.csr\nwww.example.com.key\nwww.example.com.pem\ndemoCA\t\t\t\n```\n\n\n##### 遇到的问题\n如果遇到如下报错\n``` html\nUsing configuration from /private/etc/ssl/openssl.cnf\nvariable lookup failed for ca::default_ca\n140735980385160:error:0E06D06C:configuration file routines:NCONF_get_string:no value:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/crypto/conf/conf_lib.c:323:group=ca name=default_ca\n```\n\n解决办法：将openssl安装目录下的openssl.cnf 拷贝到配置目录\n``` shell\ncp /usr/local/etc/openssl/openssl.cnf /private/etc/ssl/openssl.cnf\n```\n\n并修改其中的配置文件的dir的文件路径为之前创建的demoCA文件路径\n``` shell\ndir >> = /Users/zsr/learn/epoos/sshkey/demoCA/ > >\n```\n\n至此，使用openssl生成本地证书的过程就结束了，接下来就只需要在nginx中配置一番就可以看到一个https的网站了。\n\n#### 2.生成证书之后nginx配置如下：\n```shell\n  1 server # 使用nginx做普通http代理\n  2 {\n  3     listen 80;\n  4     server_name www.example.com;\n  5     index index.html;\n  6     location /\n  7     {\n  8         #proxy_pass http://10.242.22.138:8084/;\n  9         alias /Users/zsr/learn/example/;\n 10     }\n 11     error_log /usr/local/etc/nginx/logs/error.log;\n 12 }\n\n 13 server # 使用nginx做普通https代理\n 14 {\n 15   listen 443;\n 16   server_name www.example.com;\n 17   index index.html;\n 18   location /\n 19   {\n 20     alias /Users/zsr/learn/example/;\n 21   }\n 22   ssl on;\n 23   ssl_certificate /Users/zsr/learn/example/sshkey/www.example.com.crt\n 24   ssl_certificate_key /Users/zsr/learn/example/sshkey/www.example.com.key\n 25 }\n```\n\n\n\n\n### 相关传送门：\n\n生成证书\nhttp://blog.creke.net/762.html\n\nhttps介绍：\nhttp://wetest.qq.com/lab/view/110.html\n\n知乎上的https介绍：\nhttps://zhuanlan.zhihu.com/p/26682342\n\n简书上的介绍\nhttp://www.jianshu.com/p/7158568e4867\n\n阮一峰系列\n\nhttp://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\n\nhttp://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\n\nhttp://www.ruanyifeng.com/blog/2016/08/http.html\n","source":"_posts/https.md","raw":"---\ntitle: Https基础以及本地Https搭建\ntag: https\ndate: 2017/12/12\ncategory: 技术\n---\n\n### 一、https是什么（相关概念简述）？\n超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。 —— 维基百科\n\n#### 1.对称加密和非对称加密\n对称加密：需要对加解密的数据采用相同的密钥的加密算法。\n优点：加密算法公开，计算量小，加密速度快，通常用在消息发送方加密大量数据的时候使用\n缺点：需要消息传递的双方约定加密的密钥，一旦一方的密钥泄漏，信息就变得不安全了\n\n非对称加密：需要两个密钥（公钥和私钥）来进行加密和解密，公钥解密私钥的加密数据、私钥解密公钥的加密数据，私钥一般存储在服务器端不会外漏\n优点：相对于对称加密更安全，即使公钥泄漏也没办法解密\n缺点：加解密花费时间长，只适合小数据量的加解密。\n\n\n#### 2.https的加解密方式\nhttps采用的是非对称加密和对称加密混合的方式进行加密的。\n使用非对称加密的方式加密传递对称加密的密钥，随后使用对称加密进行通讯。\n\nHTTP 建立 TCP 链接需要进行三次握手\nHTTPS 在 TCP 之上又加上了 TLS 的握手过程，在握手过程中确定双方传输数据的密码信息。\nSSL/TLS 握手是为了安全的协商出一份对称加密的密钥\n\n#### 3.对称加密与非对称加密：\n\n对称加密算法在加密和解密时使用的是同一个秘钥；\n而非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）。\n\n与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。\n公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。\n因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。\n\n\n#### 4.https TLS握手过程：\n\n``` html\n1.浏览器发送一个消息：包含一个随机数Random1，支持的加密套件，TLS版本号（被叫做ClientHello请求）\n2.服务端接收消息并回应（被叫做ServerHello）\n\ta）验证tls版本是否支持\n\tb)服务端从客户端发送的加密规则中选择一组加密套件\n\tc)接收随机数Random1,生成一份随机数Random2\n\td)下发证书，包含公钥、随机数Random2（公钥放在服务器的数字证书中）\n\te)如果有必要服务端需要确认客户端身份，则会要求客户端发送自己的证书（如usb密钥）\n3.浏览器接收证书信息\n  a)验证证书的合法性\n  b)取出服务端发送过来的证书中的公钥,生成随机数Random3，并用证书中提供的公钥加密Random3\n  c)最后将加密后的随机数消息发送给服务器\n4.服务器接收浏览器发来的信息：使用自己的私钥将Random3解密出来，\n5.用三个随机数生成session Key作为对称密钥，为后续数据传输用\n```\n\n握手结束之后，之后所有的通信数据将由浏览器之前生成的随机密码并利用对称加密算法进行加密\n\nps：之前浏览器与服务端互相发送加密的握手消息验证，目的是为了保证双方都获得了一致的对称加解密的密码，并且验证双方可以正常的加解密数据，为后面的真正数据传输做一次测试。\n\n\n#### 5.https session Key\nhttps建立连接是一个比较复杂的过程，如果连接断开之后需要重新进行建立连接。\n重连有两种方式：sessionID和session ticket\n\n如果对话中断，客户端可以发送之前的session重连对话，如果服务端存在这个sessionId就可以重新建立连接。\n\nsession ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。\n所以，如果客户端的请求发到另一台服务器，就无法恢复对话。session ticket就是为了解决这个问题而诞生的，目前只有Firefox和Chrome浏览器支持。\n\n\n##### 6.openssl是什么？\n是一个开源程序的套件,这个套件有三个部分组成：一是libcryto，这是一个具有通用功能的加密库，里面实现了众多的加密库；二是libssl，这个是实现ssl机制的，它是用于实现TLS/SSL的功能；三是openssl，是个多功能命令行工具，它可以实现加密解密，甚至还可以当CA来用，可以让你创建证书、吊销证书。\n\n\n### 二、为什么要使用https\n1.数据加密，提高安全性。\n\n2.证书保证，防止冒充\n\n3.校验数据，防止被篡改\n\n\n\n### 三、如何使用https\n\n#### 1.使用openssl生成本地证书\n\n##### 1）准备工作\n创建一个存放证书的目录，如/sshkey：\n``` shell\ncd ~\nmkdir sshkey\n```\n\n在sskkey目录下创建demoCA子目录\n``` shell\ncd sshkey\nmkdir demoCA && cd demoCA && touch index.txt && touch serial && echo \"01\">./serial && mkdir newcerts\n```\n\n#### 2）正式生成：\n\n制作CA证书：\n\n第一步：生成ca.key CA私钥\n```shell\nopenssl genrsa -des3 -out ca.key 2048\n```\n\n第二步：生成ca.crt CA根证书（公钥）：\n```shell\nopenssl req -new -x509 -days 7305 -key ca.key -out ca.crt\n```\n\n生成网站的证书，并用CA签名认证（假设网站域名为www.example.com）\n\n第三步：生成www.example.com证书私钥：\n```shell\nopenssl genrsa -des3 -out www.example.com.pem 1024\n```\n\n第四步：制作解密后的www.example.com证书私钥：\n```shell\nopenssl rsa -in www.example.com.pem -out www.example.com.key\n```\nps:在common name中填入网站域名，如www.example.com即可生成改站点的证书(这里一定要填入common name，不然生成的东西为空)\n\n第五步：生成签名请求：\n```shell\nopenssl req -new -key www.example.com.pem -out www.example.com.csr\n```\n\n第六步：用CA进行签名：\n```shell\nopenssl ca -policy policy_anything -days 1460 -cert ca.crt -keyfile ca.key -in www.example.com.csr -out www.example.com.crt\n```\n\n如果一切顺利，生成完成之后在demoCA下应该会看到如下子目录\n\n```shell\n#ls\nca.crt # 根证书\nca.key # CA私钥\nwww.example.com.crt # \nwww.example.com.csr\nwww.example.com.key\nwww.example.com.pem\ndemoCA\t\t\t\n```\n\n\n##### 遇到的问题\n如果遇到如下报错\n``` html\nUsing configuration from /private/etc/ssl/openssl.cnf\nvariable lookup failed for ca::default_ca\n140735980385160:error:0E06D06C:configuration file routines:NCONF_get_string:no value:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/crypto/conf/conf_lib.c:323:group=ca name=default_ca\n```\n\n解决办法：将openssl安装目录下的openssl.cnf 拷贝到配置目录\n``` shell\ncp /usr/local/etc/openssl/openssl.cnf /private/etc/ssl/openssl.cnf\n```\n\n并修改其中的配置文件的dir的文件路径为之前创建的demoCA文件路径\n``` shell\ndir >> = /Users/zsr/learn/epoos/sshkey/demoCA/ > >\n```\n\n至此，使用openssl生成本地证书的过程就结束了，接下来就只需要在nginx中配置一番就可以看到一个https的网站了。\n\n#### 2.生成证书之后nginx配置如下：\n```shell\n  1 server # 使用nginx做普通http代理\n  2 {\n  3     listen 80;\n  4     server_name www.example.com;\n  5     index index.html;\n  6     location /\n  7     {\n  8         #proxy_pass http://10.242.22.138:8084/;\n  9         alias /Users/zsr/learn/example/;\n 10     }\n 11     error_log /usr/local/etc/nginx/logs/error.log;\n 12 }\n\n 13 server # 使用nginx做普通https代理\n 14 {\n 15   listen 443;\n 16   server_name www.example.com;\n 17   index index.html;\n 18   location /\n 19   {\n 20     alias /Users/zsr/learn/example/;\n 21   }\n 22   ssl on;\n 23   ssl_certificate /Users/zsr/learn/example/sshkey/www.example.com.crt\n 24   ssl_certificate_key /Users/zsr/learn/example/sshkey/www.example.com.key\n 25 }\n```\n\n\n\n\n### 相关传送门：\n\n生成证书\nhttp://blog.creke.net/762.html\n\nhttps介绍：\nhttp://wetest.qq.com/lab/view/110.html\n\n知乎上的https介绍：\nhttps://zhuanlan.zhihu.com/p/26682342\n\n简书上的介绍\nhttp://www.jianshu.com/p/7158568e4867\n\n阮一峰系列\n\nhttp://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\n\nhttp://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\n\nhttp://www.ruanyifeng.com/blog/2016/08/http.html\n","slug":"https","published":1,"updated":"2018-05-22T12:35:24.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigj9000fxwqtg0iaxbig","content":"<h3 id=\"一、https是什么（相关概念简述）？\"><a href=\"#一、https是什么（相关概念简述）？\" class=\"headerlink\" title=\"一、https是什么（相关概念简述）？\"></a>一、https是什么（相关概念简述）？</h3><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。 —— 维基百科</p>\n<h4 id=\"1-对称加密和非对称加密\"><a href=\"#1-对称加密和非对称加密\" class=\"headerlink\" title=\"1.对称加密和非对称加密\"></a>1.对称加密和非对称加密</h4><p>对称加密：需要对加解密的数据采用相同的密钥的加密算法。<br>优点：加密算法公开，计算量小，加密速度快，通常用在消息发送方加密大量数据的时候使用<br>缺点：需要消息传递的双方约定加密的密钥，一旦一方的密钥泄漏，信息就变得不安全了</p>\n<p>非对称加密：需要两个密钥（公钥和私钥）来进行加密和解密，公钥解密私钥的加密数据、私钥解密公钥的加密数据，私钥一般存储在服务器端不会外漏<br>优点：相对于对称加密更安全，即使公钥泄漏也没办法解密<br>缺点：加解密花费时间长，只适合小数据量的加解密。</p>\n<h4 id=\"2-https的加解密方式\"><a href=\"#2-https的加解密方式\" class=\"headerlink\" title=\"2.https的加解密方式\"></a>2.https的加解密方式</h4><p>https采用的是非对称加密和对称加密混合的方式进行加密的。<br>使用非对称加密的方式加密传递对称加密的密钥，随后使用对称加密进行通讯。</p>\n<p>HTTP 建立 TCP 链接需要进行三次握手<br>HTTPS 在 TCP 之上又加上了 TLS 的握手过程，在握手过程中确定双方传输数据的密码信息。<br>SSL/TLS 握手是为了安全的协商出一份对称加密的密钥</p>\n<h4 id=\"3-对称加密与非对称加密：\"><a href=\"#3-对称加密与非对称加密：\" class=\"headerlink\" title=\"3.对称加密与非对称加密：\"></a>3.对称加密与非对称加密：</h4><p>对称加密算法在加密和解密时使用的是同一个秘钥；<br>而非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）。</p>\n<p>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。<br>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。<br>因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p>\n<h4 id=\"4-https-TLS握手过程：\"><a href=\"#4-https-TLS握手过程：\" class=\"headerlink\" title=\"4.https TLS握手过程：\"></a>4.https TLS握手过程：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.浏览器发送一个消息：包含一个随机数Random1，支持的加密套件，TLS版本号（被叫做ClientHello请求）</span><br><span class=\"line\">2.服务端接收消息并回应（被叫做ServerHello）</span><br><span class=\"line\">\ta）验证tls版本是否支持</span><br><span class=\"line\">\tb)服务端从客户端发送的加密规则中选择一组加密套件</span><br><span class=\"line\">\tc)接收随机数Random1,生成一份随机数Random2</span><br><span class=\"line\">\td)下发证书，包含公钥、随机数Random2（公钥放在服务器的数字证书中）</span><br><span class=\"line\">\te)如果有必要服务端需要确认客户端身份，则会要求客户端发送自己的证书（如usb密钥）</span><br><span class=\"line\">3.浏览器接收证书信息</span><br><span class=\"line\">  a)验证证书的合法性</span><br><span class=\"line\">  b)取出服务端发送过来的证书中的公钥,生成随机数Random3，并用证书中提供的公钥加密Random3</span><br><span class=\"line\">  c)最后将加密后的随机数消息发送给服务器</span><br><span class=\"line\">4.服务器接收浏览器发来的信息：使用自己的私钥将Random3解密出来，</span><br><span class=\"line\">5.用三个随机数生成session Key作为对称密钥，为后续数据传输用</span><br></pre></td></tr></table></figure>\n<p>握手结束之后，之后所有的通信数据将由浏览器之前生成的随机密码并利用对称加密算法进行加密</p>\n<p>ps：之前浏览器与服务端互相发送加密的握手消息验证，目的是为了保证双方都获得了一致的对称加解密的密码，并且验证双方可以正常的加解密数据，为后面的真正数据传输做一次测试。</p>\n<h4 id=\"5-https-session-Key\"><a href=\"#5-https-session-Key\" class=\"headerlink\" title=\"5.https session Key\"></a>5.https session Key</h4><p>https建立连接是一个比较复杂的过程，如果连接断开之后需要重新进行建立连接。<br>重连有两种方式：sessionID和session ticket</p>\n<p>如果对话中断，客户端可以发送之前的session重连对话，如果服务端存在这个sessionId就可以重新建立连接。</p>\n<p>session ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。<br>所以，如果客户端的请求发到另一台服务器，就无法恢复对话。session ticket就是为了解决这个问题而诞生的，目前只有Firefox和Chrome浏览器支持。</p>\n<h5 id=\"6-openssl是什么？\"><a href=\"#6-openssl是什么？\" class=\"headerlink\" title=\"6.openssl是什么？\"></a>6.openssl是什么？</h5><p>是一个开源程序的套件,这个套件有三个部分组成：一是libcryto，这是一个具有通用功能的加密库，里面实现了众多的加密库；二是libssl，这个是实现ssl机制的，它是用于实现TLS/SSL的功能；三是openssl，是个多功能命令行工具，它可以实现加密解密，甚至还可以当CA来用，可以让你创建证书、吊销证书。</p>\n<h3 id=\"二、为什么要使用https\"><a href=\"#二、为什么要使用https\" class=\"headerlink\" title=\"二、为什么要使用https\"></a>二、为什么要使用https</h3><p>1.数据加密，提高安全性。</p>\n<p>2.证书保证，防止冒充</p>\n<p>3.校验数据，防止被篡改</p>\n<h3 id=\"三、如何使用https\"><a href=\"#三、如何使用https\" class=\"headerlink\" title=\"三、如何使用https\"></a>三、如何使用https</h3><h4 id=\"1-使用openssl生成本地证书\"><a href=\"#1-使用openssl生成本地证书\" class=\"headerlink\" title=\"1.使用openssl生成本地证书\"></a>1.使用openssl生成本地证书</h4><h5 id=\"1）准备工作\"><a href=\"#1）准备工作\" class=\"headerlink\" title=\"1）准备工作\"></a>1）准备工作</h5><p>创建一个存放证书的目录，如/sshkey：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir sshkey</span><br></pre></td></tr></table></figure></p>\n<p>在sskkey目录下创建demoCA子目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd sshkey</span><br><span class=\"line\">mkdir demoCA &amp;&amp; cd demoCA &amp;&amp; touch index.txt &amp;&amp; touch serial &amp;&amp; echo \"01\"&gt;./serial &amp;&amp; mkdir newcerts</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2）正式生成：\"><a href=\"#2）正式生成：\" class=\"headerlink\" title=\"2）正式生成：\"></a>2）正式生成：</h4><p>制作CA证书：</p>\n<p>第一步：生成ca.key CA私钥<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out ca.key 2048</span><br></pre></td></tr></table></figure></p>\n<p>第二步：生成ca.crt CA根证书（公钥）：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 7305 -key ca.key -out ca.crt</span><br></pre></td></tr></table></figure></p>\n<p>生成网站的证书，并用CA签名认证（假设网站域名为<a href=\"http://www.example.com）\" target=\"_blank\" rel=\"noopener\">www.example.com）</a></p>\n<p>第三步：生成<a href=\"http://www.example.com证书私钥：\" target=\"_blank\" rel=\"noopener\">www.example.com证书私钥：</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out www.example.com.pem 1024</span><br></pre></td></tr></table></figure></p>\n<p>第四步：制作解密后的<a href=\"http://www.example.com证书私钥：\" target=\"_blank\" rel=\"noopener\">www.example.com证书私钥：</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in www.example.com.pem -out www.example.com.key</span><br></pre></td></tr></table></figure></p>\n<p>ps:在common name中填入网站域名，如<a href=\"http://www.example.com即可生成改站点的证书\" target=\"_blank\" rel=\"noopener\">www.example.com即可生成改站点的证书</a>(这里一定要填入common name，不然生成的东西为空)</p>\n<p>第五步：生成签名请求：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key www.example.com.pem -out www.example.com.csr</span><br></pre></td></tr></table></figure></p>\n<p>第六步：用CA进行签名：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl ca -policy policy_anything -days 1460 -cert ca.crt -keyfile ca.key -in www.example.com.csr -out www.example.com.crt</span><br></pre></td></tr></table></figure></p>\n<p>如果一切顺利，生成完成之后在demoCA下应该会看到如下子目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>ls</span><br><span class=\"line\">ca.crt # 根证书</span><br><span class=\"line\">ca.key # CA私钥</span><br><span class=\"line\">www.example.com.crt # </span><br><span class=\"line\">www.example.com.csr</span><br><span class=\"line\">www.example.com.key</span><br><span class=\"line\">www.example.com.pem</span><br><span class=\"line\">demoCA</span><br></pre></td></tr></table></figure>\n<h5 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h5><p>如果遇到如下报错<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using configuration from /private/etc/ssl/openssl.cnf</span><br><span class=\"line\">variable lookup failed for ca::default_ca</span><br><span class=\"line\">140735980385160:error:0E06D06C:configuration file routines:NCONF_get_string:no value:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/crypto/conf/conf_lib.c:323:group=ca name=default_ca</span><br></pre></td></tr></table></figure></p>\n<p>解决办法：将openssl安装目录下的openssl.cnf 拷贝到配置目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/etc/openssl/openssl.cnf /private/etc/ssl/openssl.cnf</span><br></pre></td></tr></table></figure></p>\n<p>并修改其中的配置文件的dir的文件路径为之前创建的demoCA文件路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir &gt;&gt; = /Users/zsr/learn/epoos/sshkey/demoCA/ &gt; &gt;</span><br></pre></td></tr></table></figure></p>\n<p>至此，使用openssl生成本地证书的过程就结束了，接下来就只需要在nginx中配置一番就可以看到一个https的网站了。</p>\n<h4 id=\"2-生成证书之后nginx配置如下：\"><a href=\"#2-生成证书之后nginx配置如下：\" class=\"headerlink\" title=\"2.生成证书之后nginx配置如下：\"></a>2.生成证书之后nginx配置如下：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1 server # 使用nginx做普通http代理</span><br><span class=\"line\"> 2 &#123;</span><br><span class=\"line\"> 3     listen 80;</span><br><span class=\"line\"> 4     server_name www.example.com;</span><br><span class=\"line\"> 5     index index.html;</span><br><span class=\"line\"> 6     location /</span><br><span class=\"line\"> 7     &#123;</span><br><span class=\"line\"> 8         #proxy_pass http://10.242.22.138:8084/;</span><br><span class=\"line\"> 9         alias /Users/zsr/learn/example/;</span><br><span class=\"line\">10     &#125;</span><br><span class=\"line\">11     error_log /usr/local/etc/nginx/logs/error.log;</span><br><span class=\"line\">12 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">13 server # 使用nginx做普通https代理</span><br><span class=\"line\">14 &#123;</span><br><span class=\"line\">15   listen 443;</span><br><span class=\"line\">16   server_name www.example.com;</span><br><span class=\"line\">17   index index.html;</span><br><span class=\"line\">18   location /</span><br><span class=\"line\">19   &#123;</span><br><span class=\"line\">20     alias /Users/zsr/learn/example/;</span><br><span class=\"line\">21   &#125;</span><br><span class=\"line\">22   ssl on;</span><br><span class=\"line\">23   ssl_certificate /Users/zsr/learn/example/sshkey/www.example.com.crt</span><br><span class=\"line\">24   ssl_certificate_key /Users/zsr/learn/example/sshkey/www.example.com.key</span><br><span class=\"line\">25 &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关传送门：\"><a href=\"#相关传送门：\" class=\"headerlink\" title=\"相关传送门：\"></a>相关传送门：</h3><p>生成证书<br><a href=\"http://blog.creke.net/762.html\" target=\"_blank\" rel=\"noopener\">http://blog.creke.net/762.html</a></p>\n<p>https介绍：<br><a href=\"http://wetest.qq.com/lab/view/110.html\" target=\"_blank\" rel=\"noopener\">http://wetest.qq.com/lab/view/110.html</a></p>\n<p>知乎上的https介绍：<br><a href=\"https://zhuanlan.zhihu.com/p/26682342\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/26682342</a></p>\n<p>简书上的介绍<br><a href=\"http://www.jianshu.com/p/7158568e4867\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/7158568e4867</a></p>\n<p>阮一峰系列</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/08/http.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、https是什么（相关概念简述）？\"><a href=\"#一、https是什么（相关概念简述）？\" class=\"headerlink\" title=\"一、https是什么（相关概念简述）？\"></a>一、https是什么（相关概念简述）？</h3><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。 —— 维基百科</p>\n<h4 id=\"1-对称加密和非对称加密\"><a href=\"#1-对称加密和非对称加密\" class=\"headerlink\" title=\"1.对称加密和非对称加密\"></a>1.对称加密和非对称加密</h4><p>对称加密：需要对加解密的数据采用相同的密钥的加密算法。<br>优点：加密算法公开，计算量小，加密速度快，通常用在消息发送方加密大量数据的时候使用<br>缺点：需要消息传递的双方约定加密的密钥，一旦一方的密钥泄漏，信息就变得不安全了</p>\n<p>非对称加密：需要两个密钥（公钥和私钥）来进行加密和解密，公钥解密私钥的加密数据、私钥解密公钥的加密数据，私钥一般存储在服务器端不会外漏<br>优点：相对于对称加密更安全，即使公钥泄漏也没办法解密<br>缺点：加解密花费时间长，只适合小数据量的加解密。</p>\n<h4 id=\"2-https的加解密方式\"><a href=\"#2-https的加解密方式\" class=\"headerlink\" title=\"2.https的加解密方式\"></a>2.https的加解密方式</h4><p>https采用的是非对称加密和对称加密混合的方式进行加密的。<br>使用非对称加密的方式加密传递对称加密的密钥，随后使用对称加密进行通讯。</p>\n<p>HTTP 建立 TCP 链接需要进行三次握手<br>HTTPS 在 TCP 之上又加上了 TLS 的握手过程，在握手过程中确定双方传输数据的密码信息。<br>SSL/TLS 握手是为了安全的协商出一份对称加密的密钥</p>\n<h4 id=\"3-对称加密与非对称加密：\"><a href=\"#3-对称加密与非对称加密：\" class=\"headerlink\" title=\"3.对称加密与非对称加密：\"></a>3.对称加密与非对称加密：</h4><p>对称加密算法在加密和解密时使用的是同一个秘钥；<br>而非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）。</p>\n<p>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。<br>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。<br>因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p>\n<h4 id=\"4-https-TLS握手过程：\"><a href=\"#4-https-TLS握手过程：\" class=\"headerlink\" title=\"4.https TLS握手过程：\"></a>4.https TLS握手过程：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.浏览器发送一个消息：包含一个随机数Random1，支持的加密套件，TLS版本号（被叫做ClientHello请求）</span><br><span class=\"line\">2.服务端接收消息并回应（被叫做ServerHello）</span><br><span class=\"line\">\ta）验证tls版本是否支持</span><br><span class=\"line\">\tb)服务端从客户端发送的加密规则中选择一组加密套件</span><br><span class=\"line\">\tc)接收随机数Random1,生成一份随机数Random2</span><br><span class=\"line\">\td)下发证书，包含公钥、随机数Random2（公钥放在服务器的数字证书中）</span><br><span class=\"line\">\te)如果有必要服务端需要确认客户端身份，则会要求客户端发送自己的证书（如usb密钥）</span><br><span class=\"line\">3.浏览器接收证书信息</span><br><span class=\"line\">  a)验证证书的合法性</span><br><span class=\"line\">  b)取出服务端发送过来的证书中的公钥,生成随机数Random3，并用证书中提供的公钥加密Random3</span><br><span class=\"line\">  c)最后将加密后的随机数消息发送给服务器</span><br><span class=\"line\">4.服务器接收浏览器发来的信息：使用自己的私钥将Random3解密出来，</span><br><span class=\"line\">5.用三个随机数生成session Key作为对称密钥，为后续数据传输用</span><br></pre></td></tr></table></figure>\n<p>握手结束之后，之后所有的通信数据将由浏览器之前生成的随机密码并利用对称加密算法进行加密</p>\n<p>ps：之前浏览器与服务端互相发送加密的握手消息验证，目的是为了保证双方都获得了一致的对称加解密的密码，并且验证双方可以正常的加解密数据，为后面的真正数据传输做一次测试。</p>\n<h4 id=\"5-https-session-Key\"><a href=\"#5-https-session-Key\" class=\"headerlink\" title=\"5.https session Key\"></a>5.https session Key</h4><p>https建立连接是一个比较复杂的过程，如果连接断开之后需要重新进行建立连接。<br>重连有两种方式：sessionID和session ticket</p>\n<p>如果对话中断，客户端可以发送之前的session重连对话，如果服务端存在这个sessionId就可以重新建立连接。</p>\n<p>session ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。<br>所以，如果客户端的请求发到另一台服务器，就无法恢复对话。session ticket就是为了解决这个问题而诞生的，目前只有Firefox和Chrome浏览器支持。</p>\n<h5 id=\"6-openssl是什么？\"><a href=\"#6-openssl是什么？\" class=\"headerlink\" title=\"6.openssl是什么？\"></a>6.openssl是什么？</h5><p>是一个开源程序的套件,这个套件有三个部分组成：一是libcryto，这是一个具有通用功能的加密库，里面实现了众多的加密库；二是libssl，这个是实现ssl机制的，它是用于实现TLS/SSL的功能；三是openssl，是个多功能命令行工具，它可以实现加密解密，甚至还可以当CA来用，可以让你创建证书、吊销证书。</p>\n<h3 id=\"二、为什么要使用https\"><a href=\"#二、为什么要使用https\" class=\"headerlink\" title=\"二、为什么要使用https\"></a>二、为什么要使用https</h3><p>1.数据加密，提高安全性。</p>\n<p>2.证书保证，防止冒充</p>\n<p>3.校验数据，防止被篡改</p>\n<h3 id=\"三、如何使用https\"><a href=\"#三、如何使用https\" class=\"headerlink\" title=\"三、如何使用https\"></a>三、如何使用https</h3><h4 id=\"1-使用openssl生成本地证书\"><a href=\"#1-使用openssl生成本地证书\" class=\"headerlink\" title=\"1.使用openssl生成本地证书\"></a>1.使用openssl生成本地证书</h4><h5 id=\"1）准备工作\"><a href=\"#1）准备工作\" class=\"headerlink\" title=\"1）准备工作\"></a>1）准备工作</h5><p>创建一个存放证书的目录，如/sshkey：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir sshkey</span><br></pre></td></tr></table></figure></p>\n<p>在sskkey目录下创建demoCA子目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd sshkey</span><br><span class=\"line\">mkdir demoCA &amp;&amp; cd demoCA &amp;&amp; touch index.txt &amp;&amp; touch serial &amp;&amp; echo \"01\"&gt;./serial &amp;&amp; mkdir newcerts</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2）正式生成：\"><a href=\"#2）正式生成：\" class=\"headerlink\" title=\"2）正式生成：\"></a>2）正式生成：</h4><p>制作CA证书：</p>\n<p>第一步：生成ca.key CA私钥<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out ca.key 2048</span><br></pre></td></tr></table></figure></p>\n<p>第二步：生成ca.crt CA根证书（公钥）：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 7305 -key ca.key -out ca.crt</span><br></pre></td></tr></table></figure></p>\n<p>生成网站的证书，并用CA签名认证（假设网站域名为<a href=\"http://www.example.com）\" target=\"_blank\" rel=\"noopener\">www.example.com）</a></p>\n<p>第三步：生成<a href=\"http://www.example.com证书私钥：\" target=\"_blank\" rel=\"noopener\">www.example.com证书私钥：</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out www.example.com.pem 1024</span><br></pre></td></tr></table></figure></p>\n<p>第四步：制作解密后的<a href=\"http://www.example.com证书私钥：\" target=\"_blank\" rel=\"noopener\">www.example.com证书私钥：</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in www.example.com.pem -out www.example.com.key</span><br></pre></td></tr></table></figure></p>\n<p>ps:在common name中填入网站域名，如<a href=\"http://www.example.com即可生成改站点的证书\" target=\"_blank\" rel=\"noopener\">www.example.com即可生成改站点的证书</a>(这里一定要填入common name，不然生成的东西为空)</p>\n<p>第五步：生成签名请求：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key www.example.com.pem -out www.example.com.csr</span><br></pre></td></tr></table></figure></p>\n<p>第六步：用CA进行签名：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl ca -policy policy_anything -days 1460 -cert ca.crt -keyfile ca.key -in www.example.com.csr -out www.example.com.crt</span><br></pre></td></tr></table></figure></p>\n<p>如果一切顺利，生成完成之后在demoCA下应该会看到如下子目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>ls</span><br><span class=\"line\">ca.crt # 根证书</span><br><span class=\"line\">ca.key # CA私钥</span><br><span class=\"line\">www.example.com.crt # </span><br><span class=\"line\">www.example.com.csr</span><br><span class=\"line\">www.example.com.key</span><br><span class=\"line\">www.example.com.pem</span><br><span class=\"line\">demoCA</span><br></pre></td></tr></table></figure>\n<h5 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h5><p>如果遇到如下报错<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using configuration from /private/etc/ssl/openssl.cnf</span><br><span class=\"line\">variable lookup failed for ca::default_ca</span><br><span class=\"line\">140735980385160:error:0E06D06C:configuration file routines:NCONF_get_string:no value:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/crypto/conf/conf_lib.c:323:group=ca name=default_ca</span><br></pre></td></tr></table></figure></p>\n<p>解决办法：将openssl安装目录下的openssl.cnf 拷贝到配置目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/etc/openssl/openssl.cnf /private/etc/ssl/openssl.cnf</span><br></pre></td></tr></table></figure></p>\n<p>并修改其中的配置文件的dir的文件路径为之前创建的demoCA文件路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir &gt;&gt; = /Users/zsr/learn/epoos/sshkey/demoCA/ &gt; &gt;</span><br></pre></td></tr></table></figure></p>\n<p>至此，使用openssl生成本地证书的过程就结束了，接下来就只需要在nginx中配置一番就可以看到一个https的网站了。</p>\n<h4 id=\"2-生成证书之后nginx配置如下：\"><a href=\"#2-生成证书之后nginx配置如下：\" class=\"headerlink\" title=\"2.生成证书之后nginx配置如下：\"></a>2.生成证书之后nginx配置如下：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1 server # 使用nginx做普通http代理</span><br><span class=\"line\"> 2 &#123;</span><br><span class=\"line\"> 3     listen 80;</span><br><span class=\"line\"> 4     server_name www.example.com;</span><br><span class=\"line\"> 5     index index.html;</span><br><span class=\"line\"> 6     location /</span><br><span class=\"line\"> 7     &#123;</span><br><span class=\"line\"> 8         #proxy_pass http://10.242.22.138:8084/;</span><br><span class=\"line\"> 9         alias /Users/zsr/learn/example/;</span><br><span class=\"line\">10     &#125;</span><br><span class=\"line\">11     error_log /usr/local/etc/nginx/logs/error.log;</span><br><span class=\"line\">12 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">13 server # 使用nginx做普通https代理</span><br><span class=\"line\">14 &#123;</span><br><span class=\"line\">15   listen 443;</span><br><span class=\"line\">16   server_name www.example.com;</span><br><span class=\"line\">17   index index.html;</span><br><span class=\"line\">18   location /</span><br><span class=\"line\">19   &#123;</span><br><span class=\"line\">20     alias /Users/zsr/learn/example/;</span><br><span class=\"line\">21   &#125;</span><br><span class=\"line\">22   ssl on;</span><br><span class=\"line\">23   ssl_certificate /Users/zsr/learn/example/sshkey/www.example.com.crt</span><br><span class=\"line\">24   ssl_certificate_key /Users/zsr/learn/example/sshkey/www.example.com.key</span><br><span class=\"line\">25 &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关传送门：\"><a href=\"#相关传送门：\" class=\"headerlink\" title=\"相关传送门：\"></a>相关传送门：</h3><p>生成证书<br><a href=\"http://blog.creke.net/762.html\" target=\"_blank\" rel=\"noopener\">http://blog.creke.net/762.html</a></p>\n<p>https介绍：<br><a href=\"http://wetest.qq.com/lab/view/110.html\" target=\"_blank\" rel=\"noopener\">http://wetest.qq.com/lab/view/110.html</a></p>\n<p>知乎上的https介绍：<br><a href=\"https://zhuanlan.zhihu.com/p/26682342\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/26682342</a></p>\n<p>简书上的介绍<br><a href=\"http://www.jianshu.com/p/7158568e4867\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/7158568e4867</a></p>\n<p>阮一峰系列</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/08/http.html</a></p>\n"},{"title":"在Osx环境下启动Apache","date":"2017-11-07T16:00:00.000Z","_content":"\n服务端语言千千万，java一直是后端开发的首选，如果后端语言是java，freemarker模板，则需要在本地启动apache-tomcat服务\n\n### 下面将配置过程做一下记录\n\n首先，**jdk安装**在osx下可以是可以多个版本的jdk共存的，并不会安装一个低版本的之后就覆盖了另一个版本\n通过下面的命令可以查看安装了那些jdk以及相应的安装目录\n``` shell\n/usr/libexec/java_home -V\n```\n\n结果：\n``` shell\nzsr:~ zsr$ /usr/libexec/java_home -V\nMatching Java Virtual Machines (2):\n    1.8.0_141, x86_64:\t\"Java SE 8\"\t/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home\n    1.7.0_80, x86_64:\t\"Java SE 7\"\t/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n\n/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home\n```\n\n可以看到，当前我的机器/Library/Java/JavaVirtualMachines目录下面有两个版本的jdk，默认使用的是高版本的这个。\n\n另外还可以通过\n``` shell\njava -version\n\n```\n命令查看运行的是哪个jdk版本\n\n---\n\n另外还需要**配置apache-tomcat**\n\n启动apache-tomcat也有一些特殊，是直接找到文件包\n\n``` shell\ncd ~/apache-tomcat-7.0.11/bin\nsh startup.sh\n```\n\n关闭服务\n\n``` shell\ncd ~/apache-tomcat-7.0.11/bin\nsh shutdown.sh\n```\n\n如果直接如上面这样运行可能不行，因为没有指定想应的java环境变量，因此还需要如下配置\n\n``` shell\ncd ~/apache-tomcat-7.0.11/bin\nvim setclasspath.sh\n```\n\n在文件中添加如下两个对应的jdk的位置路径\n``` shell\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\nJRE_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre\n```\n\n\n\n\n\n\n\n\n","source":"_posts/javapath.md","raw":"---\ntitle: 在Osx环境下启动Apache\ndate: 2017/11/08\ntag: [java,apache,jdk]\ncategory: 技术\n---\n\n服务端语言千千万，java一直是后端开发的首选，如果后端语言是java，freemarker模板，则需要在本地启动apache-tomcat服务\n\n### 下面将配置过程做一下记录\n\n首先，**jdk安装**在osx下可以是可以多个版本的jdk共存的，并不会安装一个低版本的之后就覆盖了另一个版本\n通过下面的命令可以查看安装了那些jdk以及相应的安装目录\n``` shell\n/usr/libexec/java_home -V\n```\n\n结果：\n``` shell\nzsr:~ zsr$ /usr/libexec/java_home -V\nMatching Java Virtual Machines (2):\n    1.8.0_141, x86_64:\t\"Java SE 8\"\t/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home\n    1.7.0_80, x86_64:\t\"Java SE 7\"\t/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n\n/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home\n```\n\n可以看到，当前我的机器/Library/Java/JavaVirtualMachines目录下面有两个版本的jdk，默认使用的是高版本的这个。\n\n另外还可以通过\n``` shell\njava -version\n\n```\n命令查看运行的是哪个jdk版本\n\n---\n\n另外还需要**配置apache-tomcat**\n\n启动apache-tomcat也有一些特殊，是直接找到文件包\n\n``` shell\ncd ~/apache-tomcat-7.0.11/bin\nsh startup.sh\n```\n\n关闭服务\n\n``` shell\ncd ~/apache-tomcat-7.0.11/bin\nsh shutdown.sh\n```\n\n如果直接如上面这样运行可能不行，因为没有指定想应的java环境变量，因此还需要如下配置\n\n``` shell\ncd ~/apache-tomcat-7.0.11/bin\nvim setclasspath.sh\n```\n\n在文件中添加如下两个对应的jdk的位置路径\n``` shell\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\nJRE_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre\n```\n\n\n\n\n\n\n\n\n","slug":"javapath","published":1,"updated":"2018-05-22T12:35:24.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjb000ixwqtyhfmfl50","content":"<p>服务端语言千千万，java一直是后端开发的首选，如果后端语言是java，freemarker模板，则需要在本地启动apache-tomcat服务</p>\n<h3 id=\"下面将配置过程做一下记录\"><a href=\"#下面将配置过程做一下记录\" class=\"headerlink\" title=\"下面将配置过程做一下记录\"></a>下面将配置过程做一下记录</h3><p>首先，<strong>jdk安装</strong>在osx下可以是可以多个版本的jdk共存的，并不会安装一个低版本的之后就覆盖了另一个版本<br>通过下面的命令可以查看安装了那些jdk以及相应的安装目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsr:~ zsr$ /usr/libexec/java_home -V</span><br><span class=\"line\">Matching Java Virtual Machines (2):</span><br><span class=\"line\">    1.8.0_141, x86_64:\t\"Java SE 8\"\t/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home</span><br><span class=\"line\">    1.7.0_80, x86_64:\t\"Java SE 7\"\t/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\"></span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，当前我的机器/Library/Java/JavaVirtualMachines目录下面有两个版本的jdk，默认使用的是高版本的这个。</p>\n<p>另外还可以通过<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<p>命令查看运行的是哪个jdk版本</p>\n<hr>\n<p>另外还需要<strong>配置apache-tomcat</strong></p>\n<p>启动apache-tomcat也有一些特殊，是直接找到文件包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/apache-tomcat-7.0.11/bin</span><br><span class=\"line\">sh startup.sh</span><br></pre></td></tr></table></figure>\n<p>关闭服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/apache-tomcat-7.0.11/bin</span><br><span class=\"line\">sh shutdown.sh</span><br></pre></td></tr></table></figure>\n<p>如果直接如上面这样运行可能不行，因为没有指定想应的java环境变量，因此还需要如下配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/apache-tomcat-7.0.11/bin</span><br><span class=\"line\">vim setclasspath.sh</span><br></pre></td></tr></table></figure>\n<p>在文件中添加如下两个对应的jdk的位置路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">JRE_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>服务端语言千千万，java一直是后端开发的首选，如果后端语言是java，freemarker模板，则需要在本地启动apache-tomcat服务</p>\n<h3 id=\"下面将配置过程做一下记录\"><a href=\"#下面将配置过程做一下记录\" class=\"headerlink\" title=\"下面将配置过程做一下记录\"></a>下面将配置过程做一下记录</h3><p>首先，<strong>jdk安装</strong>在osx下可以是可以多个版本的jdk共存的，并不会安装一个低版本的之后就覆盖了另一个版本<br>通过下面的命令可以查看安装了那些jdk以及相应的安装目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsr:~ zsr$ /usr/libexec/java_home -V</span><br><span class=\"line\">Matching Java Virtual Machines (2):</span><br><span class=\"line\">    1.8.0_141, x86_64:\t\"Java SE 8\"\t/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home</span><br><span class=\"line\">    1.7.0_80, x86_64:\t\"Java SE 7\"\t/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\"></span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，当前我的机器/Library/Java/JavaVirtualMachines目录下面有两个版本的jdk，默认使用的是高版本的这个。</p>\n<p>另外还可以通过<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<p>命令查看运行的是哪个jdk版本</p>\n<hr>\n<p>另外还需要<strong>配置apache-tomcat</strong></p>\n<p>启动apache-tomcat也有一些特殊，是直接找到文件包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/apache-tomcat-7.0.11/bin</span><br><span class=\"line\">sh startup.sh</span><br></pre></td></tr></table></figure>\n<p>关闭服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/apache-tomcat-7.0.11/bin</span><br><span class=\"line\">sh shutdown.sh</span><br></pre></td></tr></table></figure>\n<p>如果直接如上面这样运行可能不行，因为没有指定想应的java环境变量，因此还需要如下配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/apache-tomcat-7.0.11/bin</span><br><span class=\"line\">vim setclasspath.sh</span><br></pre></td></tr></table></figure>\n<p>在文件中添加如下两个对应的jdk的位置路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">JRE_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Javascript数据类型","date":"2018-01-13T16:00:00.000Z","_content":"\nJavascript的基础知识。\n\nECMAScript 5的五种简单数据类型：Undefined、Null、Boolean、Number、String；\n\n另外还有一种es6新增的Symble也是属于简单数据类型\n\n一种复杂数据类型： Object（Array、Function、RegExp、Date都属于 Object）\n\n除此之外还有特殊的类型，三种基本包装类型：Boolean、Number、String\n\n\n简单数据类型的值时保存在栈内存中的简单数据段，它们是按值访问的。\n\n复杂的数据类型（引用类型）的值是保存在爱堆内存中的对象，它的值时按照引用访问的。\n\n\n### 检测方法用typeof，打印出来分别是：\n```html\nundefined、boolean、string、number、object\n```\n\n### 常见类型判断方式\n```javascript\no = '';\nObject.prototype.toString.call(o).slice(8, -1) === 'String' # 判断字符串\no = NaN || o = 1;\nObject.prototype.toString.call(o).slice(8, -1) === 'Number' # 判断数值\no = null;\nObject.prototype.toString.call(o).slice(8, -1) === 'Null' # 判断为Null\no = undefined;\nObject.prototype.toString.call(o).slice(8, -1) === 'Undefined' # 判断为Undefined\no = true;\nObject.prototype.toString.call(o).slice(8, -1) === 'Boolean' # 判断为Boolean\nvar o = {};\nObject.prototype.toString.call(o).slice(8, -1) === 'Object' # 判断对象\no = [];\nObject.prototype.toString.call(o).slice(8, -1) === 'Array' # 判断数组\no = function(){};\nObject.prototype.toString.call(o).slice(8, -1) === 'Function' # 判断为Function\no = new Date();\nObject.prototype.toString.call(o).slice(8, -1) === 'Date' # 判断Date\no = new RegExp();\nObject.prototype.toString.call(o).slice(8, -1) === 'RegExp' # 判断RegExp\n\no = Symbol()\nObject.prototype.toString.call(o).slice(8, -1) === 'Symbol' # 判断Symbol\n```\n\n\n### 一些特殊的类型比较\n\n```javascript\ntypeof null // object ，特殊值null会被认为是空对象的引用\n\ntypeof NaN // number ，NaN是属于number类型的\n\nBoolean(NaN) // false\n\nnull == undefined // true，ECMAScript 规范认为，既然 null 和  undefined 的行为很相似，并且都表示 一个无效的值，那么它们所表示的内容也具有相似性\n\nnull === undefined // false\n\nundefined == 0 // false\n\nnull == 0 // false\n\nvar message;\nmessage === undefined // true;\n\n[] == [] // false，不相等，因为当两个值都是对象（引用值）时，比较的是两个引用值在内存中是否是同一个对象\n{} == {} // false，同上\n\n[] == false // true 隐式类型转换，全部转换为了0，0 == 0\n\nNaN == NaN // false\n```\n\n### 类型计算\n\n```javascript \n0.1+0.2 // 0.30000000000000004\n\nvar number = Number.MAX_VALUE + Number.MAX_VALUE;\nisFinite(number); // false isFinite这个函数在参数位于最小与最大值之间时会返回true\n```\n\n### 基本包装类型\n\n基本包装类型也是一种引用类型，除了拥有基本类型的特征外还拥有其特殊的特征，每当读取一个基本类型的值的时候，后台就会自动创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。\n\n```javascript\nvar str = 'abcdefg';\nvar newStr = str.substring(2);\n```\n\n本来str基本数据类型是没有方法的，但是，作为基本包装类型，后台自动创建了一个String类型的实例，在实例上调用指定的方法，最后销毁这个实例。\n\n```javascript\nvar str = new String('abcdefg');\nvar newStr = str.substring(2);\nstr = null;\n```\n\n\n\n\n\n\n\n","source":"_posts/js1.md","raw":"---\ntitle: Javascript数据类型\ndate: 2018/01/14\ntag: js\ncategory: 技术\n---\n\nJavascript的基础知识。\n\nECMAScript 5的五种简单数据类型：Undefined、Null、Boolean、Number、String；\n\n另外还有一种es6新增的Symble也是属于简单数据类型\n\n一种复杂数据类型： Object（Array、Function、RegExp、Date都属于 Object）\n\n除此之外还有特殊的类型，三种基本包装类型：Boolean、Number、String\n\n\n简单数据类型的值时保存在栈内存中的简单数据段，它们是按值访问的。\n\n复杂的数据类型（引用类型）的值是保存在爱堆内存中的对象，它的值时按照引用访问的。\n\n\n### 检测方法用typeof，打印出来分别是：\n```html\nundefined、boolean、string、number、object\n```\n\n### 常见类型判断方式\n```javascript\no = '';\nObject.prototype.toString.call(o).slice(8, -1) === 'String' # 判断字符串\no = NaN || o = 1;\nObject.prototype.toString.call(o).slice(8, -1) === 'Number' # 判断数值\no = null;\nObject.prototype.toString.call(o).slice(8, -1) === 'Null' # 判断为Null\no = undefined;\nObject.prototype.toString.call(o).slice(8, -1) === 'Undefined' # 判断为Undefined\no = true;\nObject.prototype.toString.call(o).slice(8, -1) === 'Boolean' # 判断为Boolean\nvar o = {};\nObject.prototype.toString.call(o).slice(8, -1) === 'Object' # 判断对象\no = [];\nObject.prototype.toString.call(o).slice(8, -1) === 'Array' # 判断数组\no = function(){};\nObject.prototype.toString.call(o).slice(8, -1) === 'Function' # 判断为Function\no = new Date();\nObject.prototype.toString.call(o).slice(8, -1) === 'Date' # 判断Date\no = new RegExp();\nObject.prototype.toString.call(o).slice(8, -1) === 'RegExp' # 判断RegExp\n\no = Symbol()\nObject.prototype.toString.call(o).slice(8, -1) === 'Symbol' # 判断Symbol\n```\n\n\n### 一些特殊的类型比较\n\n```javascript\ntypeof null // object ，特殊值null会被认为是空对象的引用\n\ntypeof NaN // number ，NaN是属于number类型的\n\nBoolean(NaN) // false\n\nnull == undefined // true，ECMAScript 规范认为，既然 null 和  undefined 的行为很相似，并且都表示 一个无效的值，那么它们所表示的内容也具有相似性\n\nnull === undefined // false\n\nundefined == 0 // false\n\nnull == 0 // false\n\nvar message;\nmessage === undefined // true;\n\n[] == [] // false，不相等，因为当两个值都是对象（引用值）时，比较的是两个引用值在内存中是否是同一个对象\n{} == {} // false，同上\n\n[] == false // true 隐式类型转换，全部转换为了0，0 == 0\n\nNaN == NaN // false\n```\n\n### 类型计算\n\n```javascript \n0.1+0.2 // 0.30000000000000004\n\nvar number = Number.MAX_VALUE + Number.MAX_VALUE;\nisFinite(number); // false isFinite这个函数在参数位于最小与最大值之间时会返回true\n```\n\n### 基本包装类型\n\n基本包装类型也是一种引用类型，除了拥有基本类型的特征外还拥有其特殊的特征，每当读取一个基本类型的值的时候，后台就会自动创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。\n\n```javascript\nvar str = 'abcdefg';\nvar newStr = str.substring(2);\n```\n\n本来str基本数据类型是没有方法的，但是，作为基本包装类型，后台自动创建了一个String类型的实例，在实例上调用指定的方法，最后销毁这个实例。\n\n```javascript\nvar str = new String('abcdefg');\nvar newStr = str.substring(2);\nstr = null;\n```\n\n\n\n\n\n\n\n","slug":"js1","published":1,"updated":"2018-05-22T12:35:24.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjd000lxwqtwsvz1gkm","content":"<p>Javascript的基础知识。</p>\n<p>ECMAScript 5的五种简单数据类型：Undefined、Null、Boolean、Number、String；</p>\n<p>另外还有一种es6新增的Symble也是属于简单数据类型</p>\n<p>一种复杂数据类型： Object（Array、Function、RegExp、Date都属于 Object）</p>\n<p>除此之外还有特殊的类型，三种基本包装类型：Boolean、Number、String</p>\n<p>简单数据类型的值时保存在栈内存中的简单数据段，它们是按值访问的。</p>\n<p>复杂的数据类型（引用类型）的值是保存在爱堆内存中的对象，它的值时按照引用访问的。</p>\n<h3 id=\"检测方法用typeof，打印出来分别是：\"><a href=\"#检测方法用typeof，打印出来分别是：\" class=\"headerlink\" title=\"检测方法用typeof，打印出来分别是：\"></a>检测方法用typeof，打印出来分别是：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined、boolean、string、number、object</span><br></pre></td></tr></table></figure>\n<h3 id=\"常见类型判断方式\"><a href=\"#常见类型判断方式\" class=\"headerlink\" title=\"常见类型判断方式\"></a>常见类型判断方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o = <span class=\"string\">''</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'String' # 判断字符串</span><br><span class=\"line\">o = <span class=\"literal\">NaN</span> || o = <span class=\"number\">1</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Number' # 判断数值</span><br><span class=\"line\">o = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Null' # 判断为Null</span><br><span class=\"line\">o = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Undefined' # 判断为Undefined</span><br><span class=\"line\">o = <span class=\"literal\">true</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Boolean' # 判断为Boolean</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Object' # 判断对象</span><br><span class=\"line\">o = [];</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Array' # 判断数组</span><br><span class=\"line\">o = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Function' # 判断为Function</span><br><span class=\"line\">o = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Date' # 判断Date</span><br><span class=\"line\">o = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>();</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'RegExp' # 判断RegExp</span><br><span class=\"line\"></span><br><span class=\"line\">o = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Symbol' # 判断Symbol</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些特殊的类型比较\"><a href=\"#一些特殊的类型比较\" class=\"headerlink\" title=\"一些特殊的类型比较\"></a>一些特殊的类型比较</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// object ，特殊值null会被认为是空对象的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span> <span class=\"comment\">// number ，NaN是属于number类型的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">NaN</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true，ECMAScript 规范认为，既然 null 和  undefined 的行为很相似，并且都表示 一个无效的值，那么它们所表示的内容也具有相似性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> message;</span><br><span class=\"line\">message === <span class=\"literal\">undefined</span> <span class=\"comment\">// true;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == [] <span class=\"comment\">// false，不相等，因为当两个值都是对象（引用值）时，比较的是两个引用值在内存中是否是同一个对象</span></span><br><span class=\"line\">&#123;&#125; == &#123;&#125; <span class=\"comment\">// false，同上</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == <span class=\"literal\">false</span> <span class=\"comment\">// true 隐式类型转换，全部转换为了0，0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类型计算\"><a href=\"#类型计算\" class=\"headerlink\" title=\"类型计算\"></a>类型计算</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span>+<span class=\"number\">0.2</span> <span class=\"comment\">// 0.30000000000000004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"built_in\">Number</span>.MAX_VALUE + <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(number); <span class=\"comment\">// false isFinite这个函数在参数位于最小与最大值之间时会返回true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h3><p>基本包装类型也是一种引用类型，除了拥有基本类型的特征外还拥有其特殊的特征，每当读取一个基本类型的值的时候，后台就会自动创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcdefg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newStr = str.substring(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>本来str基本数据类型是没有方法的，但是，作为基本包装类型，后台自动创建了一个String类型的实例，在实例上调用指定的方法，最后销毁这个实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'abcdefg'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> newStr = str.substring(<span class=\"number\">2</span>);</span><br><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Javascript的基础知识。</p>\n<p>ECMAScript 5的五种简单数据类型：Undefined、Null、Boolean、Number、String；</p>\n<p>另外还有一种es6新增的Symble也是属于简单数据类型</p>\n<p>一种复杂数据类型： Object（Array、Function、RegExp、Date都属于 Object）</p>\n<p>除此之外还有特殊的类型，三种基本包装类型：Boolean、Number、String</p>\n<p>简单数据类型的值时保存在栈内存中的简单数据段，它们是按值访问的。</p>\n<p>复杂的数据类型（引用类型）的值是保存在爱堆内存中的对象，它的值时按照引用访问的。</p>\n<h3 id=\"检测方法用typeof，打印出来分别是：\"><a href=\"#检测方法用typeof，打印出来分别是：\" class=\"headerlink\" title=\"检测方法用typeof，打印出来分别是：\"></a>检测方法用typeof，打印出来分别是：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined、boolean、string、number、object</span><br></pre></td></tr></table></figure>\n<h3 id=\"常见类型判断方式\"><a href=\"#常见类型判断方式\" class=\"headerlink\" title=\"常见类型判断方式\"></a>常见类型判断方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o = <span class=\"string\">''</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'String' # 判断字符串</span><br><span class=\"line\">o = <span class=\"literal\">NaN</span> || o = <span class=\"number\">1</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Number' # 判断数值</span><br><span class=\"line\">o = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Null' # 判断为Null</span><br><span class=\"line\">o = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Undefined' # 判断为Undefined</span><br><span class=\"line\">o = <span class=\"literal\">true</span>;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Boolean' # 判断为Boolean</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Object' # 判断对象</span><br><span class=\"line\">o = [];</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Array' # 判断数组</span><br><span class=\"line\">o = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Function' # 判断为Function</span><br><span class=\"line\">o = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Date' # 判断Date</span><br><span class=\"line\">o = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>();</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'RegExp' # 判断RegExp</span><br><span class=\"line\"></span><br><span class=\"line\">o = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">Object.prototype.toString.call(o).slice(8, -1) === 'Symbol' # 判断Symbol</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些特殊的类型比较\"><a href=\"#一些特殊的类型比较\" class=\"headerlink\" title=\"一些特殊的类型比较\"></a>一些特殊的类型比较</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// object ，特殊值null会被认为是空对象的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span> <span class=\"comment\">// number ，NaN是属于number类型的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">NaN</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true，ECMAScript 规范认为，既然 null 和  undefined 的行为很相似，并且都表示 一个无效的值，那么它们所表示的内容也具有相似性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> message;</span><br><span class=\"line\">message === <span class=\"literal\">undefined</span> <span class=\"comment\">// true;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == [] <span class=\"comment\">// false，不相等，因为当两个值都是对象（引用值）时，比较的是两个引用值在内存中是否是同一个对象</span></span><br><span class=\"line\">&#123;&#125; == &#123;&#125; <span class=\"comment\">// false，同上</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] == <span class=\"literal\">false</span> <span class=\"comment\">// true 隐式类型转换，全部转换为了0，0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类型计算\"><a href=\"#类型计算\" class=\"headerlink\" title=\"类型计算\"></a>类型计算</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span>+<span class=\"number\">0.2</span> <span class=\"comment\">// 0.30000000000000004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"built_in\">Number</span>.MAX_VALUE + <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(number); <span class=\"comment\">// false isFinite这个函数在参数位于最小与最大值之间时会返回true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h3><p>基本包装类型也是一种引用类型，除了拥有基本类型的特征外还拥有其特殊的特征，每当读取一个基本类型的值的时候，后台就会自动创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcdefg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newStr = str.substring(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>本来str基本数据类型是没有方法的，但是，作为基本包装类型，后台自动创建了一个String类型的实例，在实例上调用指定的方法，最后销毁这个实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'abcdefg'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> newStr = str.substring(<span class=\"number\">2</span>);</span><br><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"Javascript基本方法","date":"2018-01-14T16:00:00.000Z","_content":"\nJavascript的基础知识。\n\nECMAScript有几个常见的基本方法一直没怎么搞清楚，\n\n### 一、容易混淆的几个方法：split、slice、splice\n\n\n### split()\n\nsplit()方法用于将一个字符串分割成字符串数组\n```javascript\nvar str = 'abcdefg';\nvar strArr = str.split('');\nconsole.log(strArr); // [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n```\n\n### slice()\n\nslice()方法用于返回从数组中返回的元素，不会改变原数组\n```javascript\nvar arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\narr.slice(0, 1); // ['a']\narr.slice(2, 5); // ['c', 'd', 'e']\narr.slice(0); // 相当于深度拷贝数组\nvar str = 'abcdefg'; //也可以用于字符串\nstr.slice(2,5); // 'cde'\n```\n\n### splice()\n\nsplice() 用于对数组，删除添加和替换，会改变元素组\n```javascript\nvar arr = ['a', 'b', 'c', 'd', 'e'];\narr.splice(2, 5); // ['c', 'd', 'e']\n```\n\n\n### replace()正则\n\n```javascript\ntext = text.replace(/<wiki>(.+?)<\\/wiki>/g, function(match, contents, offset, input_string)\n    {\n        return \"<a href='wiki/\"+contents.replace(/ /g, '_')+\"'>\"+contents+\"</a>\";\n    }\n);\n```\n\n\n\n\n\n\n\n","source":"_posts/js2.md","raw":"---\ntitle: Javascript基本方法\ndate: 2018/01/15\ntag: js\ncategory: 技术\n---\n\nJavascript的基础知识。\n\nECMAScript有几个常见的基本方法一直没怎么搞清楚，\n\n### 一、容易混淆的几个方法：split、slice、splice\n\n\n### split()\n\nsplit()方法用于将一个字符串分割成字符串数组\n```javascript\nvar str = 'abcdefg';\nvar strArr = str.split('');\nconsole.log(strArr); // [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n```\n\n### slice()\n\nslice()方法用于返回从数组中返回的元素，不会改变原数组\n```javascript\nvar arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\narr.slice(0, 1); // ['a']\narr.slice(2, 5); // ['c', 'd', 'e']\narr.slice(0); // 相当于深度拷贝数组\nvar str = 'abcdefg'; //也可以用于字符串\nstr.slice(2,5); // 'cde'\n```\n\n### splice()\n\nsplice() 用于对数组，删除添加和替换，会改变元素组\n```javascript\nvar arr = ['a', 'b', 'c', 'd', 'e'];\narr.splice(2, 5); // ['c', 'd', 'e']\n```\n\n\n### replace()正则\n\n```javascript\ntext = text.replace(/<wiki>(.+?)<\\/wiki>/g, function(match, contents, offset, input_string)\n    {\n        return \"<a href='wiki/\"+contents.replace(/ /g, '_')+\"'>\"+contents+\"</a>\";\n    }\n);\n```\n\n\n\n\n\n\n\n","slug":"js2","published":1,"updated":"2018-05-22T12:35:24.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjf000oxwqttrb86kip","content":"<p>Javascript的基础知识。</p>\n<p>ECMAScript有几个常见的基本方法一直没怎么搞清楚，</p>\n<h3 id=\"一、容易混淆的几个方法：split、slice、splice\"><a href=\"#一、容易混淆的几个方法：split、slice、splice\" class=\"headerlink\" title=\"一、容易混淆的几个方法：split、slice、splice\"></a>一、容易混淆的几个方法：split、slice、splice</h3><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h3><p>split()方法用于将一个字符串分割成字符串数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcdefg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> strArr = str.split(<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(strArr); <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p>slice()方法用于返回从数组中返回的元素，不会改变原数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>];</span><br><span class=\"line\">arr.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// ['a']</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">2</span>, <span class=\"number\">5</span>); <span class=\"comment\">// ['c', 'd', 'e']</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">0</span>); <span class=\"comment\">// 相当于深度拷贝数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcdefg'</span>; <span class=\"comment\">//也可以用于字符串</span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>); <span class=\"comment\">// 'cde'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p>splice() 用于对数组，删除添加和替换，会改变元素组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">5</span>); <span class=\"comment\">// ['c', 'd', 'e']</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"replace-正则\"><a href=\"#replace-正则\" class=\"headerlink\" title=\"replace()正则\"></a>replace()正则</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text = text.replace(<span class=\"regexp\">/&lt;wiki&gt;(.+?)&lt;\\/wiki&gt;/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, contents, offset, input_string</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;a href='wiki/\"</span>+contents.replace(<span class=\"regexp\">/ /g</span>, <span class=\"string\">'_'</span>)+<span class=\"string\">\"'&gt;\"</span>+contents+<span class=\"string\">\"&lt;/a&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Javascript的基础知识。</p>\n<p>ECMAScript有几个常见的基本方法一直没怎么搞清楚，</p>\n<h3 id=\"一、容易混淆的几个方法：split、slice、splice\"><a href=\"#一、容易混淆的几个方法：split、slice、splice\" class=\"headerlink\" title=\"一、容易混淆的几个方法：split、slice、splice\"></a>一、容易混淆的几个方法：split、slice、splice</h3><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h3><p>split()方法用于将一个字符串分割成字符串数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcdefg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> strArr = str.split(<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(strArr); <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p>slice()方法用于返回从数组中返回的元素，不会改变原数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>];</span><br><span class=\"line\">arr.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// ['a']</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">2</span>, <span class=\"number\">5</span>); <span class=\"comment\">// ['c', 'd', 'e']</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">0</span>); <span class=\"comment\">// 相当于深度拷贝数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abcdefg'</span>; <span class=\"comment\">//也可以用于字符串</span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>); <span class=\"comment\">// 'cde'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p>splice() 用于对数组，删除添加和替换，会改变元素组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">5</span>); <span class=\"comment\">// ['c', 'd', 'e']</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"replace-正则\"><a href=\"#replace-正则\" class=\"headerlink\" title=\"replace()正则\"></a>replace()正则</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text = text.replace(<span class=\"regexp\">/&lt;wiki&gt;(.+?)&lt;\\/wiki&gt;/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, contents, offset, input_string</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;a href='wiki/\"</span>+contents.replace(<span class=\"regexp\">/ /g</span>, <span class=\"string\">'_'</span>)+<span class=\"string\">\"'&gt;\"</span>+contents+<span class=\"string\">\"&lt;/a&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n"},{"title":"Mac终端入门","date":"2016-12-04T16:00:00.000Z","_content":"\nMac搭配的系统是基于Linux内核开发的，因此大部分Linux的命令都适用于Mac上\n对于我个人来说，作为一名Mac用户，一名特意买一本MacBook来开发（满足好奇心）来说，使用命令行操作是非常帅气的。\n同时，熟悉了使用命令操作一些功能能够极大的提高工作效率。\n因此为了提高开发效率，特意学习一下Mac的命令操作。\n下面是一些常用的Terminal操作。\n\n\n```\ncd —— 进入目录\n\nsudo —— 获取临时root权限\n\nfind ~iname xxx  —— 查找文件夹\n\nsudo shutdown -h now | sudo halt —— 关机\n\nsudo reboot | sudo shutdown -r now —— 重启\n\npasswd  —— 修改用户密码\n\nhistory —— 最近执行的命令以及编号\n\nenv —— 显示当前所有设置过的环境变量\n\nwho —— 当前登陆的所有用户\n\nwhoami —— 当前正在操作的用户名\n\n```\n\n### 登录远程机器：\n\n```\n\nssh xxx@ip -p 端口\n\n```\n\n### 操作文件\n\n```\n\nmkdir 文件名 —— 建立新目录\n\nrm -rf —— 删除文件夹\n\nrm —— 删除文件\n\npwd —— 显示当前文件夹路径\n\n```\n\n### Homebrew\n\n安装Homebrew\n\n```shell\nruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\"\n```\n\n查找软件包\n```shell\nbrew search wget \n```\n\n安装软件包\n```shell\nbrew install wget\n```\n\n列出已安装的软件包\n```shell\nbrew list\n```\n\n删除软件包\n```shell\nbrew remove wget\n```\n\n查看软件包信息\n```shell\nbrew info wget\n```\n\n列出软件包依赖关系\n```shell\nbrew deps wget\n```\n\n更新软件包\n```shell\nbrew update\n```\n\n列出过时的软件包\n```shell\nbrew outdated\n```\n\n更新过时的软件包（全部或单个）\n```shell\nbrew upgrade \nbrew upgrade wget\n```\n\n### vim命令：\n\n```\n\ni —— 插入模式\n\nesc —— 退出\n\n:wq —— 保存并退出\n\n:q! —— 不保存退出\n\nu —— 撤销上一次操作\n\nctl+r 和u相反\n\n```\n\n### 一些快捷键\n\n```\n\ncommand + t —— 在终端新打开一个终端\n\ncommand + c —— 复制\n\ncommand + v —— 粘贴\n\ncommand + z —— 撤销\n\ncommand + 左（右） —— 移到行头（尾）\n\ncommand + shift + 左（右） —— 移到行头（尾）并选中\n\ncommand + r —— 刷新网页\n\nfn + 上（下） —— pageup(pagedown)\n\nfn + delete —— 向后删除\n\n```\n\n### 解压.gz文件\n\n```\ngunzip filename.gz\n\ngunzip -g filename.gz\n\n```\n\nor\n\n### 将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下\n\n```\n\n[root@linux ~]# cd /usr/local/src\n\n[root@linux src]# tar -zxvf /tmp/etc.tar.gz\n\n```\n\n### mac查看物理cpu和逻辑cpu个数：\n\n```shell\nsysctl hw.physicalcpu: 2\nsysctl hw.logicalcpu: 4\n```\n\n\n### 安装redis教程传送门\n<a href=\"http://www.mamicode.com/info-detail-526405.html\" target=\"_blank\">http://www.mamicode.com/info-detail-526405.html</a>\n\n\n\n\n\n","source":"_posts/mac-terminal.md","raw":"---\ntitle: Mac终端入门\ntag: [mac,terminal]\ndate: 2016/12/05\ncategory: 技术\n---\n\nMac搭配的系统是基于Linux内核开发的，因此大部分Linux的命令都适用于Mac上\n对于我个人来说，作为一名Mac用户，一名特意买一本MacBook来开发（满足好奇心）来说，使用命令行操作是非常帅气的。\n同时，熟悉了使用命令操作一些功能能够极大的提高工作效率。\n因此为了提高开发效率，特意学习一下Mac的命令操作。\n下面是一些常用的Terminal操作。\n\n\n```\ncd —— 进入目录\n\nsudo —— 获取临时root权限\n\nfind ~iname xxx  —— 查找文件夹\n\nsudo shutdown -h now | sudo halt —— 关机\n\nsudo reboot | sudo shutdown -r now —— 重启\n\npasswd  —— 修改用户密码\n\nhistory —— 最近执行的命令以及编号\n\nenv —— 显示当前所有设置过的环境变量\n\nwho —— 当前登陆的所有用户\n\nwhoami —— 当前正在操作的用户名\n\n```\n\n### 登录远程机器：\n\n```\n\nssh xxx@ip -p 端口\n\n```\n\n### 操作文件\n\n```\n\nmkdir 文件名 —— 建立新目录\n\nrm -rf —— 删除文件夹\n\nrm —— 删除文件\n\npwd —— 显示当前文件夹路径\n\n```\n\n### Homebrew\n\n安装Homebrew\n\n```shell\nruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\"\n```\n\n查找软件包\n```shell\nbrew search wget \n```\n\n安装软件包\n```shell\nbrew install wget\n```\n\n列出已安装的软件包\n```shell\nbrew list\n```\n\n删除软件包\n```shell\nbrew remove wget\n```\n\n查看软件包信息\n```shell\nbrew info wget\n```\n\n列出软件包依赖关系\n```shell\nbrew deps wget\n```\n\n更新软件包\n```shell\nbrew update\n```\n\n列出过时的软件包\n```shell\nbrew outdated\n```\n\n更新过时的软件包（全部或单个）\n```shell\nbrew upgrade \nbrew upgrade wget\n```\n\n### vim命令：\n\n```\n\ni —— 插入模式\n\nesc —— 退出\n\n:wq —— 保存并退出\n\n:q! —— 不保存退出\n\nu —— 撤销上一次操作\n\nctl+r 和u相反\n\n```\n\n### 一些快捷键\n\n```\n\ncommand + t —— 在终端新打开一个终端\n\ncommand + c —— 复制\n\ncommand + v —— 粘贴\n\ncommand + z —— 撤销\n\ncommand + 左（右） —— 移到行头（尾）\n\ncommand + shift + 左（右） —— 移到行头（尾）并选中\n\ncommand + r —— 刷新网页\n\nfn + 上（下） —— pageup(pagedown)\n\nfn + delete —— 向后删除\n\n```\n\n### 解压.gz文件\n\n```\ngunzip filename.gz\n\ngunzip -g filename.gz\n\n```\n\nor\n\n### 将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下\n\n```\n\n[root@linux ~]# cd /usr/local/src\n\n[root@linux src]# tar -zxvf /tmp/etc.tar.gz\n\n```\n\n### mac查看物理cpu和逻辑cpu个数：\n\n```shell\nsysctl hw.physicalcpu: 2\nsysctl hw.logicalcpu: 4\n```\n\n\n### 安装redis教程传送门\n<a href=\"http://www.mamicode.com/info-detail-526405.html\" target=\"_blank\">http://www.mamicode.com/info-detail-526405.html</a>\n\n\n\n\n\n","slug":"mac-terminal","published":1,"updated":"2018-06-05T11:49:21.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjh000sxwqtv1l61y2t","content":"<p>Mac搭配的系统是基于Linux内核开发的，因此大部分Linux的命令都适用于Mac上<br>对于我个人来说，作为一名Mac用户，一名特意买一本MacBook来开发（满足好奇心）来说，使用命令行操作是非常帅气的。<br>同时，熟悉了使用命令操作一些功能能够极大的提高工作效率。<br>因此为了提高开发效率，特意学习一下Mac的命令操作。<br>下面是一些常用的Terminal操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd —— 进入目录</span><br><span class=\"line\"></span><br><span class=\"line\">sudo —— 获取临时root权限</span><br><span class=\"line\"></span><br><span class=\"line\">find ~iname xxx  —— 查找文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">sudo shutdown -h now | sudo halt —— 关机</span><br><span class=\"line\"></span><br><span class=\"line\">sudo reboot | sudo shutdown -r now —— 重启</span><br><span class=\"line\"></span><br><span class=\"line\">passwd  —— 修改用户密码</span><br><span class=\"line\"></span><br><span class=\"line\">history —— 最近执行的命令以及编号</span><br><span class=\"line\"></span><br><span class=\"line\">env —— 显示当前所有设置过的环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">who —— 当前登陆的所有用户</span><br><span class=\"line\"></span><br><span class=\"line\">whoami —— 当前正在操作的用户名</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录远程机器：\"><a href=\"#登录远程机器：\" class=\"headerlink\" title=\"登录远程机器：\"></a>登录远程机器：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh xxx@ip -p 端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作文件\"><a href=\"#操作文件\" class=\"headerlink\" title=\"操作文件\"></a>操作文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir 文件名 —— 建立新目录</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf —— 删除文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">rm —— 删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">pwd —— 显示当前文件夹路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h3><p>安装Homebrew</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\"</span><br></pre></td></tr></table></figure>\n<p>查找软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search wget</span><br></pre></td></tr></table></figure></p>\n<p>安装软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure></p>\n<p>列出已安装的软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list</span><br></pre></td></tr></table></figure></p>\n<p>删除软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew remove wget</span><br></pre></td></tr></table></figure></p>\n<p>查看软件包信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew info wget</span><br></pre></td></tr></table></figure></p>\n<p>列出软件包依赖关系<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew deps wget</span><br></pre></td></tr></table></figure></p>\n<p>更新软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure></p>\n<p>列出过时的软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew outdated</span><br></pre></td></tr></table></figure></p>\n<p>更新过时的软件包（全部或单个）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade </span><br><span class=\"line\">brew upgrade wget</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"vim命令：\"><a href=\"#vim命令：\" class=\"headerlink\" title=\"vim命令：\"></a>vim命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">i —— 插入模式</span><br><span class=\"line\"></span><br><span class=\"line\">esc —— 退出</span><br><span class=\"line\"></span><br><span class=\"line\">:wq —— 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:q! —— 不保存退出</span><br><span class=\"line\"></span><br><span class=\"line\">u —— 撤销上一次操作</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+r 和u相反</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些快捷键\"><a href=\"#一些快捷键\" class=\"headerlink\" title=\"一些快捷键\"></a>一些快捷键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">command + t —— 在终端新打开一个终端</span><br><span class=\"line\"></span><br><span class=\"line\">command + c —— 复制</span><br><span class=\"line\"></span><br><span class=\"line\">command + v —— 粘贴</span><br><span class=\"line\"></span><br><span class=\"line\">command + z —— 撤销</span><br><span class=\"line\"></span><br><span class=\"line\">command + 左（右） —— 移到行头（尾）</span><br><span class=\"line\"></span><br><span class=\"line\">command + shift + 左（右） —— 移到行头（尾）并选中</span><br><span class=\"line\"></span><br><span class=\"line\">command + r —— 刷新网页</span><br><span class=\"line\"></span><br><span class=\"line\">fn + 上（下） —— pageup(pagedown)</span><br><span class=\"line\"></span><br><span class=\"line\">fn + delete —— 向后删除</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压-gz文件\"><a href=\"#解压-gz文件\" class=\"headerlink\" title=\"解压.gz文件\"></a>解压.gz文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunzip filename.gz</span><br><span class=\"line\"></span><br><span class=\"line\">gunzip -g filename.gz</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<h3 id=\"将-tmp-etc-tar-gz-文件解压缩在-usr-local-src-底下\"><a href=\"#将-tmp-etc-tar-gz-文件解压缩在-usr-local-src-底下\" class=\"headerlink\" title=\"将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下\"></a>将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@linux ~]# cd /usr/local/src</span><br><span class=\"line\"></span><br><span class=\"line\">[root@linux src]# tar -zxvf /tmp/etc.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"mac查看物理cpu和逻辑cpu个数：\"><a href=\"#mac查看物理cpu和逻辑cpu个数：\" class=\"headerlink\" title=\"mac查看物理cpu和逻辑cpu个数：\"></a>mac查看物理cpu和逻辑cpu个数：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl hw.physicalcpu: 2</span><br><span class=\"line\">sysctl hw.logicalcpu: 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装redis教程传送门\"><a href=\"#安装redis教程传送门\" class=\"headerlink\" title=\"安装redis教程传送门\"></a>安装redis教程传送门</h3><p><a href=\"http://www.mamicode.com/info-detail-526405.html\" target=\"_blank\">http://www.mamicode.com/info-detail-526405.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Mac搭配的系统是基于Linux内核开发的，因此大部分Linux的命令都适用于Mac上<br>对于我个人来说，作为一名Mac用户，一名特意买一本MacBook来开发（满足好奇心）来说，使用命令行操作是非常帅气的。<br>同时，熟悉了使用命令操作一些功能能够极大的提高工作效率。<br>因此为了提高开发效率，特意学习一下Mac的命令操作。<br>下面是一些常用的Terminal操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd —— 进入目录</span><br><span class=\"line\"></span><br><span class=\"line\">sudo —— 获取临时root权限</span><br><span class=\"line\"></span><br><span class=\"line\">find ~iname xxx  —— 查找文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">sudo shutdown -h now | sudo halt —— 关机</span><br><span class=\"line\"></span><br><span class=\"line\">sudo reboot | sudo shutdown -r now —— 重启</span><br><span class=\"line\"></span><br><span class=\"line\">passwd  —— 修改用户密码</span><br><span class=\"line\"></span><br><span class=\"line\">history —— 最近执行的命令以及编号</span><br><span class=\"line\"></span><br><span class=\"line\">env —— 显示当前所有设置过的环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">who —— 当前登陆的所有用户</span><br><span class=\"line\"></span><br><span class=\"line\">whoami —— 当前正在操作的用户名</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录远程机器：\"><a href=\"#登录远程机器：\" class=\"headerlink\" title=\"登录远程机器：\"></a>登录远程机器：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh xxx@ip -p 端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作文件\"><a href=\"#操作文件\" class=\"headerlink\" title=\"操作文件\"></a>操作文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir 文件名 —— 建立新目录</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf —— 删除文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">rm —— 删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">pwd —— 显示当前文件夹路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h3><p>安装Homebrew</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\"</span><br></pre></td></tr></table></figure>\n<p>查找软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search wget</span><br></pre></td></tr></table></figure></p>\n<p>安装软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure></p>\n<p>列出已安装的软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list</span><br></pre></td></tr></table></figure></p>\n<p>删除软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew remove wget</span><br></pre></td></tr></table></figure></p>\n<p>查看软件包信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew info wget</span><br></pre></td></tr></table></figure></p>\n<p>列出软件包依赖关系<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew deps wget</span><br></pre></td></tr></table></figure></p>\n<p>更新软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure></p>\n<p>列出过时的软件包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew outdated</span><br></pre></td></tr></table></figure></p>\n<p>更新过时的软件包（全部或单个）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade </span><br><span class=\"line\">brew upgrade wget</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"vim命令：\"><a href=\"#vim命令：\" class=\"headerlink\" title=\"vim命令：\"></a>vim命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">i —— 插入模式</span><br><span class=\"line\"></span><br><span class=\"line\">esc —— 退出</span><br><span class=\"line\"></span><br><span class=\"line\">:wq —— 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:q! —— 不保存退出</span><br><span class=\"line\"></span><br><span class=\"line\">u —— 撤销上一次操作</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+r 和u相反</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些快捷键\"><a href=\"#一些快捷键\" class=\"headerlink\" title=\"一些快捷键\"></a>一些快捷键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">command + t —— 在终端新打开一个终端</span><br><span class=\"line\"></span><br><span class=\"line\">command + c —— 复制</span><br><span class=\"line\"></span><br><span class=\"line\">command + v —— 粘贴</span><br><span class=\"line\"></span><br><span class=\"line\">command + z —— 撤销</span><br><span class=\"line\"></span><br><span class=\"line\">command + 左（右） —— 移到行头（尾）</span><br><span class=\"line\"></span><br><span class=\"line\">command + shift + 左（右） —— 移到行头（尾）并选中</span><br><span class=\"line\"></span><br><span class=\"line\">command + r —— 刷新网页</span><br><span class=\"line\"></span><br><span class=\"line\">fn + 上（下） —— pageup(pagedown)</span><br><span class=\"line\"></span><br><span class=\"line\">fn + delete —— 向后删除</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压-gz文件\"><a href=\"#解压-gz文件\" class=\"headerlink\" title=\"解压.gz文件\"></a>解压.gz文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunzip filename.gz</span><br><span class=\"line\"></span><br><span class=\"line\">gunzip -g filename.gz</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<h3 id=\"将-tmp-etc-tar-gz-文件解压缩在-usr-local-src-底下\"><a href=\"#将-tmp-etc-tar-gz-文件解压缩在-usr-local-src-底下\" class=\"headerlink\" title=\"将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下\"></a>将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@linux ~]# cd /usr/local/src</span><br><span class=\"line\"></span><br><span class=\"line\">[root@linux src]# tar -zxvf /tmp/etc.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"mac查看物理cpu和逻辑cpu个数：\"><a href=\"#mac查看物理cpu和逻辑cpu个数：\" class=\"headerlink\" title=\"mac查看物理cpu和逻辑cpu个数：\"></a>mac查看物理cpu和逻辑cpu个数：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl hw.physicalcpu: 2</span><br><span class=\"line\">sysctl hw.logicalcpu: 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装redis教程传送门\"><a href=\"#安装redis教程传送门\" class=\"headerlink\" title=\"安装redis教程传送门\"></a>安装redis教程传送门</h3><p><a href=\"http://www.mamicode.com/info-detail-526405.html\" target=\"_blank\">http://www.mamicode.com/info-detail-526405.html</a></p>\n"},{"title":"AES加密和RSA加密","date":"2018-03-19T16:00:00.000Z","_content":"\n最近项目需要用到前端加密，某些特定的数据需要前端加密之后再传输到后端，然后后端再按照与前端约定好的方式进行解密。\n\n因此，在做项目的过程中也大概了解了一下常见的加密方式。\n\n加密算法分为单向加密和双向加密。\n单向加密包括MD5，SHA加密算法等等。单向加密算法是不可逆的，也就是无法将加密后的数据恢复成原始数据，除非采取碰撞攻击和穷举的方式。\n像是银行账户密码的存储，一般采用的就是单向加密的方式。\n双向加密是可逆的，存在密文的密钥，持有密文的一方可以根据密钥解密得到原始明文，一般用于发送方和接收方都能通过密钥获取明文的情况。\n双向加密包括对称加密和非对称加密。对称加密包括DES加密，AES加密等等，本文档介绍的主要是AES加密。而非对称加密包括RSA加密，ECC加密。\n\n\n### RSA加密\nRSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。\n其加密过程是：\n```html\n1、生成一对公私钥\n2、使用其中的公钥对需要加密的字符串进行加密\n3、使用私钥对加密后的数据进行解密\n```\n\n其中的关键在于私钥的保密性，利用公钥加密的数据只能公共唯一的私钥才能解密。\n\n\n##### DEMO\nhttps://www.epoos.com/demo/jsencrypt/rsa-demo.html\n\n\n### AES加密\nAES简介\n高级加密标准(AES,Advanced Encryption Standard)为最常见的#对称加密#算法(微信小程序加密传输就是用这个加密算法的)。\nAES加密（Advanced Encryption Standard，AES），又称 高级加密标准，AES的基本要求是，采用对称分组密码体制，AES加密数据块分组长度必须为128比特，密钥长度可以是128比特、192比特、256比特中的任意一个（如果数据块及密钥长度不足时，会补齐）。\n\n对称加密算法也就是加密和解密用相同的密钥,具体的加密流程如下图： \n![图片](http://zhoushirong.github.io/img/aes.png)\n\n##### DEMO\nhttps://www.epoos.com/demo/jsencrypt/aes-demo.html\n\n\n对于WEB开发来说，AES前端加密其实意义并不大，因为AES加密的过程就是将数据加盐之后以AES加密的方式进行加密。\n\n要想做到这些，首先就得将SALT以及DATA传输到前端。\n\n然而，这些数据放到了前端，那也就意味着对客户端的用户来说是可见的了\n\n这些数据在网络上进行传输的过程中被拦截了之后，数据也就将没有任何遮掩的暴露在攻击者眼前。\n\n<br>\n**RSA**加密倒是可以避免这个问题\n\n只要服务端将公钥传输到前端，前端拿到公钥之后以RSA加密方式对数据进行加密\n\n因为RSA公钥加密过的数据唯有唯一的私钥才能进行解密，因此即使用户的数据被拦截之后，仍然可以保证其私密性。\n\n但是由于RSA加密用的是非对称加密，这样如果对于大量的数据进行加密的时候就会很耗费性能\n\n因此如果是对于大量的数据进行加密，就需要用到对称加密和非对称加密共同来完成了。\n\n具体实现方式也是类似于[https](https://www.epoos.com/article/https)的传输方式\n\n```html\n使用非对称加密传递密钥\n拿到密钥之后使用对称加密的方式对数据进行加解密\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/jsencrypt.md","raw":"---\ntitle: AES加密和RSA加密\ndate: 2018/03/20\ntag: [AES,RSA,加密,安全]\ncategory: 技术\n---\n\n最近项目需要用到前端加密，某些特定的数据需要前端加密之后再传输到后端，然后后端再按照与前端约定好的方式进行解密。\n\n因此，在做项目的过程中也大概了解了一下常见的加密方式。\n\n加密算法分为单向加密和双向加密。\n单向加密包括MD5，SHA加密算法等等。单向加密算法是不可逆的，也就是无法将加密后的数据恢复成原始数据，除非采取碰撞攻击和穷举的方式。\n像是银行账户密码的存储，一般采用的就是单向加密的方式。\n双向加密是可逆的，存在密文的密钥，持有密文的一方可以根据密钥解密得到原始明文，一般用于发送方和接收方都能通过密钥获取明文的情况。\n双向加密包括对称加密和非对称加密。对称加密包括DES加密，AES加密等等，本文档介绍的主要是AES加密。而非对称加密包括RSA加密，ECC加密。\n\n\n### RSA加密\nRSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。\n其加密过程是：\n```html\n1、生成一对公私钥\n2、使用其中的公钥对需要加密的字符串进行加密\n3、使用私钥对加密后的数据进行解密\n```\n\n其中的关键在于私钥的保密性，利用公钥加密的数据只能公共唯一的私钥才能解密。\n\n\n##### DEMO\nhttps://www.epoos.com/demo/jsencrypt/rsa-demo.html\n\n\n### AES加密\nAES简介\n高级加密标准(AES,Advanced Encryption Standard)为最常见的#对称加密#算法(微信小程序加密传输就是用这个加密算法的)。\nAES加密（Advanced Encryption Standard，AES），又称 高级加密标准，AES的基本要求是，采用对称分组密码体制，AES加密数据块分组长度必须为128比特，密钥长度可以是128比特、192比特、256比特中的任意一个（如果数据块及密钥长度不足时，会补齐）。\n\n对称加密算法也就是加密和解密用相同的密钥,具体的加密流程如下图： \n![图片](http://zhoushirong.github.io/img/aes.png)\n\n##### DEMO\nhttps://www.epoos.com/demo/jsencrypt/aes-demo.html\n\n\n对于WEB开发来说，AES前端加密其实意义并不大，因为AES加密的过程就是将数据加盐之后以AES加密的方式进行加密。\n\n要想做到这些，首先就得将SALT以及DATA传输到前端。\n\n然而，这些数据放到了前端，那也就意味着对客户端的用户来说是可见的了\n\n这些数据在网络上进行传输的过程中被拦截了之后，数据也就将没有任何遮掩的暴露在攻击者眼前。\n\n<br>\n**RSA**加密倒是可以避免这个问题\n\n只要服务端将公钥传输到前端，前端拿到公钥之后以RSA加密方式对数据进行加密\n\n因为RSA公钥加密过的数据唯有唯一的私钥才能进行解密，因此即使用户的数据被拦截之后，仍然可以保证其私密性。\n\n但是由于RSA加密用的是非对称加密，这样如果对于大量的数据进行加密的时候就会很耗费性能\n\n因此如果是对于大量的数据进行加密，就需要用到对称加密和非对称加密共同来完成了。\n\n具体实现方式也是类似于[https](https://www.epoos.com/article/https)的传输方式\n\n```html\n使用非对称加密传递密钥\n拿到密钥之后使用对称加密的方式对数据进行加解密\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"jsencrypt","published":1,"updated":"2018-05-22T12:35:24.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigji000vxwqtii2t9exe","content":"<p>最近项目需要用到前端加密，某些特定的数据需要前端加密之后再传输到后端，然后后端再按照与前端约定好的方式进行解密。</p>\n<p>因此，在做项目的过程中也大概了解了一下常见的加密方式。</p>\n<p>加密算法分为单向加密和双向加密。<br>单向加密包括MD5，SHA加密算法等等。单向加密算法是不可逆的，也就是无法将加密后的数据恢复成原始数据，除非采取碰撞攻击和穷举的方式。<br>像是银行账户密码的存储，一般采用的就是单向加密的方式。<br>双向加密是可逆的，存在密文的密钥，持有密文的一方可以根据密钥解密得到原始明文，一般用于发送方和接收方都能通过密钥获取明文的情况。<br>双向加密包括对称加密和非对称加密。对称加密包括DES加密，AES加密等等，本文档介绍的主要是AES加密。而非对称加密包括RSA加密，ECC加密。</p>\n<h3 id=\"RSA加密\"><a href=\"#RSA加密\" class=\"headerlink\" title=\"RSA加密\"></a>RSA加密</h3><p>RSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。<br>其加密过程是：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、生成一对公私钥</span><br><span class=\"line\">2、使用其中的公钥对需要加密的字符串进行加密</span><br><span class=\"line\">3、使用私钥对加密后的数据进行解密</span><br></pre></td></tr></table></figure></p>\n<p>其中的关键在于私钥的保密性，利用公钥加密的数据只能公共唯一的私钥才能解密。</p>\n<h5 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h5><p><a href=\"https://www.epoos.com/demo/jsencrypt/rsa-demo.html\">https://www.epoos.com/demo/jsencrypt/rsa-demo.html</a></p>\n<h3 id=\"AES加密\"><a href=\"#AES加密\" class=\"headerlink\" title=\"AES加密\"></a>AES加密</h3><p>AES简介<br>高级加密标准(AES,Advanced Encryption Standard)为最常见的#对称加密#算法(微信小程序加密传输就是用这个加密算法的)。<br>AES加密（Advanced Encryption Standard，AES），又称 高级加密标准，AES的基本要求是，采用对称分组密码体制，AES加密数据块分组长度必须为128比特，密钥长度可以是128比特、192比特、256比特中的任意一个（如果数据块及密钥长度不足时，会补齐）。</p>\n<p>对称加密算法也就是加密和解密用相同的密钥,具体的加密流程如下图：<br><img src=\"http://zhoushirong.github.io/img/aes.png\" alt=\"图片\"></p>\n<h5 id=\"DEMO-1\"><a href=\"#DEMO-1\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h5><p><a href=\"https://www.epoos.com/demo/jsencrypt/aes-demo.html\">https://www.epoos.com/demo/jsencrypt/aes-demo.html</a></p>\n<p>对于WEB开发来说，AES前端加密其实意义并不大，因为AES加密的过程就是将数据加盐之后以AES加密的方式进行加密。</p>\n<p>要想做到这些，首先就得将SALT以及DATA传输到前端。</p>\n<p>然而，这些数据放到了前端，那也就意味着对客户端的用户来说是可见的了</p>\n<p>这些数据在网络上进行传输的过程中被拦截了之后，数据也就将没有任何遮掩的暴露在攻击者眼前。</p>\n<p><br><br><strong>RSA</strong>加密倒是可以避免这个问题</p>\n<p>只要服务端将公钥传输到前端，前端拿到公钥之后以RSA加密方式对数据进行加密</p>\n<p>因为RSA公钥加密过的数据唯有唯一的私钥才能进行解密，因此即使用户的数据被拦截之后，仍然可以保证其私密性。</p>\n<p>但是由于RSA加密用的是非对称加密，这样如果对于大量的数据进行加密的时候就会很耗费性能</p>\n<p>因此如果是对于大量的数据进行加密，就需要用到对称加密和非对称加密共同来完成了。</p>\n<p>具体实现方式也是类似于<a href=\"https://www.epoos.com/article/https\">https</a>的传输方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用非对称加密传递密钥</span><br><span class=\"line\">拿到密钥之后使用对称加密的方式对数据进行加解密</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目需要用到前端加密，某些特定的数据需要前端加密之后再传输到后端，然后后端再按照与前端约定好的方式进行解密。</p>\n<p>因此，在做项目的过程中也大概了解了一下常见的加密方式。</p>\n<p>加密算法分为单向加密和双向加密。<br>单向加密包括MD5，SHA加密算法等等。单向加密算法是不可逆的，也就是无法将加密后的数据恢复成原始数据，除非采取碰撞攻击和穷举的方式。<br>像是银行账户密码的存储，一般采用的就是单向加密的方式。<br>双向加密是可逆的，存在密文的密钥，持有密文的一方可以根据密钥解密得到原始明文，一般用于发送方和接收方都能通过密钥获取明文的情况。<br>双向加密包括对称加密和非对称加密。对称加密包括DES加密，AES加密等等，本文档介绍的主要是AES加密。而非对称加密包括RSA加密，ECC加密。</p>\n<h3 id=\"RSA加密\"><a href=\"#RSA加密\" class=\"headerlink\" title=\"RSA加密\"></a>RSA加密</h3><p>RSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。<br>其加密过程是：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、生成一对公私钥</span><br><span class=\"line\">2、使用其中的公钥对需要加密的字符串进行加密</span><br><span class=\"line\">3、使用私钥对加密后的数据进行解密</span><br></pre></td></tr></table></figure></p>\n<p>其中的关键在于私钥的保密性，利用公钥加密的数据只能公共唯一的私钥才能解密。</p>\n<h5 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h5><p><a href=\"https://www.epoos.com/demo/jsencrypt/rsa-demo.html\">https://www.epoos.com/demo/jsencrypt/rsa-demo.html</a></p>\n<h3 id=\"AES加密\"><a href=\"#AES加密\" class=\"headerlink\" title=\"AES加密\"></a>AES加密</h3><p>AES简介<br>高级加密标准(AES,Advanced Encryption Standard)为最常见的#对称加密#算法(微信小程序加密传输就是用这个加密算法的)。<br>AES加密（Advanced Encryption Standard，AES），又称 高级加密标准，AES的基本要求是，采用对称分组密码体制，AES加密数据块分组长度必须为128比特，密钥长度可以是128比特、192比特、256比特中的任意一个（如果数据块及密钥长度不足时，会补齐）。</p>\n<p>对称加密算法也就是加密和解密用相同的密钥,具体的加密流程如下图：<br><img src=\"http://zhoushirong.github.io/img/aes.png\" alt=\"图片\"></p>\n<h5 id=\"DEMO-1\"><a href=\"#DEMO-1\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h5><p><a href=\"https://www.epoos.com/demo/jsencrypt/aes-demo.html\">https://www.epoos.com/demo/jsencrypt/aes-demo.html</a></p>\n<p>对于WEB开发来说，AES前端加密其实意义并不大，因为AES加密的过程就是将数据加盐之后以AES加密的方式进行加密。</p>\n<p>要想做到这些，首先就得将SALT以及DATA传输到前端。</p>\n<p>然而，这些数据放到了前端，那也就意味着对客户端的用户来说是可见的了</p>\n<p>这些数据在网络上进行传输的过程中被拦截了之后，数据也就将没有任何遮掩的暴露在攻击者眼前。</p>\n<p><br><br><strong>RSA</strong>加密倒是可以避免这个问题</p>\n<p>只要服务端将公钥传输到前端，前端拿到公钥之后以RSA加密方式对数据进行加密</p>\n<p>因为RSA公钥加密过的数据唯有唯一的私钥才能进行解密，因此即使用户的数据被拦截之后，仍然可以保证其私密性。</p>\n<p>但是由于RSA加密用的是非对称加密，这样如果对于大量的数据进行加密的时候就会很耗费性能</p>\n<p>因此如果是对于大量的数据进行加密，就需要用到对称加密和非对称加密共同来完成了。</p>\n<p>具体实现方式也是类似于<a href=\"https://www.epoos.com/article/https\">https</a>的传输方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用非对称加密传递密钥</span><br><span class=\"line\">拿到密钥之后使用对称加密的方式对数据进行加解密</span><br></pre></td></tr></table></figure>\n"},{"title":"常用Linux命令","date":"2016-12-29T16:00:00.000Z","_content":"\nLinux 是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为Linux操作系统。Linux也是自由软件和开放源代码软件发展中最著名的例子。\n作为一个前端或许很少用到linux，但是作为一个有理想、有道德、有激情的前端，linux是必须要了解的一项技能。尤其是立志成为全端（什么都会一点，什么都不精通）的前端工程师，更是需要知道了。\n\n下面记录一下linux服务器上经常会用到的基本操作，便于以后回来查阅。\n\n``` html\n# 超级用户\n\n$ 普通用户\n\n命令 [选项] [参数]\n```\n\n\n### 系统\n\n``` shell\n# uname -a               # 查看内核/操作系统/CPU信息\n# head -n 1 /etc/issue   # 查看操作系统版本\n# cat /proc/cpuinfo      # 查看CPU信息\n# hostname               # 查看计算机名\n# lspci -tv              # 列出所有PCI设备\n# lsusb -tv              # 列出所有USB设备\n# lsmod                  # 列出加载的内核模块\n# env                    # 查看环境变量\n```\n\n### 资源\n\n``` shell\n# free -m                # 查看内存使用量和交换区使用量\n# df -h                  # 查看各分区使用情况\n# du -sh <目录名>        # 查看指定目录的大小\n# grep MemTotal /proc/meminfo   # 查看内存总量\n# grep MemFree /proc/meminfo    # 查看空闲内存量\n# uptime                 # 查看系统运行时间、用户数、负载\n# cat /proc/loadavg      # 查看系统负载\n```\n\n### 磁盘和分区\n\n``` shell\n# mount | column -t      # 查看挂接的分区状态\n# fdisk -l               # 查看所有分区\n# swapon -s              # 查看所有交换分区\n# hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE       # 查看启动时IDE设备检测状况\n```\n\n### 网络\n\n``` shell\n# ifconfig               # 查看所有网络接口的属性\n# iptables -L            # 查看防火墙设置\n# route -n               # 查看路由表\n# netstat -lntp          # 查看所有监听端口\n# netstat -antp          # 查看所有已经建立的连接\n# netstat -s             # 查看网络统计信息\n```\n\n### 进程\n\n``` shell\n# ps -ef                 # 查看所有进程\n# top                    # 实时显示进程状态\n```\n\n### 用户\n\n``` shell\n# w                      # 查看活动用户\n# id <用户名>            # 查看指定用户信息\n# last                   # 查看用户登录日志\n# cut -d: -f1 /etc/passwd   # 查看系统所有用户\n# cut -d: -f1 /etc/group    # 查看系统所有组\n# crontab -l             # 查看当前用户的计划任务\n```\n\n\n### 登录\n\n```\nw 查询当前所有的登录用户\n\nwho 查询当前所有的登录用户\n\nlast 查询所有的登录信息\n\n/val/log —— 系统日志信息\n```\n\n### 服务\n\n``` shell\n# chkconfig --list       # 列出所有系统服务\n# chkconfig --list | grep on    # 列出所有启动的系统服务\n```\n\n### 程序\n\n``` shell\n# rpm -qa                # 查看所有安装的软件包\n```\n\n### 查看CPU信息（型号） \n\n``` shell\n# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c \n\n# cat /proc/cpuinfo | grep physical | uniq -c \n \n# getconf LONG_BIT \n\n# cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l \n\n# dmidecode | grep 'Processor Information' \n```\n\n### head tail cat awk grep vim \n\n```\ndmi 查看cpu信息\n\nchmod +x filename.sh\n\nchown —— 改变文件所属\n\n/etc/rc.local —— 开机启动配置\n\ncron —— 定时器相关\n```\n\n### 查看内存信息 \n\n``` shell\n# cat /proc/meminfo \n\n# uname -a \n\n# cat /etc/issue | grep Linux \n```\n\n### 查看机器型号 \n\n``` shell\n# dmidecode | grep \"Product Name\"  \n```\n\n查看网卡信息 \n\n``` shell\n# dmesg | grep -i eth\n```\n\n### 显示文件列表\n\n``` shell\nls -a —— 显示隐藏文件  \n\nls -i —— 显示详细信息\n\nls -l —— 显示扩展名以及权限\n\nls -h —— 显示格式化列表\n\n对于文件前面的这一串字符串的意思：-rw-r--r--\n\n-表示文件类型\n\nrw-表示所有者u     \n\nr--\n\ng所属组\n\nr--\n\no其他人\n\nr读 w写 x执行\n```\n\n### linux查找功能\n\n``` shell\n# locate locate // 更新locate数据库 updatedb\n\n# find 范围 -name 文件名\n\n# find 范围 -iname 文件名（不区分大小写）\n\n# find 范围 -mtime 文件名 +10 （10天内修改的文件）a访问\n\n# find 范围 -size -15k (小于25k的文件) M兆\n\n# find 范围 -size +1k -a -size -50k (大于1k小于50k) -o或\n\n```\n\n\n### 帮助命令\n\n```\nmain 查看帮助文档\n\nhelp 获取内部命令\n```\n\n\n### 压缩与解压缩命令\n\n#### .zip .gz .bz2 \n\n``` html\n.zip在window和linux通用  压缩文件命令为：zip 压缩文件名 源文件名 ； \n压缩文件夹命令为：zip -r 压缩文件名 源目录 ;解压命令将zip改为unzip即可\n```\n\n#### .tar.gz .tar.bz2 打包命令tar\n\n``` html\ntar -cvf 打包文件名 源文件 \n\n-c：打包 \n\n-v：显示过程 \n\n-f：指定打包后的文件名 \n\n-x：解打包 \n\n-z：压缩包名为.tar.gz \n\n-C：指定解压目录\n\n// 举例\n\ntar -zcvf packfiles.tar.gz packfiles\n\ntar -zxvf packfiles.tar.gz\n\ntar -zxvf packfiles.tar.gz -C ./dirs\n```\n\n\n-----------------------------------------------\n\n### 下面是shell相关部分\n\nshell是什么？\n\nshell是一个命令行解释器\n\n用户 ——》shell ——》内核 \n\n内核 ——》sell ——》用户\n\n\n#### 创建一个可执行文件 hello.sh\n\n``` shell\n#!/bin/bash\n\necho \"hello zsr !!!\"\n```\n\n#### 执行可执行文件\n\n``` shell\nchmod 755 hello.sh —— 给予文件可执行权限\n\n./hello.sh —— 执行可执行文件\n```\n\n\n\n``` html\necho $SHELL 查看当前的shell环境变量\n\n/etc/shells 查看当前shell支持的版本\n```\n\n### echo命令\n\n``` html\necho 选项 输出内容\n\n选项：-e 支持反斜杠控制的字符转换\n```\n\n### 创建可执行文件 hello.sh\n\n``` html\n#!/bin/bash\n#the first program\n\necho -e \"\\e[1;34m i live yellow \\e[0m\"\n```\n\n#### 执行可执行文件\n\n两个方法：\n\n#### 赋予执行权限再执行\n\n```\nchmod 755 hello.sh\n\n./hello.sh\n```\n\n#### 直接用bash执行\n\n```\nbash hello.sh\n```\n\n\n### bash的基本功能\n\n#### alias 设置命令别名\n\n```\nalias 查看已有的别名\n\nalias ll='ls -ilpa' 重命名显示文件详细信息的命令\n\nunalias 删除别名\n\n命令的生效顺序：绝对路径启动 》 别名 》 bash内部命令 》 $PATH环境变量定义的目录查找到的第一个命令\n```\n\n#### 常用快捷键\n\n```\nctl+c 强制终止当前命令\n\nctl+l 清屏\n\nctl+a 光标移到行首\n\nctl+e 光标移到行尾\n\nctl+u 从光标删除到行首\n\nctl+z 把命令放入后台\n\nctl+r 在历史命令中搜索\n```\n\n#### 历史命令\n\n```\nhistory 显示所有的历史命令\n\n保存位置在 ~/.bash_history文件里面\n\nhistory -c 清除历史命令\n```\n\n\n### 重定向\n\ndev目录 —— linux保存特殊文件的目录\n\n#### 输出重定向\n\n```\n命令 > 文件 —— 标准输出重定向\n\n命令 >> 文件 —— 追加重定向\n\n命令 2> 文件 —— 标准错误输出\n\n命令 2>> 文件 —— 追加标准错误输出\n\n命令 >> 文件 2>&1 —— 追加错误或者正确的命令\n\n命令 &> /dev/null —— 放弃查看命令执行结果\n\n命令 >> success.log 2 >> error.log —— 分别保存这两个正确和错误的信息\n```\n\n#### 输入重定向\n\n```\nwc 选项 文件名 —— 统计（ctl+d结束）\n\n- c 统计字节数。\n\n- l 统计行数。\n\n- w 统计字数。\n```\n\n\n#### 多命令顺序执行\n\n```\n命令1; 命令2 —— 多个命令顺序执行，命令之间没有任何逻辑关系\n\n命令1 && 命令2 —— 逻辑与关系\n\n命令1 || 命令2 —— 逻辑或关系 \n```\n\n### 管道符\n\n```\n命令1 | 命令2 —— 命令1的正确输出结果作为命令2的操作对象\n\neg:\n\nnetstat -an | grep \"ESTABLISHED\"\n```\n\n### 通配符\n\n```\n? —— 匹配任意字符\n\n* —— 匹配0个或多个任意字符\n\n[] —— 匹配中括号中任意一个字符\n\n\"\" —— 可以调用变量的值\n\n'' —— 所有特殊符号如 $ 都没有特殊含义\n\n` ` —— 反引号可以执行命令\n\n$(命令) —— 执行命令\n```\n\n### 远程拷贝\n\n```shell\nscp -r ./* admin@10.242.22.222:~/data1/ # scp将本地文件拷贝到远程机器\nrsync -a ../views/* ubuntu@10.220.220.222:~/data1/htdocs/index.epoos.com/views/ # rsync方式拷贝文件\n```\n\n\n\n### 相关链接《linux命令大全》\n\nhttp://man.linuxde.net/rsync\n\n","source":"_posts/linux.md","raw":"---\ntitle: 常用Linux命令\ndate: 2016/12/30\ntag: linux\ncategory: 技术\n---\n\nLinux 是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为Linux操作系统。Linux也是自由软件和开放源代码软件发展中最著名的例子。\n作为一个前端或许很少用到linux，但是作为一个有理想、有道德、有激情的前端，linux是必须要了解的一项技能。尤其是立志成为全端（什么都会一点，什么都不精通）的前端工程师，更是需要知道了。\n\n下面记录一下linux服务器上经常会用到的基本操作，便于以后回来查阅。\n\n``` html\n# 超级用户\n\n$ 普通用户\n\n命令 [选项] [参数]\n```\n\n\n### 系统\n\n``` shell\n# uname -a               # 查看内核/操作系统/CPU信息\n# head -n 1 /etc/issue   # 查看操作系统版本\n# cat /proc/cpuinfo      # 查看CPU信息\n# hostname               # 查看计算机名\n# lspci -tv              # 列出所有PCI设备\n# lsusb -tv              # 列出所有USB设备\n# lsmod                  # 列出加载的内核模块\n# env                    # 查看环境变量\n```\n\n### 资源\n\n``` shell\n# free -m                # 查看内存使用量和交换区使用量\n# df -h                  # 查看各分区使用情况\n# du -sh <目录名>        # 查看指定目录的大小\n# grep MemTotal /proc/meminfo   # 查看内存总量\n# grep MemFree /proc/meminfo    # 查看空闲内存量\n# uptime                 # 查看系统运行时间、用户数、负载\n# cat /proc/loadavg      # 查看系统负载\n```\n\n### 磁盘和分区\n\n``` shell\n# mount | column -t      # 查看挂接的分区状态\n# fdisk -l               # 查看所有分区\n# swapon -s              # 查看所有交换分区\n# hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE       # 查看启动时IDE设备检测状况\n```\n\n### 网络\n\n``` shell\n# ifconfig               # 查看所有网络接口的属性\n# iptables -L            # 查看防火墙设置\n# route -n               # 查看路由表\n# netstat -lntp          # 查看所有监听端口\n# netstat -antp          # 查看所有已经建立的连接\n# netstat -s             # 查看网络统计信息\n```\n\n### 进程\n\n``` shell\n# ps -ef                 # 查看所有进程\n# top                    # 实时显示进程状态\n```\n\n### 用户\n\n``` shell\n# w                      # 查看活动用户\n# id <用户名>            # 查看指定用户信息\n# last                   # 查看用户登录日志\n# cut -d: -f1 /etc/passwd   # 查看系统所有用户\n# cut -d: -f1 /etc/group    # 查看系统所有组\n# crontab -l             # 查看当前用户的计划任务\n```\n\n\n### 登录\n\n```\nw 查询当前所有的登录用户\n\nwho 查询当前所有的登录用户\n\nlast 查询所有的登录信息\n\n/val/log —— 系统日志信息\n```\n\n### 服务\n\n``` shell\n# chkconfig --list       # 列出所有系统服务\n# chkconfig --list | grep on    # 列出所有启动的系统服务\n```\n\n### 程序\n\n``` shell\n# rpm -qa                # 查看所有安装的软件包\n```\n\n### 查看CPU信息（型号） \n\n``` shell\n# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c \n\n# cat /proc/cpuinfo | grep physical | uniq -c \n \n# getconf LONG_BIT \n\n# cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l \n\n# dmidecode | grep 'Processor Information' \n```\n\n### head tail cat awk grep vim \n\n```\ndmi 查看cpu信息\n\nchmod +x filename.sh\n\nchown —— 改变文件所属\n\n/etc/rc.local —— 开机启动配置\n\ncron —— 定时器相关\n```\n\n### 查看内存信息 \n\n``` shell\n# cat /proc/meminfo \n\n# uname -a \n\n# cat /etc/issue | grep Linux \n```\n\n### 查看机器型号 \n\n``` shell\n# dmidecode | grep \"Product Name\"  \n```\n\n查看网卡信息 \n\n``` shell\n# dmesg | grep -i eth\n```\n\n### 显示文件列表\n\n``` shell\nls -a —— 显示隐藏文件  \n\nls -i —— 显示详细信息\n\nls -l —— 显示扩展名以及权限\n\nls -h —— 显示格式化列表\n\n对于文件前面的这一串字符串的意思：-rw-r--r--\n\n-表示文件类型\n\nrw-表示所有者u     \n\nr--\n\ng所属组\n\nr--\n\no其他人\n\nr读 w写 x执行\n```\n\n### linux查找功能\n\n``` shell\n# locate locate // 更新locate数据库 updatedb\n\n# find 范围 -name 文件名\n\n# find 范围 -iname 文件名（不区分大小写）\n\n# find 范围 -mtime 文件名 +10 （10天内修改的文件）a访问\n\n# find 范围 -size -15k (小于25k的文件) M兆\n\n# find 范围 -size +1k -a -size -50k (大于1k小于50k) -o或\n\n```\n\n\n### 帮助命令\n\n```\nmain 查看帮助文档\n\nhelp 获取内部命令\n```\n\n\n### 压缩与解压缩命令\n\n#### .zip .gz .bz2 \n\n``` html\n.zip在window和linux通用  压缩文件命令为：zip 压缩文件名 源文件名 ； \n压缩文件夹命令为：zip -r 压缩文件名 源目录 ;解压命令将zip改为unzip即可\n```\n\n#### .tar.gz .tar.bz2 打包命令tar\n\n``` html\ntar -cvf 打包文件名 源文件 \n\n-c：打包 \n\n-v：显示过程 \n\n-f：指定打包后的文件名 \n\n-x：解打包 \n\n-z：压缩包名为.tar.gz \n\n-C：指定解压目录\n\n// 举例\n\ntar -zcvf packfiles.tar.gz packfiles\n\ntar -zxvf packfiles.tar.gz\n\ntar -zxvf packfiles.tar.gz -C ./dirs\n```\n\n\n-----------------------------------------------\n\n### 下面是shell相关部分\n\nshell是什么？\n\nshell是一个命令行解释器\n\n用户 ——》shell ——》内核 \n\n内核 ——》sell ——》用户\n\n\n#### 创建一个可执行文件 hello.sh\n\n``` shell\n#!/bin/bash\n\necho \"hello zsr !!!\"\n```\n\n#### 执行可执行文件\n\n``` shell\nchmod 755 hello.sh —— 给予文件可执行权限\n\n./hello.sh —— 执行可执行文件\n```\n\n\n\n``` html\necho $SHELL 查看当前的shell环境变量\n\n/etc/shells 查看当前shell支持的版本\n```\n\n### echo命令\n\n``` html\necho 选项 输出内容\n\n选项：-e 支持反斜杠控制的字符转换\n```\n\n### 创建可执行文件 hello.sh\n\n``` html\n#!/bin/bash\n#the first program\n\necho -e \"\\e[1;34m i live yellow \\e[0m\"\n```\n\n#### 执行可执行文件\n\n两个方法：\n\n#### 赋予执行权限再执行\n\n```\nchmod 755 hello.sh\n\n./hello.sh\n```\n\n#### 直接用bash执行\n\n```\nbash hello.sh\n```\n\n\n### bash的基本功能\n\n#### alias 设置命令别名\n\n```\nalias 查看已有的别名\n\nalias ll='ls -ilpa' 重命名显示文件详细信息的命令\n\nunalias 删除别名\n\n命令的生效顺序：绝对路径启动 》 别名 》 bash内部命令 》 $PATH环境变量定义的目录查找到的第一个命令\n```\n\n#### 常用快捷键\n\n```\nctl+c 强制终止当前命令\n\nctl+l 清屏\n\nctl+a 光标移到行首\n\nctl+e 光标移到行尾\n\nctl+u 从光标删除到行首\n\nctl+z 把命令放入后台\n\nctl+r 在历史命令中搜索\n```\n\n#### 历史命令\n\n```\nhistory 显示所有的历史命令\n\n保存位置在 ~/.bash_history文件里面\n\nhistory -c 清除历史命令\n```\n\n\n### 重定向\n\ndev目录 —— linux保存特殊文件的目录\n\n#### 输出重定向\n\n```\n命令 > 文件 —— 标准输出重定向\n\n命令 >> 文件 —— 追加重定向\n\n命令 2> 文件 —— 标准错误输出\n\n命令 2>> 文件 —— 追加标准错误输出\n\n命令 >> 文件 2>&1 —— 追加错误或者正确的命令\n\n命令 &> /dev/null —— 放弃查看命令执行结果\n\n命令 >> success.log 2 >> error.log —— 分别保存这两个正确和错误的信息\n```\n\n#### 输入重定向\n\n```\nwc 选项 文件名 —— 统计（ctl+d结束）\n\n- c 统计字节数。\n\n- l 统计行数。\n\n- w 统计字数。\n```\n\n\n#### 多命令顺序执行\n\n```\n命令1; 命令2 —— 多个命令顺序执行，命令之间没有任何逻辑关系\n\n命令1 && 命令2 —— 逻辑与关系\n\n命令1 || 命令2 —— 逻辑或关系 \n```\n\n### 管道符\n\n```\n命令1 | 命令2 —— 命令1的正确输出结果作为命令2的操作对象\n\neg:\n\nnetstat -an | grep \"ESTABLISHED\"\n```\n\n### 通配符\n\n```\n? —— 匹配任意字符\n\n* —— 匹配0个或多个任意字符\n\n[] —— 匹配中括号中任意一个字符\n\n\"\" —— 可以调用变量的值\n\n'' —— 所有特殊符号如 $ 都没有特殊含义\n\n` ` —— 反引号可以执行命令\n\n$(命令) —— 执行命令\n```\n\n### 远程拷贝\n\n```shell\nscp -r ./* admin@10.242.22.222:~/data1/ # scp将本地文件拷贝到远程机器\nrsync -a ../views/* ubuntu@10.220.220.222:~/data1/htdocs/index.epoos.com/views/ # rsync方式拷贝文件\n```\n\n\n\n### 相关链接《linux命令大全》\n\nhttp://man.linuxde.net/rsync\n\n","slug":"linux","published":1,"updated":"2018-05-22T12:35:24.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjk000yxwqt191mp6h6","content":"<p>Linux 是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为Linux操作系统。Linux也是自由软件和开放源代码软件发展中最著名的例子。<br>作为一个前端或许很少用到linux，但是作为一个有理想、有道德、有激情的前端，linux是必须要了解的一项技能。尤其是立志成为全端（什么都会一点，什么都不精通）的前端工程师，更是需要知道了。</p>\n<p>下面记录一下linux服务器上经常会用到的基本操作，便于以后回来查阅。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 超级用户</span><br><span class=\"line\"></span><br><span class=\"line\">$ 普通用户</span><br><span class=\"line\"></span><br><span class=\"line\">命令 [选项] [参数]</span><br></pre></td></tr></table></figure>\n<h3 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> uname -a               # 查看内核/操作系统/CPU信息</span><br><span class=\"line\"><span class=\"meta\">#</span> head -n 1 /etc/issue   # 查看操作系统版本</span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo      # 查看CPU信息</span><br><span class=\"line\"><span class=\"meta\">#</span> hostname               # 查看计算机名</span><br><span class=\"line\"><span class=\"meta\">#</span> lspci -tv              # 列出所有PCI设备</span><br><span class=\"line\"><span class=\"meta\">#</span> lsusb -tv              # 列出所有USB设备</span><br><span class=\"line\"><span class=\"meta\">#</span> lsmod                  # 列出加载的内核模块</span><br><span class=\"line\"><span class=\"meta\">#</span> env                    # 查看环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> free -m                # 查看内存使用量和交换区使用量</span><br><span class=\"line\"><span class=\"meta\">#</span> df -h                  # 查看各分区使用情况</span><br><span class=\"line\"><span class=\"meta\">#</span> du -sh &lt;目录名&gt;        # 查看指定目录的大小</span><br><span class=\"line\"><span class=\"meta\">#</span> grep MemTotal /proc/meminfo   # 查看内存总量</span><br><span class=\"line\"><span class=\"meta\">#</span> grep MemFree /proc/meminfo    # 查看空闲内存量</span><br><span class=\"line\"><span class=\"meta\">#</span> uptime                 # 查看系统运行时间、用户数、负载</span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/loadavg      # 查看系统负载</span><br></pre></td></tr></table></figure>\n<h3 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> mount | column -t      # 查看挂接的分区状态</span><br><span class=\"line\"><span class=\"meta\">#</span> fdisk -l               # 查看所有分区</span><br><span class=\"line\"><span class=\"meta\">#</span> swapon -s              # 查看所有交换分区</span><br><span class=\"line\"><span class=\"meta\">#</span> hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)</span><br><span class=\"line\"><span class=\"meta\">#</span> dmesg | grep IDE       # 查看启动时IDE设备检测状况</span><br></pre></td></tr></table></figure>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> ifconfig               # 查看所有网络接口的属性</span><br><span class=\"line\"><span class=\"meta\">#</span> iptables -L            # 查看防火墙设置</span><br><span class=\"line\"><span class=\"meta\">#</span> route -n               # 查看路由表</span><br><span class=\"line\"><span class=\"meta\">#</span> netstat -lntp          # 查看所有监听端口</span><br><span class=\"line\"><span class=\"meta\">#</span> netstat -antp          # 查看所有已经建立的连接</span><br><span class=\"line\"><span class=\"meta\">#</span> netstat -s             # 查看网络统计信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> ps -ef                 # 查看所有进程</span><br><span class=\"line\"><span class=\"meta\">#</span> top                    # 实时显示进程状态</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> w                      # 查看活动用户</span><br><span class=\"line\"><span class=\"meta\">#</span> id &lt;用户名&gt;            # 查看指定用户信息</span><br><span class=\"line\"><span class=\"meta\">#</span> last                   # 查看用户登录日志</span><br><span class=\"line\"><span class=\"meta\">#</span> cut -d: -f1 /etc/passwd   # 查看系统所有用户</span><br><span class=\"line\"><span class=\"meta\">#</span> cut -d: -f1 /etc/group    # 查看系统所有组</span><br><span class=\"line\"><span class=\"meta\">#</span> crontab -l             # 查看当前用户的计划任务</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w 查询当前所有的登录用户</span><br><span class=\"line\"></span><br><span class=\"line\">who 查询当前所有的登录用户</span><br><span class=\"line\"></span><br><span class=\"line\">last 查询所有的登录信息</span><br><span class=\"line\"></span><br><span class=\"line\">/val/log —— 系统日志信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> chkconfig --list       # 列出所有系统服务</span><br><span class=\"line\"><span class=\"meta\">#</span> chkconfig --list | grep on    # 列出所有启动的系统服务</span><br></pre></td></tr></table></figure>\n<h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> rpm -qa                # 查看所有安装的软件包</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看CPU信息（型号）\"><a href=\"#查看CPU信息（型号）\" class=\"headerlink\" title=\"查看CPU信息（型号）\"></a>查看CPU信息（型号）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo | grep physical | uniq -c </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span> getconf LONG_BIT </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> dmidecode | grep 'Processor Information'</span><br></pre></td></tr></table></figure>\n<h3 id=\"head-tail-cat-awk-grep-vim\"><a href=\"#head-tail-cat-awk-grep-vim\" class=\"headerlink\" title=\"head tail cat awk grep vim\"></a>head tail cat awk grep vim</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dmi 查看cpu信息</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x filename.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chown —— 改变文件所属</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/rc.local —— 开机启动配置</span><br><span class=\"line\"></span><br><span class=\"line\">cron —— 定时器相关</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看内存信息\"><a href=\"#查看内存信息\" class=\"headerlink\" title=\"查看内存信息\"></a>查看内存信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> cat /proc/meminfo </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> uname -a </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> cat /etc/issue | grep Linux</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看机器型号\"><a href=\"#查看机器型号\" class=\"headerlink\" title=\"查看机器型号\"></a>查看机器型号</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> dmidecode | grep \"Product Name\"</span><br></pre></td></tr></table></figure>\n<p>查看网卡信息 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> dmesg | grep -i eth</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示文件列表\"><a href=\"#显示文件列表\" class=\"headerlink\" title=\"显示文件列表\"></a>显示文件列表</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a —— 显示隐藏文件  </span><br><span class=\"line\"></span><br><span class=\"line\">ls -i —— 显示详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">ls -l —— 显示扩展名以及权限</span><br><span class=\"line\"></span><br><span class=\"line\">ls -h —— 显示格式化列表</span><br><span class=\"line\"></span><br><span class=\"line\">对于文件前面的这一串字符串的意思：-rw-r--r--</span><br><span class=\"line\"></span><br><span class=\"line\">-表示文件类型</span><br><span class=\"line\"></span><br><span class=\"line\">rw-表示所有者u     </span><br><span class=\"line\"></span><br><span class=\"line\">r--</span><br><span class=\"line\"></span><br><span class=\"line\">g所属组</span><br><span class=\"line\"></span><br><span class=\"line\">r--</span><br><span class=\"line\"></span><br><span class=\"line\">o其他人</span><br><span class=\"line\"></span><br><span class=\"line\">r读 w写 x执行</span><br></pre></td></tr></table></figure>\n<h3 id=\"linux查找功能\"><a href=\"#linux查找功能\" class=\"headerlink\" title=\"linux查找功能\"></a>linux查找功能</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> locate locate // 更新locate数据库 updatedb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -name 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -iname 文件名（不区分大小写）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -mtime 文件名 +10 （10天内修改的文件）a访问</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -size -15k (小于25k的文件) M兆</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -size +1k -a -size -50k (大于1k小于50k) -o或</span><br></pre></td></tr></table></figure>\n<h3 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main 查看帮助文档</span><br><span class=\"line\"></span><br><span class=\"line\">help 获取内部命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩与解压缩命令\"><a href=\"#压缩与解压缩命令\" class=\"headerlink\" title=\"压缩与解压缩命令\"></a>压缩与解压缩命令</h3><h4 id=\"zip-gz-bz2\"><a href=\"#zip-gz-bz2\" class=\"headerlink\" title=\".zip .gz .bz2\"></a>.zip .gz .bz2</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.zip在window和linux通用  压缩文件命令为：zip 压缩文件名 源文件名 ； </span><br><span class=\"line\">压缩文件夹命令为：zip -r 压缩文件名 源目录 ;解压命令将zip改为unzip即可</span><br></pre></td></tr></table></figure>\n<h4 id=\"tar-gz-tar-bz2-打包命令tar\"><a href=\"#tar-gz-tar-bz2-打包命令tar\" class=\"headerlink\" title=\".tar.gz .tar.bz2 打包命令tar\"></a>.tar.gz .tar.bz2 打包命令tar</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvf 打包文件名 源文件 </span><br><span class=\"line\"></span><br><span class=\"line\">-c：打包 </span><br><span class=\"line\"></span><br><span class=\"line\">-v：显示过程 </span><br><span class=\"line\"></span><br><span class=\"line\">-f：指定打包后的文件名 </span><br><span class=\"line\"></span><br><span class=\"line\">-x：解打包 </span><br><span class=\"line\"></span><br><span class=\"line\">-z：压缩包名为.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\">-C：指定解压目录</span><br><span class=\"line\"></span><br><span class=\"line\">// 举例</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zcvf packfiles.tar.gz packfiles</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf packfiles.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf packfiles.tar.gz -C ./dirs</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"下面是shell相关部分\"><a href=\"#下面是shell相关部分\" class=\"headerlink\" title=\"下面是shell相关部分\"></a>下面是shell相关部分</h3><p>shell是什么？</p>\n<p>shell是一个命令行解释器</p>\n<p>用户 ——》shell ——》内核 </p>\n<p>内核 ——》sell ——》用户</p>\n<h4 id=\"创建一个可执行文件-hello-sh\"><a href=\"#创建一个可执行文件-hello-sh\" class=\"headerlink\" title=\"创建一个可执行文件 hello.sh\"></a>创建一个可执行文件 hello.sh</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"hello zsr !!!\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行可执行文件\"><a href=\"#执行可执行文件\" class=\"headerlink\" title=\"执行可执行文件\"></a>执行可执行文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 hello.sh —— 给予文件可执行权限</span><br><span class=\"line\"></span><br><span class=\"line\">./hello.sh —— 执行可执行文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $SHELL 查看当前的shell环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/shells 查看当前shell支持的版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"echo命令\"><a href=\"#echo命令\" class=\"headerlink\" title=\"echo命令\"></a>echo命令</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 选项 输出内容</span><br><span class=\"line\"></span><br><span class=\"line\">选项：-e 支持反斜杠控制的字符转换</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建可执行文件-hello-sh\"><a href=\"#创建可执行文件-hello-sh\" class=\"headerlink\" title=\"创建可执行文件 hello.sh\"></a>创建可执行文件 hello.sh</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#the first program</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e \"\\e[1;34m i live yellow \\e[0m\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行可执行文件-1\"><a href=\"#执行可执行文件-1\" class=\"headerlink\" title=\"执行可执行文件\"></a>执行可执行文件</h4><p>两个方法：</p>\n<h4 id=\"赋予执行权限再执行\"><a href=\"#赋予执行权限再执行\" class=\"headerlink\" title=\"赋予执行权限再执行\"></a>赋予执行权限再执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 hello.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./hello.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接用bash执行\"><a href=\"#直接用bash执行\" class=\"headerlink\" title=\"直接用bash执行\"></a>直接用bash执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash hello.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"bash的基本功能\"><a href=\"#bash的基本功能\" class=\"headerlink\" title=\"bash的基本功能\"></a>bash的基本功能</h3><h4 id=\"alias-设置命令别名\"><a href=\"#alias-设置命令别名\" class=\"headerlink\" title=\"alias 设置命令别名\"></a>alias 设置命令别名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias 查看已有的别名</span><br><span class=\"line\"></span><br><span class=\"line\">alias ll=&apos;ls -ilpa&apos; 重命名显示文件详细信息的命令</span><br><span class=\"line\"></span><br><span class=\"line\">unalias 删除别名</span><br><span class=\"line\"></span><br><span class=\"line\">命令的生效顺序：绝对路径启动 》 别名 》 bash内部命令 》 $PATH环境变量定义的目录查找到的第一个命令</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctl+c 强制终止当前命令</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+l 清屏</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+a 光标移到行首</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+e 光标移到行尾</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+u 从光标删除到行首</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+z 把命令放入后台</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+r 在历史命令中搜索</span><br></pre></td></tr></table></figure>\n<h4 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history 显示所有的历史命令</span><br><span class=\"line\"></span><br><span class=\"line\">保存位置在 ~/.bash_history文件里面</span><br><span class=\"line\"></span><br><span class=\"line\">history -c 清除历史命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><p>dev目录 —— linux保存特殊文件的目录</p>\n<h4 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令 &gt; 文件 —— 标准输出重定向</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &gt;&gt; 文件 —— 追加重定向</span><br><span class=\"line\"></span><br><span class=\"line\">命令 2&gt; 文件 —— 标准错误输出</span><br><span class=\"line\"></span><br><span class=\"line\">命令 2&gt;&gt; 文件 —— 追加标准错误输出</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &gt;&gt; 文件 2&gt;&amp;1 —— 追加错误或者正确的命令</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &amp;&gt; /dev/null —— 放弃查看命令执行结果</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &gt;&gt; success.log 2 &gt;&gt; error.log —— 分别保存这两个正确和错误的信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"输入重定向\"><a href=\"#输入重定向\" class=\"headerlink\" title=\"输入重定向\"></a>输入重定向</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc 选项 文件名 —— 统计（ctl+d结束）</span><br><span class=\"line\"></span><br><span class=\"line\">- c 统计字节数。</span><br><span class=\"line\"></span><br><span class=\"line\">- l 统计行数。</span><br><span class=\"line\"></span><br><span class=\"line\">- w 统计字数。</span><br></pre></td></tr></table></figure>\n<h4 id=\"多命令顺序执行\"><a href=\"#多命令顺序执行\" class=\"headerlink\" title=\"多命令顺序执行\"></a>多命令顺序执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令1; 命令2 —— 多个命令顺序执行，命令之间没有任何逻辑关系</span><br><span class=\"line\"></span><br><span class=\"line\">命令1 &amp;&amp; 命令2 —— 逻辑与关系</span><br><span class=\"line\"></span><br><span class=\"line\">命令1 || 命令2 —— 逻辑或关系</span><br></pre></td></tr></table></figure>\n<h3 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令1 | 命令2 —— 命令1的正确输出结果作为命令2的操作对象</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -an | grep &quot;ESTABLISHED&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? —— 匹配任意字符</span><br><span class=\"line\"></span><br><span class=\"line\">* —— 匹配0个或多个任意字符</span><br><span class=\"line\"></span><br><span class=\"line\">[] —— 匹配中括号中任意一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot; —— 可以调用变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos; —— 所有特殊符号如 $ 都没有特殊含义</span><br><span class=\"line\"></span><br><span class=\"line\">` ` —— 反引号可以执行命令</span><br><span class=\"line\"></span><br><span class=\"line\">$(命令) —— 执行命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"远程拷贝\"><a href=\"#远程拷贝\" class=\"headerlink\" title=\"远程拷贝\"></a>远程拷贝</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r ./* admin@10.242.22.222:~/data1/ # scp将本地文件拷贝到远程机器</span><br><span class=\"line\">rsync -a ../views/* ubuntu@10.220.220.222:~/data1/htdocs/index.epoos.com/views/ # rsync方式拷贝文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关链接《linux命令大全》\"><a href=\"#相关链接《linux命令大全》\" class=\"headerlink\" title=\"相关链接《linux命令大全》\"></a>相关链接《linux命令大全》</h3><p><a href=\"http://man.linuxde.net/rsync\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/rsync</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux 是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为Linux操作系统。Linux也是自由软件和开放源代码软件发展中最著名的例子。<br>作为一个前端或许很少用到linux，但是作为一个有理想、有道德、有激情的前端，linux是必须要了解的一项技能。尤其是立志成为全端（什么都会一点，什么都不精通）的前端工程师，更是需要知道了。</p>\n<p>下面记录一下linux服务器上经常会用到的基本操作，便于以后回来查阅。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 超级用户</span><br><span class=\"line\"></span><br><span class=\"line\">$ 普通用户</span><br><span class=\"line\"></span><br><span class=\"line\">命令 [选项] [参数]</span><br></pre></td></tr></table></figure>\n<h3 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> uname -a               # 查看内核/操作系统/CPU信息</span><br><span class=\"line\"><span class=\"meta\">#</span> head -n 1 /etc/issue   # 查看操作系统版本</span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo      # 查看CPU信息</span><br><span class=\"line\"><span class=\"meta\">#</span> hostname               # 查看计算机名</span><br><span class=\"line\"><span class=\"meta\">#</span> lspci -tv              # 列出所有PCI设备</span><br><span class=\"line\"><span class=\"meta\">#</span> lsusb -tv              # 列出所有USB设备</span><br><span class=\"line\"><span class=\"meta\">#</span> lsmod                  # 列出加载的内核模块</span><br><span class=\"line\"><span class=\"meta\">#</span> env                    # 查看环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> free -m                # 查看内存使用量和交换区使用量</span><br><span class=\"line\"><span class=\"meta\">#</span> df -h                  # 查看各分区使用情况</span><br><span class=\"line\"><span class=\"meta\">#</span> du -sh &lt;目录名&gt;        # 查看指定目录的大小</span><br><span class=\"line\"><span class=\"meta\">#</span> grep MemTotal /proc/meminfo   # 查看内存总量</span><br><span class=\"line\"><span class=\"meta\">#</span> grep MemFree /proc/meminfo    # 查看空闲内存量</span><br><span class=\"line\"><span class=\"meta\">#</span> uptime                 # 查看系统运行时间、用户数、负载</span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/loadavg      # 查看系统负载</span><br></pre></td></tr></table></figure>\n<h3 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> mount | column -t      # 查看挂接的分区状态</span><br><span class=\"line\"><span class=\"meta\">#</span> fdisk -l               # 查看所有分区</span><br><span class=\"line\"><span class=\"meta\">#</span> swapon -s              # 查看所有交换分区</span><br><span class=\"line\"><span class=\"meta\">#</span> hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)</span><br><span class=\"line\"><span class=\"meta\">#</span> dmesg | grep IDE       # 查看启动时IDE设备检测状况</span><br></pre></td></tr></table></figure>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> ifconfig               # 查看所有网络接口的属性</span><br><span class=\"line\"><span class=\"meta\">#</span> iptables -L            # 查看防火墙设置</span><br><span class=\"line\"><span class=\"meta\">#</span> route -n               # 查看路由表</span><br><span class=\"line\"><span class=\"meta\">#</span> netstat -lntp          # 查看所有监听端口</span><br><span class=\"line\"><span class=\"meta\">#</span> netstat -antp          # 查看所有已经建立的连接</span><br><span class=\"line\"><span class=\"meta\">#</span> netstat -s             # 查看网络统计信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> ps -ef                 # 查看所有进程</span><br><span class=\"line\"><span class=\"meta\">#</span> top                    # 实时显示进程状态</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> w                      # 查看活动用户</span><br><span class=\"line\"><span class=\"meta\">#</span> id &lt;用户名&gt;            # 查看指定用户信息</span><br><span class=\"line\"><span class=\"meta\">#</span> last                   # 查看用户登录日志</span><br><span class=\"line\"><span class=\"meta\">#</span> cut -d: -f1 /etc/passwd   # 查看系统所有用户</span><br><span class=\"line\"><span class=\"meta\">#</span> cut -d: -f1 /etc/group    # 查看系统所有组</span><br><span class=\"line\"><span class=\"meta\">#</span> crontab -l             # 查看当前用户的计划任务</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w 查询当前所有的登录用户</span><br><span class=\"line\"></span><br><span class=\"line\">who 查询当前所有的登录用户</span><br><span class=\"line\"></span><br><span class=\"line\">last 查询所有的登录信息</span><br><span class=\"line\"></span><br><span class=\"line\">/val/log —— 系统日志信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> chkconfig --list       # 列出所有系统服务</span><br><span class=\"line\"><span class=\"meta\">#</span> chkconfig --list | grep on    # 列出所有启动的系统服务</span><br></pre></td></tr></table></figure>\n<h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> rpm -qa                # 查看所有安装的软件包</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看CPU信息（型号）\"><a href=\"#查看CPU信息（型号）\" class=\"headerlink\" title=\"查看CPU信息（型号）\"></a>查看CPU信息（型号）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo | grep physical | uniq -c </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span> getconf LONG_BIT </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> dmidecode | grep 'Processor Information'</span><br></pre></td></tr></table></figure>\n<h3 id=\"head-tail-cat-awk-grep-vim\"><a href=\"#head-tail-cat-awk-grep-vim\" class=\"headerlink\" title=\"head tail cat awk grep vim\"></a>head tail cat awk grep vim</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dmi 查看cpu信息</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x filename.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chown —— 改变文件所属</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/rc.local —— 开机启动配置</span><br><span class=\"line\"></span><br><span class=\"line\">cron —— 定时器相关</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看内存信息\"><a href=\"#查看内存信息\" class=\"headerlink\" title=\"查看内存信息\"></a>查看内存信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> cat /proc/meminfo </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> uname -a </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> cat /etc/issue | grep Linux</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看机器型号\"><a href=\"#查看机器型号\" class=\"headerlink\" title=\"查看机器型号\"></a>查看机器型号</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> dmidecode | grep \"Product Name\"</span><br></pre></td></tr></table></figure>\n<p>查看网卡信息 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> dmesg | grep -i eth</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示文件列表\"><a href=\"#显示文件列表\" class=\"headerlink\" title=\"显示文件列表\"></a>显示文件列表</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a —— 显示隐藏文件  </span><br><span class=\"line\"></span><br><span class=\"line\">ls -i —— 显示详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">ls -l —— 显示扩展名以及权限</span><br><span class=\"line\"></span><br><span class=\"line\">ls -h —— 显示格式化列表</span><br><span class=\"line\"></span><br><span class=\"line\">对于文件前面的这一串字符串的意思：-rw-r--r--</span><br><span class=\"line\"></span><br><span class=\"line\">-表示文件类型</span><br><span class=\"line\"></span><br><span class=\"line\">rw-表示所有者u     </span><br><span class=\"line\"></span><br><span class=\"line\">r--</span><br><span class=\"line\"></span><br><span class=\"line\">g所属组</span><br><span class=\"line\"></span><br><span class=\"line\">r--</span><br><span class=\"line\"></span><br><span class=\"line\">o其他人</span><br><span class=\"line\"></span><br><span class=\"line\">r读 w写 x执行</span><br></pre></td></tr></table></figure>\n<h3 id=\"linux查找功能\"><a href=\"#linux查找功能\" class=\"headerlink\" title=\"linux查找功能\"></a>linux查找功能</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> locate locate // 更新locate数据库 updatedb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -name 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -iname 文件名（不区分大小写）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -mtime 文件名 +10 （10天内修改的文件）a访问</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -size -15k (小于25k的文件) M兆</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> find 范围 -size +1k -a -size -50k (大于1k小于50k) -o或</span><br></pre></td></tr></table></figure>\n<h3 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main 查看帮助文档</span><br><span class=\"line\"></span><br><span class=\"line\">help 获取内部命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩与解压缩命令\"><a href=\"#压缩与解压缩命令\" class=\"headerlink\" title=\"压缩与解压缩命令\"></a>压缩与解压缩命令</h3><h4 id=\"zip-gz-bz2\"><a href=\"#zip-gz-bz2\" class=\"headerlink\" title=\".zip .gz .bz2\"></a>.zip .gz .bz2</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.zip在window和linux通用  压缩文件命令为：zip 压缩文件名 源文件名 ； </span><br><span class=\"line\">压缩文件夹命令为：zip -r 压缩文件名 源目录 ;解压命令将zip改为unzip即可</span><br></pre></td></tr></table></figure>\n<h4 id=\"tar-gz-tar-bz2-打包命令tar\"><a href=\"#tar-gz-tar-bz2-打包命令tar\" class=\"headerlink\" title=\".tar.gz .tar.bz2 打包命令tar\"></a>.tar.gz .tar.bz2 打包命令tar</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvf 打包文件名 源文件 </span><br><span class=\"line\"></span><br><span class=\"line\">-c：打包 </span><br><span class=\"line\"></span><br><span class=\"line\">-v：显示过程 </span><br><span class=\"line\"></span><br><span class=\"line\">-f：指定打包后的文件名 </span><br><span class=\"line\"></span><br><span class=\"line\">-x：解打包 </span><br><span class=\"line\"></span><br><span class=\"line\">-z：压缩包名为.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\">-C：指定解压目录</span><br><span class=\"line\"></span><br><span class=\"line\">// 举例</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zcvf packfiles.tar.gz packfiles</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf packfiles.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf packfiles.tar.gz -C ./dirs</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"下面是shell相关部分\"><a href=\"#下面是shell相关部分\" class=\"headerlink\" title=\"下面是shell相关部分\"></a>下面是shell相关部分</h3><p>shell是什么？</p>\n<p>shell是一个命令行解释器</p>\n<p>用户 ——》shell ——》内核 </p>\n<p>内核 ——》sell ——》用户</p>\n<h4 id=\"创建一个可执行文件-hello-sh\"><a href=\"#创建一个可执行文件-hello-sh\" class=\"headerlink\" title=\"创建一个可执行文件 hello.sh\"></a>创建一个可执行文件 hello.sh</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"hello zsr !!!\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行可执行文件\"><a href=\"#执行可执行文件\" class=\"headerlink\" title=\"执行可执行文件\"></a>执行可执行文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 hello.sh —— 给予文件可执行权限</span><br><span class=\"line\"></span><br><span class=\"line\">./hello.sh —— 执行可执行文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $SHELL 查看当前的shell环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/shells 查看当前shell支持的版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"echo命令\"><a href=\"#echo命令\" class=\"headerlink\" title=\"echo命令\"></a>echo命令</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 选项 输出内容</span><br><span class=\"line\"></span><br><span class=\"line\">选项：-e 支持反斜杠控制的字符转换</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建可执行文件-hello-sh\"><a href=\"#创建可执行文件-hello-sh\" class=\"headerlink\" title=\"创建可执行文件 hello.sh\"></a>创建可执行文件 hello.sh</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#the first program</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e \"\\e[1;34m i live yellow \\e[0m\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行可执行文件-1\"><a href=\"#执行可执行文件-1\" class=\"headerlink\" title=\"执行可执行文件\"></a>执行可执行文件</h4><p>两个方法：</p>\n<h4 id=\"赋予执行权限再执行\"><a href=\"#赋予执行权限再执行\" class=\"headerlink\" title=\"赋予执行权限再执行\"></a>赋予执行权限再执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 hello.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./hello.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接用bash执行\"><a href=\"#直接用bash执行\" class=\"headerlink\" title=\"直接用bash执行\"></a>直接用bash执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash hello.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"bash的基本功能\"><a href=\"#bash的基本功能\" class=\"headerlink\" title=\"bash的基本功能\"></a>bash的基本功能</h3><h4 id=\"alias-设置命令别名\"><a href=\"#alias-设置命令别名\" class=\"headerlink\" title=\"alias 设置命令别名\"></a>alias 设置命令别名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias 查看已有的别名</span><br><span class=\"line\"></span><br><span class=\"line\">alias ll=&apos;ls -ilpa&apos; 重命名显示文件详细信息的命令</span><br><span class=\"line\"></span><br><span class=\"line\">unalias 删除别名</span><br><span class=\"line\"></span><br><span class=\"line\">命令的生效顺序：绝对路径启动 》 别名 》 bash内部命令 》 $PATH环境变量定义的目录查找到的第一个命令</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctl+c 强制终止当前命令</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+l 清屏</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+a 光标移到行首</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+e 光标移到行尾</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+u 从光标删除到行首</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+z 把命令放入后台</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+r 在历史命令中搜索</span><br></pre></td></tr></table></figure>\n<h4 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history 显示所有的历史命令</span><br><span class=\"line\"></span><br><span class=\"line\">保存位置在 ~/.bash_history文件里面</span><br><span class=\"line\"></span><br><span class=\"line\">history -c 清除历史命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><p>dev目录 —— linux保存特殊文件的目录</p>\n<h4 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令 &gt; 文件 —— 标准输出重定向</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &gt;&gt; 文件 —— 追加重定向</span><br><span class=\"line\"></span><br><span class=\"line\">命令 2&gt; 文件 —— 标准错误输出</span><br><span class=\"line\"></span><br><span class=\"line\">命令 2&gt;&gt; 文件 —— 追加标准错误输出</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &gt;&gt; 文件 2&gt;&amp;1 —— 追加错误或者正确的命令</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &amp;&gt; /dev/null —— 放弃查看命令执行结果</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &gt;&gt; success.log 2 &gt;&gt; error.log —— 分别保存这两个正确和错误的信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"输入重定向\"><a href=\"#输入重定向\" class=\"headerlink\" title=\"输入重定向\"></a>输入重定向</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc 选项 文件名 —— 统计（ctl+d结束）</span><br><span class=\"line\"></span><br><span class=\"line\">- c 统计字节数。</span><br><span class=\"line\"></span><br><span class=\"line\">- l 统计行数。</span><br><span class=\"line\"></span><br><span class=\"line\">- w 统计字数。</span><br></pre></td></tr></table></figure>\n<h4 id=\"多命令顺序执行\"><a href=\"#多命令顺序执行\" class=\"headerlink\" title=\"多命令顺序执行\"></a>多命令顺序执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令1; 命令2 —— 多个命令顺序执行，命令之间没有任何逻辑关系</span><br><span class=\"line\"></span><br><span class=\"line\">命令1 &amp;&amp; 命令2 —— 逻辑与关系</span><br><span class=\"line\"></span><br><span class=\"line\">命令1 || 命令2 —— 逻辑或关系</span><br></pre></td></tr></table></figure>\n<h3 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令1 | 命令2 —— 命令1的正确输出结果作为命令2的操作对象</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -an | grep &quot;ESTABLISHED&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? —— 匹配任意字符</span><br><span class=\"line\"></span><br><span class=\"line\">* —— 匹配0个或多个任意字符</span><br><span class=\"line\"></span><br><span class=\"line\">[] —— 匹配中括号中任意一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot; —— 可以调用变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos; —— 所有特殊符号如 $ 都没有特殊含义</span><br><span class=\"line\"></span><br><span class=\"line\">` ` —— 反引号可以执行命令</span><br><span class=\"line\"></span><br><span class=\"line\">$(命令) —— 执行命令</span><br></pre></td></tr></table></figure>\n<h3 id=\"远程拷贝\"><a href=\"#远程拷贝\" class=\"headerlink\" title=\"远程拷贝\"></a>远程拷贝</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r ./* admin@10.242.22.222:~/data1/ # scp将本地文件拷贝到远程机器</span><br><span class=\"line\">rsync -a ../views/* ubuntu@10.220.220.222:~/data1/htdocs/index.epoos.com/views/ # rsync方式拷贝文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关链接《linux命令大全》\"><a href=\"#相关链接《linux命令大全》\" class=\"headerlink\" title=\"相关链接《linux命令大全》\"></a>相关链接《linux命令大全》</h3><p><a href=\"http://man.linuxde.net/rsync\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/rsync</a></p>\n"},{"title":"Mysql入门","date":"2016-12-24T16:00:00.000Z","_content":"\nMysql是最流行的关系型数据库管理系统，尤其是在Web应用方面。\nMysql是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。\nMysql是开源的、免费的、支持大型的数据库\nMysql使用标准的SQL数据语言形式。\n下面是Mysql的基本使用。\n\nps: ${xxx}表示xxx是变量\n\n### mysql安装\n\n用brew安装mysql\n\n安装mysql\n``` html\n$ brew install mysql\n```\n\n设置 MySQL 用户以及数据存放地址\n``` html\n$ unset TMPDIR\n\n$ mysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp\n```\n\n忘记mysql数据库密码\n``` sql\nupdate user set authentication_string=password('my_password') where user='root';\n```\n\n遇到的问题\n\n错误码：ERROR 1045 (28000)\n``` html\ncd /etc\n\nsudo vim my.cnf\n\n编辑如下代码到my.cnf文件,保存成功应该就可以了\n[mysqld]\nskip-grant-tables\nlower_case_table_names=1\n```\n\n权限不足的时候可以创建一个账号\n``` sql\nCREATE USER 'golden'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON * . * TO 'golden'@'localhost';\nFLUSH PRIVILEGES;\n```\n\n---\n\n启动mysql\n```shell\nmysql.server start\nsudo /etc/init.d/mysql start \n```\nor\n```shell\nsudo /usr/local/mysql/support-files/mysql.server start;\n```\n\n开机启动mysql\n``` html\n/etc/init.d/mysqld start\n```\n\n通过sql文件执行脚本\n``` sql\nsource  /Users/zsr/learn/crawler/sql/createtable.sql;\n\nor\n\nmysql -D samp_db -u root -p < createtable.sql\n```\n\n登录mysql\n``` sql\nmysql -u root -p\n\n输入mysql密码\n```\n\n---\n\n创建一个数据库，设置character是为了兼容汉字\n``` sql\ncreate database ${newdatabasename} character set gbk;\n```\n\n查看所有的数据库\n``` sql\nshow databases;\n```\n\n删除数据库\n``` sql\ndrop database ${databasename};\n```\n\n选中testdb数据库\n``` sql\nuse testdb;\n```\n\n---\n\n创建一张表\n``` sql\nuse ${databasename}\n\ncreate table students\n（\n    id int unsigned not null auto_increment primary key,\n    name char(8) not null,\n    sex char(4) not null,\n    age tinyint unsigned not null,\n    tel char(13) null default \"-\"\n);\n```\n\n修改表名\n``` sql\nalter table ${oldtablename} rename to ${newtablename};\n```\n\n查看所有表\n``` sql\nshow tables;\n```\n\n删除表\n``` sql\ndrop table ${tabename};\n```\n\n显示数据表的属性，属性类型，主键信息\n``` sql\nshow columns from students\n```\n\n---\n\n查看列\n``` sql\ndesc ${tablename};\n```\n\n添加列\n``` sql\nalter table ${tablename} add column ${newcolumnname} verchar(30);\n```\n\n删除列\n``` sql\nalter table ${tablename} drop column;\n\nalter table ${tablename} drop column ${columnname};\n```\n\n修改列\n``` sql\nalter table ${tablename} change ${ondcolumnname} ${newcolumnname} int; \n```\n\n修改列属性\n``` sql\nalter table ${tablename} modify ${oldattr} char(80);\n```\n\n---\n\n增加数据\n``` sql \ninsert into ${tablename} values (${column1}, ${column2}); /*如果自增id，则column1为0*/\n```\n\n修改数据\n``` sql\nupdate ${tablename} set ${attr}=${newAttr} where ${id=3}; /*id=3代表查询条件*/\n```\n\n查询数据\n``` sql\nselect * from ${tablename} where ${id=3};\n```\n\n删除数据\n``` sql\ndelete from ${tablename} where ${id=3};\n```\n\n---\n\n详细的常用查询操作\n1.查询从第n条开始的m条数据\n\n``` sql\nselect * from test_table limit n,m;\n```\n\n查看数据库编码\n``` sql\nshow variables like 'character%'; \n```\n\n查看数据库位置\n``` sql\nshow variables like 'datadir%'\n```\n\n备份数据\n``` html\nmysqldump -udbusername -pdbpwd dbname > ./epoos.sql\nscp -r root@xxx.193.173.xx:/xxx/xxx/xxx/epoos.sql /Users/zsr/epoos \n```\n\n还原数据\n``` sql\nmysql -h127.0.0.1 -uroot -p123456 epoos < epoos.sql\n```\n\n如果上面的还原功能不好使，可以\n``` html\n1.创建新数据库 newdb\n2.use newdb\n3.执行备份的sql文件\n```\n\n#### ubuntu安装mysql\n```shell\nsudo apt-get update\nsudo apt-get install mysql-server\nmysql_secure_installation\n```\n\n\n\n\n#### 新建新用户\n```shell\nmysql> CREATE USER zsr@localhost IDENTIFIED BY '123456';\nmysql> grant all on epoos.* to zsr@localhost INDENTIFIED BY \"123456\";\n```\n\n","source":"_posts/mysql.md","raw":"---\ntitle: Mysql入门\ntag: [mysql,数据库]\ndate: 2016/12/25\ncategory: 技术\n---\n\nMysql是最流行的关系型数据库管理系统，尤其是在Web应用方面。\nMysql是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。\nMysql是开源的、免费的、支持大型的数据库\nMysql使用标准的SQL数据语言形式。\n下面是Mysql的基本使用。\n\nps: ${xxx}表示xxx是变量\n\n### mysql安装\n\n用brew安装mysql\n\n安装mysql\n``` html\n$ brew install mysql\n```\n\n设置 MySQL 用户以及数据存放地址\n``` html\n$ unset TMPDIR\n\n$ mysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp\n```\n\n忘记mysql数据库密码\n``` sql\nupdate user set authentication_string=password('my_password') where user='root';\n```\n\n遇到的问题\n\n错误码：ERROR 1045 (28000)\n``` html\ncd /etc\n\nsudo vim my.cnf\n\n编辑如下代码到my.cnf文件,保存成功应该就可以了\n[mysqld]\nskip-grant-tables\nlower_case_table_names=1\n```\n\n权限不足的时候可以创建一个账号\n``` sql\nCREATE USER 'golden'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON * . * TO 'golden'@'localhost';\nFLUSH PRIVILEGES;\n```\n\n---\n\n启动mysql\n```shell\nmysql.server start\nsudo /etc/init.d/mysql start \n```\nor\n```shell\nsudo /usr/local/mysql/support-files/mysql.server start;\n```\n\n开机启动mysql\n``` html\n/etc/init.d/mysqld start\n```\n\n通过sql文件执行脚本\n``` sql\nsource  /Users/zsr/learn/crawler/sql/createtable.sql;\n\nor\n\nmysql -D samp_db -u root -p < createtable.sql\n```\n\n登录mysql\n``` sql\nmysql -u root -p\n\n输入mysql密码\n```\n\n---\n\n创建一个数据库，设置character是为了兼容汉字\n``` sql\ncreate database ${newdatabasename} character set gbk;\n```\n\n查看所有的数据库\n``` sql\nshow databases;\n```\n\n删除数据库\n``` sql\ndrop database ${databasename};\n```\n\n选中testdb数据库\n``` sql\nuse testdb;\n```\n\n---\n\n创建一张表\n``` sql\nuse ${databasename}\n\ncreate table students\n（\n    id int unsigned not null auto_increment primary key,\n    name char(8) not null,\n    sex char(4) not null,\n    age tinyint unsigned not null,\n    tel char(13) null default \"-\"\n);\n```\n\n修改表名\n``` sql\nalter table ${oldtablename} rename to ${newtablename};\n```\n\n查看所有表\n``` sql\nshow tables;\n```\n\n删除表\n``` sql\ndrop table ${tabename};\n```\n\n显示数据表的属性，属性类型，主键信息\n``` sql\nshow columns from students\n```\n\n---\n\n查看列\n``` sql\ndesc ${tablename};\n```\n\n添加列\n``` sql\nalter table ${tablename} add column ${newcolumnname} verchar(30);\n```\n\n删除列\n``` sql\nalter table ${tablename} drop column;\n\nalter table ${tablename} drop column ${columnname};\n```\n\n修改列\n``` sql\nalter table ${tablename} change ${ondcolumnname} ${newcolumnname} int; \n```\n\n修改列属性\n``` sql\nalter table ${tablename} modify ${oldattr} char(80);\n```\n\n---\n\n增加数据\n``` sql \ninsert into ${tablename} values (${column1}, ${column2}); /*如果自增id，则column1为0*/\n```\n\n修改数据\n``` sql\nupdate ${tablename} set ${attr}=${newAttr} where ${id=3}; /*id=3代表查询条件*/\n```\n\n查询数据\n``` sql\nselect * from ${tablename} where ${id=3};\n```\n\n删除数据\n``` sql\ndelete from ${tablename} where ${id=3};\n```\n\n---\n\n详细的常用查询操作\n1.查询从第n条开始的m条数据\n\n``` sql\nselect * from test_table limit n,m;\n```\n\n查看数据库编码\n``` sql\nshow variables like 'character%'; \n```\n\n查看数据库位置\n``` sql\nshow variables like 'datadir%'\n```\n\n备份数据\n``` html\nmysqldump -udbusername -pdbpwd dbname > ./epoos.sql\nscp -r root@xxx.193.173.xx:/xxx/xxx/xxx/epoos.sql /Users/zsr/epoos \n```\n\n还原数据\n``` sql\nmysql -h127.0.0.1 -uroot -p123456 epoos < epoos.sql\n```\n\n如果上面的还原功能不好使，可以\n``` html\n1.创建新数据库 newdb\n2.use newdb\n3.执行备份的sql文件\n```\n\n#### ubuntu安装mysql\n```shell\nsudo apt-get update\nsudo apt-get install mysql-server\nmysql_secure_installation\n```\n\n\n\n\n#### 新建新用户\n```shell\nmysql> CREATE USER zsr@localhost IDENTIFIED BY '123456';\nmysql> grant all on epoos.* to zsr@localhost INDENTIFIED BY \"123456\";\n```\n\n","slug":"mysql","published":1,"updated":"2018-05-22T12:35:24.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjm0012xwqtqzx4r5o9","content":"<p>Mysql是最流行的关系型数据库管理系统，尤其是在Web应用方面。<br>Mysql是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<br>Mysql是开源的、免费的、支持大型的数据库<br>Mysql使用标准的SQL数据语言形式。<br>下面是Mysql的基本使用。</p>\n<p>ps: ${xxx}表示xxx是变量</p>\n<h3 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h3><p>用brew安装mysql</p>\n<p>安装mysql<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install mysql</span><br></pre></td></tr></table></figure></p>\n<p>设置 MySQL 用户以及数据存放地址<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ unset TMPDIR</span><br><span class=\"line\"></span><br><span class=\"line\">$ mysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp</span><br></pre></td></tr></table></figure></p>\n<p>忘记mysql数据库密码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> authentication_string=<span class=\"keyword\">password</span>(<span class=\"string\">'my_password'</span>) <span class=\"keyword\">where</span> <span class=\"keyword\">user</span>=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>遇到的问题</p>\n<p>错误码：ERROR 1045 (28000)<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">编辑如下代码到my.cnf文件,保存成功应该就可以了</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\">lower_case_table_names=1</span><br></pre></td></tr></table></figure></p>\n<p>权限不足的时候可以创建一个账号<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'golden'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> * . * <span class=\"keyword\">TO</span> <span class=\"string\">'golden'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>启动mysql<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql.server start</span><br><span class=\"line\">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure></p>\n<p>or<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /usr/local/mysql/support-files/mysql.server start;</span><br></pre></td></tr></table></figure></p>\n<p>开机启动mysql<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<p>通过sql文件执行脚本<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source  /Users/zsr/learn/crawler/sql/createtable.sql;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -D samp_db -u root -p &lt; createtable.sql</span><br></pre></td></tr></table></figure></p>\n<p>登录mysql<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"></span><br><span class=\"line\">输入mysql密码</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>创建一个数据库，设置character是为了兼容汉字<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> $&#123;newdatabasename&#125; <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> gbk;</span><br></pre></td></tr></table></figure></p>\n<p>查看所有的数据库<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br></pre></td></tr></table></figure></p>\n<p>删除数据库<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> $&#123;databasename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>选中testdb数据库<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> testdb;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>创建一张表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> $&#123;databasename&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> students</span><br><span class=\"line\">（</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">8</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    sex <span class=\"built_in\">char</span>(<span class=\"number\">4</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    age tinyint <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    tel <span class=\"built_in\">char</span>(<span class=\"number\">13</span>) <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>修改表名<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;oldtablename&#125; <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> $&#123;newtablename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>查看所有表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br></pre></td></tr></table></figure></p>\n<p>删除表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> $&#123;tabename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>显示数据表的属性，属性类型，主键信息<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">columns</span> <span class=\"keyword\">from</span> students</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>查看列<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc $&#123;tablename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>添加列<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> $&#123;newcolumnname&#125; verchar(<span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure></p>\n<p>删除列<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> $&#123;columnname&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>修改列<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">change</span> $&#123;ondcolumnname&#125; $&#123;newcolumnname&#125; <span class=\"built_in\">int</span>;</span><br></pre></td></tr></table></figure></p>\n<p>修改列属性<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">modify</span> $&#123;oldattr&#125; <span class=\"built_in\">char</span>(<span class=\"number\">80</span>);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>增加数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> $&#123;tablename&#125; <span class=\"keyword\">values</span> ($&#123;column1&#125;, $&#123;column2&#125;); <span class=\"comment\">/*如果自增id，则column1为0*/</span></span><br></pre></td></tr></table></figure></p>\n<p>修改数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> $&#123;tablename&#125; <span class=\"keyword\">set</span> $&#123;<span class=\"keyword\">attr</span>&#125;=$&#123;newAttr&#125; <span class=\"keyword\">where</span> $&#123;<span class=\"keyword\">id</span>=<span class=\"number\">3</span>&#125;; <span class=\"comment\">/*id=3代表查询条件*/</span></span><br></pre></td></tr></table></figure></p>\n<p>查询数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> $&#123;tablename&#125; <span class=\"keyword\">where</span> $&#123;<span class=\"keyword\">id</span>=<span class=\"number\">3</span>&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>删除数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> $&#123;tablename&#125; <span class=\"keyword\">where</span> $&#123;<span class=\"keyword\">id</span>=<span class=\"number\">3</span>&#125;;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>详细的常用查询操作<br>1.查询从第n条开始的m条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> test_table <span class=\"keyword\">limit</span> n,m;</span><br></pre></td></tr></table></figure>\n<p>查看数据库编码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'character%'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>查看数据库位置<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'datadir%'</span></span><br></pre></td></tr></table></figure></p>\n<p>备份数据<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -udbusername -pdbpwd dbname &gt; ./epoos.sql</span><br><span class=\"line\">scp -r root@xxx.193.173.xx:/xxx/xxx/xxx/epoos.sql /Users/zsr/epoos</span><br></pre></td></tr></table></figure></p>\n<p>还原数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h127.0.0.1 -uroot -p123456 epoos &lt; epoos.sql</span><br></pre></td></tr></table></figure></p>\n<p>如果上面的还原功能不好使，可以<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建新数据库 newdb</span><br><span class=\"line\">2.use newdb</span><br><span class=\"line\">3.执行备份的sql文件</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ubuntu安装mysql\"><a href=\"#ubuntu安装mysql\" class=\"headerlink\" title=\"ubuntu安装mysql\"></a>ubuntu安装mysql</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install mysql-server</span><br><span class=\"line\">mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建新用户\"><a href=\"#新建新用户\" class=\"headerlink\" title=\"新建新用户\"></a>新建新用户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span> CREATE USER zsr@localhost IDENTIFIED BY '123456';</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> grant all on epoos.* to zsr@localhost INDENTIFIED BY \"123456\";</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Mysql是最流行的关系型数据库管理系统，尤其是在Web应用方面。<br>Mysql是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<br>Mysql是开源的、免费的、支持大型的数据库<br>Mysql使用标准的SQL数据语言形式。<br>下面是Mysql的基本使用。</p>\n<p>ps: ${xxx}表示xxx是变量</p>\n<h3 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h3><p>用brew安装mysql</p>\n<p>安装mysql<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install mysql</span><br></pre></td></tr></table></figure></p>\n<p>设置 MySQL 用户以及数据存放地址<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ unset TMPDIR</span><br><span class=\"line\"></span><br><span class=\"line\">$ mysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp</span><br></pre></td></tr></table></figure></p>\n<p>忘记mysql数据库密码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> authentication_string=<span class=\"keyword\">password</span>(<span class=\"string\">'my_password'</span>) <span class=\"keyword\">where</span> <span class=\"keyword\">user</span>=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>遇到的问题</p>\n<p>错误码：ERROR 1045 (28000)<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">编辑如下代码到my.cnf文件,保存成功应该就可以了</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\">lower_case_table_names=1</span><br></pre></td></tr></table></figure></p>\n<p>权限不足的时候可以创建一个账号<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'golden'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> * . * <span class=\"keyword\">TO</span> <span class=\"string\">'golden'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>启动mysql<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql.server start</span><br><span class=\"line\">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure></p>\n<p>or<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /usr/local/mysql/support-files/mysql.server start;</span><br></pre></td></tr></table></figure></p>\n<p>开机启动mysql<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<p>通过sql文件执行脚本<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source  /Users/zsr/learn/crawler/sql/createtable.sql;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -D samp_db -u root -p &lt; createtable.sql</span><br></pre></td></tr></table></figure></p>\n<p>登录mysql<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"></span><br><span class=\"line\">输入mysql密码</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>创建一个数据库，设置character是为了兼容汉字<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> $&#123;newdatabasename&#125; <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> gbk;</span><br></pre></td></tr></table></figure></p>\n<p>查看所有的数据库<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br></pre></td></tr></table></figure></p>\n<p>删除数据库<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> $&#123;databasename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>选中testdb数据库<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> testdb;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>创建一张表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> $&#123;databasename&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> students</span><br><span class=\"line\">（</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">8</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    sex <span class=\"built_in\">char</span>(<span class=\"number\">4</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    age tinyint <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    tel <span class=\"built_in\">char</span>(<span class=\"number\">13</span>) <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">\"-\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>修改表名<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;oldtablename&#125; <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> $&#123;newtablename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>查看所有表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br></pre></td></tr></table></figure></p>\n<p>删除表<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> $&#123;tabename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>显示数据表的属性，属性类型，主键信息<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">columns</span> <span class=\"keyword\">from</span> students</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>查看列<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc $&#123;tablename&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>添加列<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> $&#123;newcolumnname&#125; verchar(<span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure></p>\n<p>删除列<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> $&#123;columnname&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>修改列<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">change</span> $&#123;ondcolumnname&#125; $&#123;newcolumnname&#125; <span class=\"built_in\">int</span>;</span><br></pre></td></tr></table></figure></p>\n<p>修改列属性<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> $&#123;tablename&#125; <span class=\"keyword\">modify</span> $&#123;oldattr&#125; <span class=\"built_in\">char</span>(<span class=\"number\">80</span>);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>增加数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> $&#123;tablename&#125; <span class=\"keyword\">values</span> ($&#123;column1&#125;, $&#123;column2&#125;); <span class=\"comment\">/*如果自增id，则column1为0*/</span></span><br></pre></td></tr></table></figure></p>\n<p>修改数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> $&#123;tablename&#125; <span class=\"keyword\">set</span> $&#123;<span class=\"keyword\">attr</span>&#125;=$&#123;newAttr&#125; <span class=\"keyword\">where</span> $&#123;<span class=\"keyword\">id</span>=<span class=\"number\">3</span>&#125;; <span class=\"comment\">/*id=3代表查询条件*/</span></span><br></pre></td></tr></table></figure></p>\n<p>查询数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> $&#123;tablename&#125; <span class=\"keyword\">where</span> $&#123;<span class=\"keyword\">id</span>=<span class=\"number\">3</span>&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>删除数据<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> $&#123;tablename&#125; <span class=\"keyword\">where</span> $&#123;<span class=\"keyword\">id</span>=<span class=\"number\">3</span>&#125;;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>详细的常用查询操作<br>1.查询从第n条开始的m条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> test_table <span class=\"keyword\">limit</span> n,m;</span><br></pre></td></tr></table></figure>\n<p>查看数据库编码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'character%'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>查看数据库位置<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'datadir%'</span></span><br></pre></td></tr></table></figure></p>\n<p>备份数据<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -udbusername -pdbpwd dbname &gt; ./epoos.sql</span><br><span class=\"line\">scp -r root@xxx.193.173.xx:/xxx/xxx/xxx/epoos.sql /Users/zsr/epoos</span><br></pre></td></tr></table></figure></p>\n<p>还原数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h127.0.0.1 -uroot -p123456 epoos &lt; epoos.sql</span><br></pre></td></tr></table></figure></p>\n<p>如果上面的还原功能不好使，可以<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建新数据库 newdb</span><br><span class=\"line\">2.use newdb</span><br><span class=\"line\">3.执行备份的sql文件</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ubuntu安装mysql\"><a href=\"#ubuntu安装mysql\" class=\"headerlink\" title=\"ubuntu安装mysql\"></a>ubuntu安装mysql</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install mysql-server</span><br><span class=\"line\">mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建新用户\"><a href=\"#新建新用户\" class=\"headerlink\" title=\"新建新用户\"></a>新建新用户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span> CREATE USER zsr@localhost IDENTIFIED BY '123456';</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> grant all on epoos.* to zsr@localhost INDENTIFIED BY \"123456\";</span><br></pre></td></tr></table></figure>\n"},{"title":"Nginx简单介绍","date":"2016-12-24T16:00:00.000Z","_content":"\nNginx（发音同engine x）是一个网页服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，以及一个负载均衡器和一个HTTP缓存。\nNginx在官方测试的结果中，能够支持五万个平行连接，而在实际的运作中可以支持二万至四万个平行链接。\n整体采用模块化设计是nginx的一个重大特点，甚至http服务器核心功能也是一个模块。\n旧版本的Nginx的模块是静态的，添加和删除模块都要对Nginx进行重新编译，1.9.11以及更新的版本已经支持动态模块加载。 —— 来自维基百科\n\nNginx最初是作为一个web服务器创建的。但是Nginx除了作为web服务器，还有个功能就是提供反向代理服务\n利用Nginx你可以适当地分配流量（负载均衡器）、流媒体、动态调整图像大小、缓存内容等等。\n\n#### 正向代理\n\n作为客户端的中介接受请求，隐藏真实的用户，向服务端获取资源，如果代理在墙外，则可以实现翻墙\n\n#### 反向代理\n\n作为服务端的中介，隐藏真实的服务器，目的是为了实现安全和负载均衡等一系列的功能\n\n安全：用户的请求不会直接到内网的服务器上，而是通过代理做了一层转发，在这一层可以实现安全过滤、流控、防DDOS等一系列策略\n\n负载均衡：我们可以水平扩展后端真正提供服务的服务器数量，代理按照规则转发请求到各个服务端，使得各个服务器负载接近均衡\n\n\n### 在mac osx\n\n1.brew\n\n```shell\nbrew list 查看brew安装的软件列表\nbrew search xx // 搜索\nbrew install xx // 安装\nbrew info xx //查看xx信息\nbrew uninstall xx //卸载\n```\n\n1.用brew安装nginx\n\n```shell\nbrew install nginx\n```\n\n2.启动nginx\n\n```shell\n[sudo] nginx\n```\n\n3.查看nginx的进程\n\n```shell\n[sudo] ps aux | grep nginx\n```\n\n访问此地址查看是否启动nginx成功：http://localhost:8080/\n\n4.查看nginx版本\n\n```shell\nnginx -v\n```\n\n5.停止nginx\n\n```shell\n[sudo] nginx -s stop\n```\n\n6.重新加载nginx\n\n```shell\n[sudo] nginx -s reload\n```\n\n7.重启nginx\n\n```shell\n[sudo] nginx -s stop && [sudo] nginx\n```\n\n\nps:如果启动或重启的时候遇到pid报错则按如下方法杀掉nginx主进程\n\n在进程列表里面找到master进程，他的编号就是主进程号了。\n\n步骤一：询nginx主进程\n\n```shell\nps -ef | grep nginx\n```\n\n步骤2：发送信号\n\n```html\n从容停止：sudo kill -QUIT 主进程号\n\n快速停止：sudo kill -TERM 主进程号\n\n强制停止nginx：sudo pkill -9 nginx\n```\n\n8.nginx默认配置位置\n\n```shell\n/etc/nginx/nginx.conf\n/usr/local/etc/nginx/nginx.conf\n# 或者\n/usr/local/nginx/conf/nginx.conf\n```\n\n\n### ubuntu系统\n\n安装\n\n```html\n[sudo] apt-get install nginx\n\n```\n\n### 查看nginx是否启动\n\n```html\nps -ef|grep nginx\n```\n\n### 关于nginx配置之后获取不到用户真实IP的问题\n是因为nginx代理之后未能将ip转发过去。\n解决办法：在nginx location匹配项后面加入如下配置即可\n```shell\nproxy_set_header        Host            $host; \nproxy_set_header        X-Real-IP       $remote_addr; \nproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; \n```\n\n但是如果有多个规则，就需要在每个规则下面重复配置；\n解决办法就是在公共的nginx.conf 里面include proxy.conf公共文件\n然后在proxy.conf公共文件中加入上面的配置即可将ip转发了。\nproxy.conf 文件\n```shell\nproxy_set_header        Host            $host; \nproxy_set_header        X-Real-IP       $remote_addr; \nproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; \n```\nnginx.conf 文件\n```shell\nhttp {\n  ####\n  #...略...#\n  include /etc/nginx/proxy.conf; # 此文件路径为proxy.conf存放地址\n  #...略...#\n}\n```\n之后在nodejs端就可以通过下面的代码获取到真实的ip地址了\n```html\nreq.get(\"X-Real-IP\") || req.get(\"X-Forwarded-For\") || req.ip,\n```\n\n\n\n\n-------------------------------\n\n### 参考&&相关链接\n\n##### 官方配置文档\n\n<a href=\"http://nginx.org/en/docs/\" target=\"_blank\">http://nginx.org/en/docs/</a>\n\n##### nginx配置从0开始：\n\n<a href=\"http://www.open-open.com/lib/view/open1419826381531.html\" target=\"_blank\">http://www.open-open.com/lib/view/open1419826381531.html</a>\n\n##### nginx 配置 location 总结及 rewrite 规则写法：\n\n<a href=\"https://linux.cn/article-5714-1.html\" target=\"_blank\">https://linux.cn/article-5714-1.html</a>\n\n##### 配置nginx\n<a href=\"http://arccode.net/2015/02/27/Nginx%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/\" target=\"_blank\">http://arccode.net/2015/02/27/Nginx配置小记/</a>\n","source":"_posts/nginx.md","raw":"---\ntitle: Nginx简单介绍\ntag: nginx\ndate: 2016/12/25\ncategory: 技术\n---\n\nNginx（发音同engine x）是一个网页服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，以及一个负载均衡器和一个HTTP缓存。\nNginx在官方测试的结果中，能够支持五万个平行连接，而在实际的运作中可以支持二万至四万个平行链接。\n整体采用模块化设计是nginx的一个重大特点，甚至http服务器核心功能也是一个模块。\n旧版本的Nginx的模块是静态的，添加和删除模块都要对Nginx进行重新编译，1.9.11以及更新的版本已经支持动态模块加载。 —— 来自维基百科\n\nNginx最初是作为一个web服务器创建的。但是Nginx除了作为web服务器，还有个功能就是提供反向代理服务\n利用Nginx你可以适当地分配流量（负载均衡器）、流媒体、动态调整图像大小、缓存内容等等。\n\n#### 正向代理\n\n作为客户端的中介接受请求，隐藏真实的用户，向服务端获取资源，如果代理在墙外，则可以实现翻墙\n\n#### 反向代理\n\n作为服务端的中介，隐藏真实的服务器，目的是为了实现安全和负载均衡等一系列的功能\n\n安全：用户的请求不会直接到内网的服务器上，而是通过代理做了一层转发，在这一层可以实现安全过滤、流控、防DDOS等一系列策略\n\n负载均衡：我们可以水平扩展后端真正提供服务的服务器数量，代理按照规则转发请求到各个服务端，使得各个服务器负载接近均衡\n\n\n### 在mac osx\n\n1.brew\n\n```shell\nbrew list 查看brew安装的软件列表\nbrew search xx // 搜索\nbrew install xx // 安装\nbrew info xx //查看xx信息\nbrew uninstall xx //卸载\n```\n\n1.用brew安装nginx\n\n```shell\nbrew install nginx\n```\n\n2.启动nginx\n\n```shell\n[sudo] nginx\n```\n\n3.查看nginx的进程\n\n```shell\n[sudo] ps aux | grep nginx\n```\n\n访问此地址查看是否启动nginx成功：http://localhost:8080/\n\n4.查看nginx版本\n\n```shell\nnginx -v\n```\n\n5.停止nginx\n\n```shell\n[sudo] nginx -s stop\n```\n\n6.重新加载nginx\n\n```shell\n[sudo] nginx -s reload\n```\n\n7.重启nginx\n\n```shell\n[sudo] nginx -s stop && [sudo] nginx\n```\n\n\nps:如果启动或重启的时候遇到pid报错则按如下方法杀掉nginx主进程\n\n在进程列表里面找到master进程，他的编号就是主进程号了。\n\n步骤一：询nginx主进程\n\n```shell\nps -ef | grep nginx\n```\n\n步骤2：发送信号\n\n```html\n从容停止：sudo kill -QUIT 主进程号\n\n快速停止：sudo kill -TERM 主进程号\n\n强制停止nginx：sudo pkill -9 nginx\n```\n\n8.nginx默认配置位置\n\n```shell\n/etc/nginx/nginx.conf\n/usr/local/etc/nginx/nginx.conf\n# 或者\n/usr/local/nginx/conf/nginx.conf\n```\n\n\n### ubuntu系统\n\n安装\n\n```html\n[sudo] apt-get install nginx\n\n```\n\n### 查看nginx是否启动\n\n```html\nps -ef|grep nginx\n```\n\n### 关于nginx配置之后获取不到用户真实IP的问题\n是因为nginx代理之后未能将ip转发过去。\n解决办法：在nginx location匹配项后面加入如下配置即可\n```shell\nproxy_set_header        Host            $host; \nproxy_set_header        X-Real-IP       $remote_addr; \nproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; \n```\n\n但是如果有多个规则，就需要在每个规则下面重复配置；\n解决办法就是在公共的nginx.conf 里面include proxy.conf公共文件\n然后在proxy.conf公共文件中加入上面的配置即可将ip转发了。\nproxy.conf 文件\n```shell\nproxy_set_header        Host            $host; \nproxy_set_header        X-Real-IP       $remote_addr; \nproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; \n```\nnginx.conf 文件\n```shell\nhttp {\n  ####\n  #...略...#\n  include /etc/nginx/proxy.conf; # 此文件路径为proxy.conf存放地址\n  #...略...#\n}\n```\n之后在nodejs端就可以通过下面的代码获取到真实的ip地址了\n```html\nreq.get(\"X-Real-IP\") || req.get(\"X-Forwarded-For\") || req.ip,\n```\n\n\n\n\n-------------------------------\n\n### 参考&&相关链接\n\n##### 官方配置文档\n\n<a href=\"http://nginx.org/en/docs/\" target=\"_blank\">http://nginx.org/en/docs/</a>\n\n##### nginx配置从0开始：\n\n<a href=\"http://www.open-open.com/lib/view/open1419826381531.html\" target=\"_blank\">http://www.open-open.com/lib/view/open1419826381531.html</a>\n\n##### nginx 配置 location 总结及 rewrite 规则写法：\n\n<a href=\"https://linux.cn/article-5714-1.html\" target=\"_blank\">https://linux.cn/article-5714-1.html</a>\n\n##### 配置nginx\n<a href=\"http://arccode.net/2015/02/27/Nginx%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/\" target=\"_blank\">http://arccode.net/2015/02/27/Nginx配置小记/</a>\n","slug":"nginx","published":1,"updated":"2018-05-30T11:42:08.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjo0014xwqt5vw1p7zy","content":"<p>Nginx（发音同engine x）是一个网页服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，以及一个负载均衡器和一个HTTP缓存。<br>Nginx在官方测试的结果中，能够支持五万个平行连接，而在实际的运作中可以支持二万至四万个平行链接。<br>整体采用模块化设计是nginx的一个重大特点，甚至http服务器核心功能也是一个模块。<br>旧版本的Nginx的模块是静态的，添加和删除模块都要对Nginx进行重新编译，1.9.11以及更新的版本已经支持动态模块加载。 —— 来自维基百科</p>\n<p>Nginx最初是作为一个web服务器创建的。但是Nginx除了作为web服务器，还有个功能就是提供反向代理服务<br>利用Nginx你可以适当地分配流量（负载均衡器）、流媒体、动态调整图像大小、缓存内容等等。</p>\n<h4 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h4><p>作为客户端的中介接受请求，隐藏真实的用户，向服务端获取资源，如果代理在墙外，则可以实现翻墙</p>\n<h4 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><p>作为服务端的中介，隐藏真实的服务器，目的是为了实现安全和负载均衡等一系列的功能</p>\n<p>安全：用户的请求不会直接到内网的服务器上，而是通过代理做了一层转发，在这一层可以实现安全过滤、流控、防DDOS等一系列策略</p>\n<p>负载均衡：我们可以水平扩展后端真正提供服务的服务器数量，代理按照规则转发请求到各个服务端，使得各个服务器负载接近均衡</p>\n<h3 id=\"在mac-osx\"><a href=\"#在mac-osx\" class=\"headerlink\" title=\"在mac osx\"></a>在mac osx</h3><p>1.brew</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list 查看brew安装的软件列表</span><br><span class=\"line\">brew search xx // 搜索</span><br><span class=\"line\">brew install xx // 安装</span><br><span class=\"line\">brew info xx //查看xx信息</span><br><span class=\"line\">brew uninstall xx //卸载</span><br></pre></td></tr></table></figure>\n<p>1.用brew安装nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<p>2.启动nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx</span><br></pre></td></tr></table></figure>\n<p>3.查看nginx的进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n<p>访问此地址查看是否启动nginx成功：<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a></p>\n<p>4.查看nginx版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>5.停止nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx -s stop</span><br></pre></td></tr></table></figure>\n<p>6.重新加载nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>7.重启nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx -s stop &amp;&amp; [sudo] nginx</span><br></pre></td></tr></table></figure>\n<p>ps:如果启动或重启的时候遇到pid报错则按如下方法杀掉nginx主进程</p>\n<p>在进程列表里面找到master进程，他的编号就是主进程号了。</p>\n<p>步骤一：询nginx主进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n<p>步骤2：发送信号</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从容停止：sudo kill -QUIT 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">快速停止：sudo kill -TERM 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">强制停止nginx：sudo pkill -9 nginx</span><br></pre></td></tr></table></figure>\n<p>8.nginx默认配置位置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/nginx/nginx.conf</span><br><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span> 或者</span><br><span class=\"line\">/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"ubuntu系统\"><a href=\"#ubuntu系统\" class=\"headerlink\" title=\"ubuntu系统\"></a>ubuntu系统</h3><p>安装</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] apt-get install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx是否启动\"><a href=\"#查看nginx是否启动\" class=\"headerlink\" title=\"查看nginx是否启动\"></a>查看nginx是否启动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于nginx配置之后获取不到用户真实IP的问题\"><a href=\"#关于nginx配置之后获取不到用户真实IP的问题\" class=\"headerlink\" title=\"关于nginx配置之后获取不到用户真实IP的问题\"></a>关于nginx配置之后获取不到用户真实IP的问题</h3><p>是因为nginx代理之后未能将ip转发过去。<br>解决办法：在nginx location匹配项后面加入如下配置即可<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header        Host            $host; </span><br><span class=\"line\">proxy_set_header        X-Real-IP       $remote_addr; </span><br><span class=\"line\">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure></p>\n<p>但是如果有多个规则，就需要在每个规则下面重复配置；<br>解决办法就是在公共的nginx.conf 里面include proxy.conf公共文件<br>然后在proxy.conf公共文件中加入上面的配置即可将ip转发了。<br>proxy.conf 文件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header        Host            $host; </span><br><span class=\"line\">proxy_set_header        X-Real-IP       $remote_addr; </span><br><span class=\"line\">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure></p>\n<p>nginx.conf 文件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\"><span class=\"meta\">  #</span>###</span><br><span class=\"line\"><span class=\"meta\">  #</span>...略...#</span><br><span class=\"line\">  include /etc/nginx/proxy.conf; # 此文件路径为proxy.conf存放地址</span><br><span class=\"line\"><span class=\"meta\">  #</span>...略...#</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>之后在nodejs端就可以通过下面的代码获取到真实的ip地址了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.get(\"X-Real-IP\") || req.get(\"X-Forwarded-For\") || req.ip,</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"参考-amp-amp-相关链接\"><a href=\"#参考-amp-amp-相关链接\" class=\"headerlink\" title=\"参考&amp;&amp;相关链接\"></a>参考&amp;&amp;相关链接</h3><h5 id=\"官方配置文档\"><a href=\"#官方配置文档\" class=\"headerlink\" title=\"官方配置文档\"></a>官方配置文档</h5><p><a href=\"http://nginx.org/en/docs/\" target=\"_blank\">http://nginx.org/en/docs/</a></p>\n<h5 id=\"nginx配置从0开始：\"><a href=\"#nginx配置从0开始：\" class=\"headerlink\" title=\"nginx配置从0开始：\"></a>nginx配置从0开始：</h5><p><a href=\"http://www.open-open.com/lib/view/open1419826381531.html\" target=\"_blank\">http://www.open-open.com/lib/view/open1419826381531.html</a></p>\n<h5 id=\"nginx-配置-location-总结及-rewrite-规则写法：\"><a href=\"#nginx-配置-location-总结及-rewrite-规则写法：\" class=\"headerlink\" title=\"nginx 配置 location 总结及 rewrite 规则写法：\"></a>nginx 配置 location 总结及 rewrite 规则写法：</h5><p><a href=\"https://linux.cn/article-5714-1.html\" target=\"_blank\">https://linux.cn/article-5714-1.html</a></p>\n<h5 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h5><p><a href=\"http://arccode.net/2015/02/27/Nginx%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/\" target=\"_blank\">http://arccode.net/2015/02/27/Nginx配置小记/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nginx（发音同engine x）是一个网页服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，以及一个负载均衡器和一个HTTP缓存。<br>Nginx在官方测试的结果中，能够支持五万个平行连接，而在实际的运作中可以支持二万至四万个平行链接。<br>整体采用模块化设计是nginx的一个重大特点，甚至http服务器核心功能也是一个模块。<br>旧版本的Nginx的模块是静态的，添加和删除模块都要对Nginx进行重新编译，1.9.11以及更新的版本已经支持动态模块加载。 —— 来自维基百科</p>\n<p>Nginx最初是作为一个web服务器创建的。但是Nginx除了作为web服务器，还有个功能就是提供反向代理服务<br>利用Nginx你可以适当地分配流量（负载均衡器）、流媒体、动态调整图像大小、缓存内容等等。</p>\n<h4 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h4><p>作为客户端的中介接受请求，隐藏真实的用户，向服务端获取资源，如果代理在墙外，则可以实现翻墙</p>\n<h4 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><p>作为服务端的中介，隐藏真实的服务器，目的是为了实现安全和负载均衡等一系列的功能</p>\n<p>安全：用户的请求不会直接到内网的服务器上，而是通过代理做了一层转发，在这一层可以实现安全过滤、流控、防DDOS等一系列策略</p>\n<p>负载均衡：我们可以水平扩展后端真正提供服务的服务器数量，代理按照规则转发请求到各个服务端，使得各个服务器负载接近均衡</p>\n<h3 id=\"在mac-osx\"><a href=\"#在mac-osx\" class=\"headerlink\" title=\"在mac osx\"></a>在mac osx</h3><p>1.brew</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list 查看brew安装的软件列表</span><br><span class=\"line\">brew search xx // 搜索</span><br><span class=\"line\">brew install xx // 安装</span><br><span class=\"line\">brew info xx //查看xx信息</span><br><span class=\"line\">brew uninstall xx //卸载</span><br></pre></td></tr></table></figure>\n<p>1.用brew安装nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<p>2.启动nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx</span><br></pre></td></tr></table></figure>\n<p>3.查看nginx的进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n<p>访问此地址查看是否启动nginx成功：<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a></p>\n<p>4.查看nginx版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>5.停止nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx -s stop</span><br></pre></td></tr></table></figure>\n<p>6.重新加载nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>7.重启nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] nginx -s stop &amp;&amp; [sudo] nginx</span><br></pre></td></tr></table></figure>\n<p>ps:如果启动或重启的时候遇到pid报错则按如下方法杀掉nginx主进程</p>\n<p>在进程列表里面找到master进程，他的编号就是主进程号了。</p>\n<p>步骤一：询nginx主进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n<p>步骤2：发送信号</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从容停止：sudo kill -QUIT 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">快速停止：sudo kill -TERM 主进程号</span><br><span class=\"line\"></span><br><span class=\"line\">强制停止nginx：sudo pkill -9 nginx</span><br></pre></td></tr></table></figure>\n<p>8.nginx默认配置位置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/nginx/nginx.conf</span><br><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span> 或者</span><br><span class=\"line\">/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"ubuntu系统\"><a href=\"#ubuntu系统\" class=\"headerlink\" title=\"ubuntu系统\"></a>ubuntu系统</h3><p>安装</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] apt-get install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx是否启动\"><a href=\"#查看nginx是否启动\" class=\"headerlink\" title=\"查看nginx是否启动\"></a>查看nginx是否启动</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于nginx配置之后获取不到用户真实IP的问题\"><a href=\"#关于nginx配置之后获取不到用户真实IP的问题\" class=\"headerlink\" title=\"关于nginx配置之后获取不到用户真实IP的问题\"></a>关于nginx配置之后获取不到用户真实IP的问题</h3><p>是因为nginx代理之后未能将ip转发过去。<br>解决办法：在nginx location匹配项后面加入如下配置即可<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header        Host            $host; </span><br><span class=\"line\">proxy_set_header        X-Real-IP       $remote_addr; </span><br><span class=\"line\">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure></p>\n<p>但是如果有多个规则，就需要在每个规则下面重复配置；<br>解决办法就是在公共的nginx.conf 里面include proxy.conf公共文件<br>然后在proxy.conf公共文件中加入上面的配置即可将ip转发了。<br>proxy.conf 文件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_set_header        Host            $host; </span><br><span class=\"line\">proxy_set_header        X-Real-IP       $remote_addr; </span><br><span class=\"line\">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure></p>\n<p>nginx.conf 文件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\"><span class=\"meta\">  #</span>###</span><br><span class=\"line\"><span class=\"meta\">  #</span>...略...#</span><br><span class=\"line\">  include /etc/nginx/proxy.conf; # 此文件路径为proxy.conf存放地址</span><br><span class=\"line\"><span class=\"meta\">  #</span>...略...#</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>之后在nodejs端就可以通过下面的代码获取到真实的ip地址了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.get(\"X-Real-IP\") || req.get(\"X-Forwarded-For\") || req.ip,</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"参考-amp-amp-相关链接\"><a href=\"#参考-amp-amp-相关链接\" class=\"headerlink\" title=\"参考&amp;&amp;相关链接\"></a>参考&amp;&amp;相关链接</h3><h5 id=\"官方配置文档\"><a href=\"#官方配置文档\" class=\"headerlink\" title=\"官方配置文档\"></a>官方配置文档</h5><p><a href=\"http://nginx.org/en/docs/\" target=\"_blank\">http://nginx.org/en/docs/</a></p>\n<h5 id=\"nginx配置从0开始：\"><a href=\"#nginx配置从0开始：\" class=\"headerlink\" title=\"nginx配置从0开始：\"></a>nginx配置从0开始：</h5><p><a href=\"http://www.open-open.com/lib/view/open1419826381531.html\" target=\"_blank\">http://www.open-open.com/lib/view/open1419826381531.html</a></p>\n<h5 id=\"nginx-配置-location-总结及-rewrite-规则写法：\"><a href=\"#nginx-配置-location-总结及-rewrite-规则写法：\" class=\"headerlink\" title=\"nginx 配置 location 总结及 rewrite 规则写法：\"></a>nginx 配置 location 总结及 rewrite 规则写法：</h5><p><a href=\"https://linux.cn/article-5714-1.html\" target=\"_blank\">https://linux.cn/article-5714-1.html</a></p>\n<h5 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h5><p><a href=\"http://arccode.net/2015/02/27/Nginx%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/\" target=\"_blank\">http://arccode.net/2015/02/27/Nginx配置小记/</a></p>\n"},{"title":"Nodejs服务器部署","date":"2018-01-07T16:00:00.000Z","_content":"\n虽然PHP是“世界上最好的语言。”\n但是我还是喜欢JS。\n凡是可以用Javascript来写的应用，最终都会用Javascript来写。\n近些年Nodejs异常的火爆，因此有一些服务端也开始使用js来写了。作为前端开发工程师，nodejs也是必须要掌握的一项技能了。\n最近在网上买了个云服务器，于是想搭个Node服务出来。\n\n### 第一步：Nodejs的安装\n\n现在，在Window上和Mac上安装nodejs还是很方便的，去官网下载下来，下一步下一步下一步...就可以了。\n可是在服务器上安装就稍微有些麻烦了，在服务端（ubuntu）安装的时候一般都是下载源码，手动编译的，这就显得有些麻烦了。\n刚开始的时候还是有些坑。\n\n#### 方法一、通过源码编译安装\n\n首先将nodejs的源码安装包下载下来，然后解压编译\n\n``` shell\napt-get update # 更新已安装的包 若提示权限不足，在前面加上sudo\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz # 获取nodejs最新包，版本号可选最新的\ntar xvf node-v8.9.4.tar.gz # 解压nodejs源码包\ncd node-v8.9.4 \n./configure \nmake # make编译需要花较长的时间\nmake install # 如果发现权限异常，需要在命令前面加上sudo\ncp /usr/local/bin/node /usr/sbin/ \nnode -v  #v8.9.4 查看当前安装的Node的版本 \n```\n\nmake的时候可能会报这个错误：\n``` html\nWARNING: failed to autodetect C++ compiler version (CXX=g++)\n```\n\n解决办法，手动编译； 编译结束，执行make install\n``` shell\napt-get install build-essential\nmake install\n```\n\n如果没有报错或者已解决错误，完成上述步骤，nodejs在服务端的安装以及结束了。\n接下来通过查看版本，检测是否安装成功\n\nnode安装完成\n``` html\nnode -v # 查看nodejs版本 v8.9.4\nnpm -v # 查看npm版本\n```\n\nnodejs安装目录\n```shell\nwhich node # 利用which命令查看当前使用的nodejs可执行文件位置\nwhere node # 利用where is 命令查看当前所有的nodejs可执行文件位置\n```\n\n#### 方法二、通过二进制文件安装\n\n``` shell\nwget https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz # 获取nodejs最新包，版本号可选最新的\nxz -d node-v8.11.2-linux-x64tar.xz # 两次解压\ntar -xvf  node-v8.11.2-linux-x64tar\n\nexport PATH=/home/xxx/nodejs/node-v8.11.2-linux-x64/bin:$PATH # 在.bashrc 文件中追加此句，设置环境变量\n```\n\n\n### 第二步：将本地的小网站上传到服务器上去\n\n首先确定服务器上的网站存放目录。\n\n这里我将它放到/website/\n\n``` shell\nscp -r /Users/zsr/test ubuntu/@123.xxx.xxx.xxx:/website\n```\n\n或者用rsync\n\n``` html\nrsync -a /Users/zsr/* root@118.193.173.25:~/website/\n```\n上传过长中出了一个错误,如果是直接上传到tmp就可以，其它的目录就会报错：\n\n``` html\nscp permission denied\n```\n\n网上查了下是因为权限不足，于是试了下上传到tmp目录，发现可行，确定是权限的问题之后就将自己的目录权限设置一下，就能正常上传了。\n*权限问题需谨慎，这里给了最高权限，实际生产环境自己调整适当的权限。*\n\n``` html\n# chmod 777 ./data1\n```\n\n### 第三步：安装mongodb\n\n``` html\napt-get update\napt-get install mongo\n```\n\n如果不update会报如下错误：\n``` html\nUnable to locate package mongo\n```\n\n### 第四步：安装pm2\n\n``` html\nnpm install -g pm2\n```\n\n### 第五步：安装并配置Nginx解析\n\n安装\n``` shell\nsudo apt-get install nginx\n```\n\n查看nginx是否安装成功\n\n``` shell\nnginx -v\n```\n\n配置文件路径\n``` shell\n/etc/nginx\n```\n\n配置过程中遇到个坑，老是返回hello nginx页面\n\n解决办法\n``` html\n注释掉\n\n/etc/nginx/nginx.conf \n\n里面的 \n\ninclude /etc/nginx/sites-enabled/* \n\n这一行\n```\n\n然后增加如下nginx配置，将80端口反代理到项目端口\n比如我在服务端写了个简单的node程序，端口为3000\n\n配置代理如下：\n\n``` html\nserver {\n    listen 80;\n    server_name xxx.xxx.xxx.xxx;\n    location / {\n        proxy_pass http://xxx.xxx.xxx.xxx:3000;\n    }\n}\n```\n\n配置完毕，检测Nginx配置是否正确\n\n``` html\nsudo nginx -t\n```\n\n检测错误，则对应具体信息做修改\n检测正确，重启Nginx 服务生效\n\n``` shell\nsudo service nginx reload\n```\n\n然后访问xxx.xxx.xxx.xxx:80即可访问到Node程序了\n\n至此服务端Node搭建网站告一段落\n下一步就是申请域名了。\n\n\n\n\n\n\n\n","source":"_posts/nodejs.md","raw":"---\ntitle: Nodejs服务器部署\ndate: 2018/01/08\ntag: nodejs\ncategory: 技术\n---\n\n虽然PHP是“世界上最好的语言。”\n但是我还是喜欢JS。\n凡是可以用Javascript来写的应用，最终都会用Javascript来写。\n近些年Nodejs异常的火爆，因此有一些服务端也开始使用js来写了。作为前端开发工程师，nodejs也是必须要掌握的一项技能了。\n最近在网上买了个云服务器，于是想搭个Node服务出来。\n\n### 第一步：Nodejs的安装\n\n现在，在Window上和Mac上安装nodejs还是很方便的，去官网下载下来，下一步下一步下一步...就可以了。\n可是在服务器上安装就稍微有些麻烦了，在服务端（ubuntu）安装的时候一般都是下载源码，手动编译的，这就显得有些麻烦了。\n刚开始的时候还是有些坑。\n\n#### 方法一、通过源码编译安装\n\n首先将nodejs的源码安装包下载下来，然后解压编译\n\n``` shell\napt-get update # 更新已安装的包 若提示权限不足，在前面加上sudo\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz # 获取nodejs最新包，版本号可选最新的\ntar xvf node-v8.9.4.tar.gz # 解压nodejs源码包\ncd node-v8.9.4 \n./configure \nmake # make编译需要花较长的时间\nmake install # 如果发现权限异常，需要在命令前面加上sudo\ncp /usr/local/bin/node /usr/sbin/ \nnode -v  #v8.9.4 查看当前安装的Node的版本 \n```\n\nmake的时候可能会报这个错误：\n``` html\nWARNING: failed to autodetect C++ compiler version (CXX=g++)\n```\n\n解决办法，手动编译； 编译结束，执行make install\n``` shell\napt-get install build-essential\nmake install\n```\n\n如果没有报错或者已解决错误，完成上述步骤，nodejs在服务端的安装以及结束了。\n接下来通过查看版本，检测是否安装成功\n\nnode安装完成\n``` html\nnode -v # 查看nodejs版本 v8.9.4\nnpm -v # 查看npm版本\n```\n\nnodejs安装目录\n```shell\nwhich node # 利用which命令查看当前使用的nodejs可执行文件位置\nwhere node # 利用where is 命令查看当前所有的nodejs可执行文件位置\n```\n\n#### 方法二、通过二进制文件安装\n\n``` shell\nwget https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz # 获取nodejs最新包，版本号可选最新的\nxz -d node-v8.11.2-linux-x64tar.xz # 两次解压\ntar -xvf  node-v8.11.2-linux-x64tar\n\nexport PATH=/home/xxx/nodejs/node-v8.11.2-linux-x64/bin:$PATH # 在.bashrc 文件中追加此句，设置环境变量\n```\n\n\n### 第二步：将本地的小网站上传到服务器上去\n\n首先确定服务器上的网站存放目录。\n\n这里我将它放到/website/\n\n``` shell\nscp -r /Users/zsr/test ubuntu/@123.xxx.xxx.xxx:/website\n```\n\n或者用rsync\n\n``` html\nrsync -a /Users/zsr/* root@118.193.173.25:~/website/\n```\n上传过长中出了一个错误,如果是直接上传到tmp就可以，其它的目录就会报错：\n\n``` html\nscp permission denied\n```\n\n网上查了下是因为权限不足，于是试了下上传到tmp目录，发现可行，确定是权限的问题之后就将自己的目录权限设置一下，就能正常上传了。\n*权限问题需谨慎，这里给了最高权限，实际生产环境自己调整适当的权限。*\n\n``` html\n# chmod 777 ./data1\n```\n\n### 第三步：安装mongodb\n\n``` html\napt-get update\napt-get install mongo\n```\n\n如果不update会报如下错误：\n``` html\nUnable to locate package mongo\n```\n\n### 第四步：安装pm2\n\n``` html\nnpm install -g pm2\n```\n\n### 第五步：安装并配置Nginx解析\n\n安装\n``` shell\nsudo apt-get install nginx\n```\n\n查看nginx是否安装成功\n\n``` shell\nnginx -v\n```\n\n配置文件路径\n``` shell\n/etc/nginx\n```\n\n配置过程中遇到个坑，老是返回hello nginx页面\n\n解决办法\n``` html\n注释掉\n\n/etc/nginx/nginx.conf \n\n里面的 \n\ninclude /etc/nginx/sites-enabled/* \n\n这一行\n```\n\n然后增加如下nginx配置，将80端口反代理到项目端口\n比如我在服务端写了个简单的node程序，端口为3000\n\n配置代理如下：\n\n``` html\nserver {\n    listen 80;\n    server_name xxx.xxx.xxx.xxx;\n    location / {\n        proxy_pass http://xxx.xxx.xxx.xxx:3000;\n    }\n}\n```\n\n配置完毕，检测Nginx配置是否正确\n\n``` html\nsudo nginx -t\n```\n\n检测错误，则对应具体信息做修改\n检测正确，重启Nginx 服务生效\n\n``` shell\nsudo service nginx reload\n```\n\n然后访问xxx.xxx.xxx.xxx:80即可访问到Node程序了\n\n至此服务端Node搭建网站告一段落\n下一步就是申请域名了。\n\n\n\n\n\n\n\n","slug":"nodejs","published":1,"updated":"2018-05-30T11:46:52.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjp0017xwqteqv4tzob","content":"<p>虽然PHP是“世界上最好的语言。”<br>但是我还是喜欢JS。<br>凡是可以用Javascript来写的应用，最终都会用Javascript来写。<br>近些年Nodejs异常的火爆，因此有一些服务端也开始使用js来写了。作为前端开发工程师，nodejs也是必须要掌握的一项技能了。<br>最近在网上买了个云服务器，于是想搭个Node服务出来。</p>\n<h3 id=\"第一步：Nodejs的安装\"><a href=\"#第一步：Nodejs的安装\" class=\"headerlink\" title=\"第一步：Nodejs的安装\"></a>第一步：Nodejs的安装</h3><p>现在，在Window上和Mac上安装nodejs还是很方便的，去官网下载下来，下一步下一步下一步…就可以了。<br>可是在服务器上安装就稍微有些麻烦了，在服务端（ubuntu）安装的时候一般都是下载源码，手动编译的，这就显得有些麻烦了。<br>刚开始的时候还是有些坑。</p>\n<h4 id=\"方法一、通过源码编译安装\"><a href=\"#方法一、通过源码编译安装\" class=\"headerlink\" title=\"方法一、通过源码编译安装\"></a>方法一、通过源码编译安装</h4><p>首先将nodejs的源码安装包下载下来，然后解压编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update # 更新已安装的包 若提示权限不足，在前面加上sudo</span><br><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz # 获取nodejs最新包，版本号可选最新的</span><br><span class=\"line\">tar xvf node-v8.9.4.tar.gz # 解压nodejs源码包</span><br><span class=\"line\">cd node-v8.9.4 </span><br><span class=\"line\">./configure </span><br><span class=\"line\">make # make编译需要花较长的时间</span><br><span class=\"line\">make install # 如果发现权限异常，需要在命令前面加上sudo</span><br><span class=\"line\">cp /usr/local/bin/node /usr/sbin/ </span><br><span class=\"line\">node -v  #v8.9.4 查看当前安装的Node的版本</span><br></pre></td></tr></table></figure>\n<p>make的时候可能会报这个错误：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: failed to autodetect C++ compiler version (CXX=g++)</span><br></pre></td></tr></table></figure></p>\n<p>解决办法，手动编译； 编译结束，执行make install<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install build-essential</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<p>如果没有报错或者已解决错误，完成上述步骤，nodejs在服务端的安装以及结束了。<br>接下来通过查看版本，检测是否安装成功</p>\n<p>node安装完成<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v # 查看nodejs版本 v8.9.4</span><br><span class=\"line\">npm -v # 查看npm版本</span><br></pre></td></tr></table></figure></p>\n<p>nodejs安装目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which node # 利用which命令查看当前使用的nodejs可执行文件位置</span><br><span class=\"line\">where node # 利用where is 命令查看当前所有的nodejs可执行文件位置</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"方法二、通过二进制文件安装\"><a href=\"#方法二、通过二进制文件安装\" class=\"headerlink\" title=\"方法二、通过二进制文件安装\"></a>方法二、通过二进制文件安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz # 获取nodejs最新包，版本号可选最新的</span><br><span class=\"line\">xz -d node-v8.11.2-linux-x64tar.xz # 两次解压</span><br><span class=\"line\">tar -xvf  node-v8.11.2-linux-x64tar</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=/home/xxx/nodejs/node-v8.11.2-linux-x64/bin:$PATH # 在.bashrc 文件中追加此句，设置环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：将本地的小网站上传到服务器上去\"><a href=\"#第二步：将本地的小网站上传到服务器上去\" class=\"headerlink\" title=\"第二步：将本地的小网站上传到服务器上去\"></a>第二步：将本地的小网站上传到服务器上去</h3><p>首先确定服务器上的网站存放目录。</p>\n<p>这里我将它放到/website/</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /Users/zsr/test ubuntu/@123.xxx.xxx.xxx:/website</span><br></pre></td></tr></table></figure>\n<p>或者用rsync</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -a /Users/zsr/* root@118.193.173.25:~/website/</span><br></pre></td></tr></table></figure>\n<p>上传过长中出了一个错误,如果是直接上传到tmp就可以，其它的目录就会报错：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp permission denied</span><br></pre></td></tr></table></figure>\n<p>网上查了下是因为权限不足，于是试了下上传到tmp目录，发现可行，确定是权限的问题之后就将自己的目录权限设置一下，就能正常上传了。<br><em>权限问题需谨慎，这里给了最高权限，实际生产环境自己调整适当的权限。</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chmod 777 ./data1</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步：安装mongodb\"><a href=\"#第三步：安装mongodb\" class=\"headerlink\" title=\"第三步：安装mongodb\"></a>第三步：安装mongodb</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install mongo</span><br></pre></td></tr></table></figure>\n<p>如果不update会报如下错误：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to locate package mongo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第四步：安装pm2\"><a href=\"#第四步：安装pm2\" class=\"headerlink\" title=\"第四步：安装pm2\"></a>第四步：安装pm2</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步：安装并配置Nginx解析\"><a href=\"#第五步：安装并配置Nginx解析\" class=\"headerlink\" title=\"第五步：安装并配置Nginx解析\"></a>第五步：安装并配置Nginx解析</h3><p>安装<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p>\n<p>查看nginx是否安装成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>配置文件路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/nginx</span><br></pre></td></tr></table></figure></p>\n<p>配置过程中遇到个坑，老是返回hello nginx页面</p>\n<p>解决办法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注释掉</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/nginx.conf </span><br><span class=\"line\"></span><br><span class=\"line\">里面的 </span><br><span class=\"line\"></span><br><span class=\"line\">include /etc/nginx/sites-enabled/* </span><br><span class=\"line\"></span><br><span class=\"line\">这一行</span><br></pre></td></tr></table></figure></p>\n<p>然后增加如下nginx配置，将80端口反代理到项目端口<br>比如我在服务端写了个简单的node程序，端口为3000</p>\n<p>配置代理如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name xxx.xxx.xxx.xxx;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://xxx.xxx.xxx.xxx:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完毕，检测Nginx配置是否正确</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n<p>检测错误，则对应具体信息做修改<br>检测正确，重启Nginx 服务生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx reload</span><br></pre></td></tr></table></figure>\n<p>然后访问xxx.xxx.xxx.xxx:80即可访问到Node程序了</p>\n<p>至此服务端Node搭建网站告一段落<br>下一步就是申请域名了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>虽然PHP是“世界上最好的语言。”<br>但是我还是喜欢JS。<br>凡是可以用Javascript来写的应用，最终都会用Javascript来写。<br>近些年Nodejs异常的火爆，因此有一些服务端也开始使用js来写了。作为前端开发工程师，nodejs也是必须要掌握的一项技能了。<br>最近在网上买了个云服务器，于是想搭个Node服务出来。</p>\n<h3 id=\"第一步：Nodejs的安装\"><a href=\"#第一步：Nodejs的安装\" class=\"headerlink\" title=\"第一步：Nodejs的安装\"></a>第一步：Nodejs的安装</h3><p>现在，在Window上和Mac上安装nodejs还是很方便的，去官网下载下来，下一步下一步下一步…就可以了。<br>可是在服务器上安装就稍微有些麻烦了，在服务端（ubuntu）安装的时候一般都是下载源码，手动编译的，这就显得有些麻烦了。<br>刚开始的时候还是有些坑。</p>\n<h4 id=\"方法一、通过源码编译安装\"><a href=\"#方法一、通过源码编译安装\" class=\"headerlink\" title=\"方法一、通过源码编译安装\"></a>方法一、通过源码编译安装</h4><p>首先将nodejs的源码安装包下载下来，然后解压编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update # 更新已安装的包 若提示权限不足，在前面加上sudo</span><br><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz # 获取nodejs最新包，版本号可选最新的</span><br><span class=\"line\">tar xvf node-v8.9.4.tar.gz # 解压nodejs源码包</span><br><span class=\"line\">cd node-v8.9.4 </span><br><span class=\"line\">./configure </span><br><span class=\"line\">make # make编译需要花较长的时间</span><br><span class=\"line\">make install # 如果发现权限异常，需要在命令前面加上sudo</span><br><span class=\"line\">cp /usr/local/bin/node /usr/sbin/ </span><br><span class=\"line\">node -v  #v8.9.4 查看当前安装的Node的版本</span><br></pre></td></tr></table></figure>\n<p>make的时候可能会报这个错误：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: failed to autodetect C++ compiler version (CXX=g++)</span><br></pre></td></tr></table></figure></p>\n<p>解决办法，手动编译； 编译结束，执行make install<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install build-essential</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<p>如果没有报错或者已解决错误，完成上述步骤，nodejs在服务端的安装以及结束了。<br>接下来通过查看版本，检测是否安装成功</p>\n<p>node安装完成<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v # 查看nodejs版本 v8.9.4</span><br><span class=\"line\">npm -v # 查看npm版本</span><br></pre></td></tr></table></figure></p>\n<p>nodejs安装目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which node # 利用which命令查看当前使用的nodejs可执行文件位置</span><br><span class=\"line\">where node # 利用where is 命令查看当前所有的nodejs可执行文件位置</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"方法二、通过二进制文件安装\"><a href=\"#方法二、通过二进制文件安装\" class=\"headerlink\" title=\"方法二、通过二进制文件安装\"></a>方法二、通过二进制文件安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz # 获取nodejs最新包，版本号可选最新的</span><br><span class=\"line\">xz -d node-v8.11.2-linux-x64tar.xz # 两次解压</span><br><span class=\"line\">tar -xvf  node-v8.11.2-linux-x64tar</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=/home/xxx/nodejs/node-v8.11.2-linux-x64/bin:$PATH # 在.bashrc 文件中追加此句，设置环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：将本地的小网站上传到服务器上去\"><a href=\"#第二步：将本地的小网站上传到服务器上去\" class=\"headerlink\" title=\"第二步：将本地的小网站上传到服务器上去\"></a>第二步：将本地的小网站上传到服务器上去</h3><p>首先确定服务器上的网站存放目录。</p>\n<p>这里我将它放到/website/</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /Users/zsr/test ubuntu/@123.xxx.xxx.xxx:/website</span><br></pre></td></tr></table></figure>\n<p>或者用rsync</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -a /Users/zsr/* root@118.193.173.25:~/website/</span><br></pre></td></tr></table></figure>\n<p>上传过长中出了一个错误,如果是直接上传到tmp就可以，其它的目录就会报错：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp permission denied</span><br></pre></td></tr></table></figure>\n<p>网上查了下是因为权限不足，于是试了下上传到tmp目录，发现可行，确定是权限的问题之后就将自己的目录权限设置一下，就能正常上传了。<br><em>权限问题需谨慎，这里给了最高权限，实际生产环境自己调整适当的权限。</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chmod 777 ./data1</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步：安装mongodb\"><a href=\"#第三步：安装mongodb\" class=\"headerlink\" title=\"第三步：安装mongodb\"></a>第三步：安装mongodb</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install mongo</span><br></pre></td></tr></table></figure>\n<p>如果不update会报如下错误：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to locate package mongo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第四步：安装pm2\"><a href=\"#第四步：安装pm2\" class=\"headerlink\" title=\"第四步：安装pm2\"></a>第四步：安装pm2</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步：安装并配置Nginx解析\"><a href=\"#第五步：安装并配置Nginx解析\" class=\"headerlink\" title=\"第五步：安装并配置Nginx解析\"></a>第五步：安装并配置Nginx解析</h3><p>安装<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p>\n<p>查看nginx是否安装成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>配置文件路径<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/nginx</span><br></pre></td></tr></table></figure></p>\n<p>配置过程中遇到个坑，老是返回hello nginx页面</p>\n<p>解决办法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注释掉</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/nginx.conf </span><br><span class=\"line\"></span><br><span class=\"line\">里面的 </span><br><span class=\"line\"></span><br><span class=\"line\">include /etc/nginx/sites-enabled/* </span><br><span class=\"line\"></span><br><span class=\"line\">这一行</span><br></pre></td></tr></table></figure></p>\n<p>然后增加如下nginx配置，将80端口反代理到项目端口<br>比如我在服务端写了个简单的node程序，端口为3000</p>\n<p>配置代理如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name xxx.xxx.xxx.xxx;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://xxx.xxx.xxx.xxx:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完毕，检测Nginx配置是否正确</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n<p>检测错误，则对应具体信息做修改<br>检测正确，重启Nginx 服务生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx reload</span><br></pre></td></tr></table></figure>\n<p>然后访问xxx.xxx.xxx.xxx:80即可访问到Node程序了</p>\n<p>至此服务端Node搭建网站告一段落<br>下一步就是申请域名了。</p>\n"},{"title":"Javascript对象","date":"2016-10-10T16:00:00.000Z","_content":"\n《JavaScript高级程序设计学习笔记》之Javascript对象。\n面向对象（Object-Oriented, OO）的语言有一个标志，那就是它们都有类的概念\n而通过类可以创建任意多个具有相同属性和方法的对象。\nECMAScript没有类的概念，因此它的对象也与机遇类的语言中的对象有所不同\n**ES6新增了对象Class的语法糖，这里不讨论ES6**\n\n\n### 理解对象\n\n1.对象\n\n``` javascript\nvar person = new Object();\n\nperson.name = \"jack\";\n\nperson.sayName = function(){  \n  return this.name;\n}\n```\n\n2.属性 \n\nECMAScript中有两种属性\n\n1）数据属性，数据属性有4个描述其行为的特性\n\n``` html\n[[Configurable]]:表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性改为访问器属性。\n\n[[Enumerable]]:能否通过for-in遍历\n\n[[Writabe]]:是否能修改属性的值\n\n[[value]]:包含这个属性的数据值。从这个位置读属性值，写属性值的时候把新的值保存在这个位置。默认为undefined\n```\n\n要修改属性的默认特性必须使用ECMAScript5的Object.defineProperty()方法。\n\n``` javascript\nvar person = {};\n\nObject.defineProperty(person, \"name\", {  \n  configurable:true, //设置false之后下次用defineProperty修改此属性就会抛错  \n  value: jack\n});\n\n```\n\n2）访问器属性\n\n访问器属性不包含数据值；它们包含一对getter和setter函数；\n\n读取访问器属性的时候会调用getter函数；写入访问器属性的时候会调用setter函数\n\n访问器属性有如下4个特性\n\n``` html\n[[Configurable]]:同上数据属性\n\n[[Enumerable]]:同上数据属性\n\n[[Get]]:在读取属性的时候调用的函数。默认undefined\n\n[[Set]]:在写入属性的时候调用的函数。默认为undefined\n```\n\n3) 访问器属性不能直接定义，必须使用Object.defineProperty()来定义\n\n``` javascript\nvar book = {\n  __year:2016,\n  edition:1\t\n};\n\nObject.defineProperty(book, \"year\", {\n  get: function() {\n    return this.__year;\n  },\n  set: function(newValue) {\n    if (newValue > 2016) {\n      this.__year  = newValue;\n      this.edition += newValue - 2016;\n    }\n  }\n});\n\nbook.year = 2017;\nconsole.log(book.edition); // 2\n```\n\n3) 定义多个属性\n\nECMAScript5定义了一个Object.defineProperties()方法。利用这个方法可以通过描述符一次定义多个属性。\n\n``` javascript\nvar book = {};\n\nObject.defineProperties(book, {\n  __year: { //数据属性\n    value:2016,\n    writable:false\n  },\n  edition: { //数据属性\n    value:1,\n    writable:true\n  },\n  year: { //访问器属性\n    get: function() {\n      return this.__year;\n    },\n    set: function(newValue) {\n      if (newValue > 2016) {\n        this.__year = newValue;\n        this.edition += newValue - 2016;\n      }\n    }\n  }\n});\n```\n\n4) 读取属性的特性\n\n使用ECMAScript5的Ojbect.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。\n\n``` javascript\n//...上面的例子\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"__year\"); \nconsole.log(descriptor.value, descriptor.writable, descriptor.configurable, descriptor.value);\n\n```\n\n--------------------------------\n\n### 创建对象\n\n1.工厂模式\n\n2.构造函数模式\n\n3.原型模式\n\n4.组合使用构造函数模式和原型模式\n\n5.动态原型模式\n\n6.寄生构造函数模式\n\n7.稳妥构造函数模式\n\n---------------------------------\n\n### 继承\n\n许多OO语言都支持两种继承方式：\n\n``` html\n接口继承:继承方法签名\n\n实现继承:继承实际方法\n```\nJavaScript支持实现继承，且继承方式是依靠原型链实现的（es6的class类已经支持继承）\n\n1.原型链继承\n\n2.借用构造函数实现继承\n\n3.组合继承\n\n4.原型式继承\n\n5.寄生继承\n\n6.寄生组合式继承\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/object.md","raw":"---\ntitle: Javascript对象\ndate: 2016/10/11\ntag: js\ncategory: 技术\n---\n\n《JavaScript高级程序设计学习笔记》之Javascript对象。\n面向对象（Object-Oriented, OO）的语言有一个标志，那就是它们都有类的概念\n而通过类可以创建任意多个具有相同属性和方法的对象。\nECMAScript没有类的概念，因此它的对象也与机遇类的语言中的对象有所不同\n**ES6新增了对象Class的语法糖，这里不讨论ES6**\n\n\n### 理解对象\n\n1.对象\n\n``` javascript\nvar person = new Object();\n\nperson.name = \"jack\";\n\nperson.sayName = function(){  \n  return this.name;\n}\n```\n\n2.属性 \n\nECMAScript中有两种属性\n\n1）数据属性，数据属性有4个描述其行为的特性\n\n``` html\n[[Configurable]]:表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性改为访问器属性。\n\n[[Enumerable]]:能否通过for-in遍历\n\n[[Writabe]]:是否能修改属性的值\n\n[[value]]:包含这个属性的数据值。从这个位置读属性值，写属性值的时候把新的值保存在这个位置。默认为undefined\n```\n\n要修改属性的默认特性必须使用ECMAScript5的Object.defineProperty()方法。\n\n``` javascript\nvar person = {};\n\nObject.defineProperty(person, \"name\", {  \n  configurable:true, //设置false之后下次用defineProperty修改此属性就会抛错  \n  value: jack\n});\n\n```\n\n2）访问器属性\n\n访问器属性不包含数据值；它们包含一对getter和setter函数；\n\n读取访问器属性的时候会调用getter函数；写入访问器属性的时候会调用setter函数\n\n访问器属性有如下4个特性\n\n``` html\n[[Configurable]]:同上数据属性\n\n[[Enumerable]]:同上数据属性\n\n[[Get]]:在读取属性的时候调用的函数。默认undefined\n\n[[Set]]:在写入属性的时候调用的函数。默认为undefined\n```\n\n3) 访问器属性不能直接定义，必须使用Object.defineProperty()来定义\n\n``` javascript\nvar book = {\n  __year:2016,\n  edition:1\t\n};\n\nObject.defineProperty(book, \"year\", {\n  get: function() {\n    return this.__year;\n  },\n  set: function(newValue) {\n    if (newValue > 2016) {\n      this.__year  = newValue;\n      this.edition += newValue - 2016;\n    }\n  }\n});\n\nbook.year = 2017;\nconsole.log(book.edition); // 2\n```\n\n3) 定义多个属性\n\nECMAScript5定义了一个Object.defineProperties()方法。利用这个方法可以通过描述符一次定义多个属性。\n\n``` javascript\nvar book = {};\n\nObject.defineProperties(book, {\n  __year: { //数据属性\n    value:2016,\n    writable:false\n  },\n  edition: { //数据属性\n    value:1,\n    writable:true\n  },\n  year: { //访问器属性\n    get: function() {\n      return this.__year;\n    },\n    set: function(newValue) {\n      if (newValue > 2016) {\n        this.__year = newValue;\n        this.edition += newValue - 2016;\n      }\n    }\n  }\n});\n```\n\n4) 读取属性的特性\n\n使用ECMAScript5的Ojbect.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。\n\n``` javascript\n//...上面的例子\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"__year\"); \nconsole.log(descriptor.value, descriptor.writable, descriptor.configurable, descriptor.value);\n\n```\n\n--------------------------------\n\n### 创建对象\n\n1.工厂模式\n\n2.构造函数模式\n\n3.原型模式\n\n4.组合使用构造函数模式和原型模式\n\n5.动态原型模式\n\n6.寄生构造函数模式\n\n7.稳妥构造函数模式\n\n---------------------------------\n\n### 继承\n\n许多OO语言都支持两种继承方式：\n\n``` html\n接口继承:继承方法签名\n\n实现继承:继承实际方法\n```\nJavaScript支持实现继承，且继承方式是依靠原型链实现的（es6的class类已经支持继承）\n\n1.原型链继承\n\n2.借用构造函数实现继承\n\n3.组合继承\n\n4.原型式继承\n\n5.寄生继承\n\n6.寄生组合式继承\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"object","published":1,"updated":"2018-05-22T12:35:24.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjr001axwqtvh97fulj","content":"<p>《JavaScript高级程序设计学习笔记》之Javascript对象。<br>面向对象（Object-Oriented, OO）的语言有一个标志，那就是它们都有类的概念<br>而通过类可以创建任意多个具有相同属性和方法的对象。<br>ECMAScript没有类的概念，因此它的对象也与机遇类的语言中的对象有所不同<br><strong>ES6新增了对象Class的语法糖，这里不讨论ES6</strong></p>\n<h3 id=\"理解对象\"><a href=\"#理解对象\" class=\"headerlink\" title=\"理解对象\"></a>理解对象</h3><p>1.对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">person.name = <span class=\"string\">\"jack\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.属性 </p>\n<p>ECMAScript中有两种属性</p>\n<p>1）数据属性，数据属性有4个描述其行为的特性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[Configurable]]:表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性改为访问器属性。</span><br><span class=\"line\"></span><br><span class=\"line\">[[Enumerable]]:能否通过for-in遍历</span><br><span class=\"line\"></span><br><span class=\"line\">[[Writabe]]:是否能修改属性的值</span><br><span class=\"line\"></span><br><span class=\"line\">[[value]]:包含这个属性的数据值。从这个位置读属性值，写属性值的时候把新的值保存在这个位置。默认为undefined</span><br></pre></td></tr></table></figure>\n<p>要修改属性的默认特性必须使用ECMAScript5的Object.defineProperty()方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">\"name\"</span>, &#123;  </span><br><span class=\"line\">  configurable:<span class=\"literal\">true</span>, <span class=\"comment\">//设置false之后下次用defineProperty修改此属性就会抛错  </span></span><br><span class=\"line\">  value: jack</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2）访问器属性</p>\n<p>访问器属性不包含数据值；它们包含一对getter和setter函数；</p>\n<p>读取访问器属性的时候会调用getter函数；写入访问器属性的时候会调用setter函数</p>\n<p>访问器属性有如下4个特性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[Configurable]]:同上数据属性</span><br><span class=\"line\"></span><br><span class=\"line\">[[Enumerable]]:同上数据属性</span><br><span class=\"line\"></span><br><span class=\"line\">[[Get]]:在读取属性的时候调用的函数。默认undefined</span><br><span class=\"line\"></span><br><span class=\"line\">[[Set]]:在写入属性的时候调用的函数。默认为undefined</span><br></pre></td></tr></table></figure>\n<p>3) 访问器属性不能直接定义，必须使用Object.defineProperty()来定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">  __year:<span class=\"number\">2016</span>,</span><br><span class=\"line\">  edition:<span class=\"number\">1</span>\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book, <span class=\"string\">\"year\"</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__year;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2016</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.__year  = newValue;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.edition += newValue - <span class=\"number\">2016</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = <span class=\"number\">2017</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(book.edition); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>3) 定义多个属性</p>\n<p>ECMAScript5定义了一个Object.defineProperties()方法。利用这个方法可以通过描述符一次定义多个属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">  __year: &#123; <span class=\"comment\">//数据属性</span></span><br><span class=\"line\">    value:<span class=\"number\">2016</span>,</span><br><span class=\"line\">    writable:<span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  edition: &#123; <span class=\"comment\">//数据属性</span></span><br><span class=\"line\">    value:<span class=\"number\">1</span>,</span><br><span class=\"line\">    writable:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  year: &#123; <span class=\"comment\">//访问器属性</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2016</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.__year = newValue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.edition += newValue - <span class=\"number\">2016</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>4) 读取属性的特性</p>\n<p>使用ECMAScript5的Ojbect.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...上面的例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">\"__year\"</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(descriptor.value, descriptor.writable, descriptor.configurable, descriptor.value);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><p>1.工厂模式</p>\n<p>2.构造函数模式</p>\n<p>3.原型模式</p>\n<p>4.组合使用构造函数模式和原型模式</p>\n<p>5.动态原型模式</p>\n<p>6.寄生构造函数模式</p>\n<p>7.稳妥构造函数模式</p>\n<hr>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>许多OO语言都支持两种继承方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接口继承:继承方法签名</span><br><span class=\"line\"></span><br><span class=\"line\">实现继承:继承实际方法</span><br></pre></td></tr></table></figure>\n<p>JavaScript支持实现继承，且继承方式是依靠原型链实现的（es6的class类已经支持继承）</p>\n<p>1.原型链继承</p>\n<p>2.借用构造函数实现继承</p>\n<p>3.组合继承</p>\n<p>4.原型式继承</p>\n<p>5.寄生继承</p>\n<p>6.寄生组合式继承</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《JavaScript高级程序设计学习笔记》之Javascript对象。<br>面向对象（Object-Oriented, OO）的语言有一个标志，那就是它们都有类的概念<br>而通过类可以创建任意多个具有相同属性和方法的对象。<br>ECMAScript没有类的概念，因此它的对象也与机遇类的语言中的对象有所不同<br><strong>ES6新增了对象Class的语法糖，这里不讨论ES6</strong></p>\n<h3 id=\"理解对象\"><a href=\"#理解对象\" class=\"headerlink\" title=\"理解对象\"></a>理解对象</h3><p>1.对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">person.name = <span class=\"string\">\"jack\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.属性 </p>\n<p>ECMAScript中有两种属性</p>\n<p>1）数据属性，数据属性有4个描述其行为的特性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[Configurable]]:表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性改为访问器属性。</span><br><span class=\"line\"></span><br><span class=\"line\">[[Enumerable]]:能否通过for-in遍历</span><br><span class=\"line\"></span><br><span class=\"line\">[[Writabe]]:是否能修改属性的值</span><br><span class=\"line\"></span><br><span class=\"line\">[[value]]:包含这个属性的数据值。从这个位置读属性值，写属性值的时候把新的值保存在这个位置。默认为undefined</span><br></pre></td></tr></table></figure>\n<p>要修改属性的默认特性必须使用ECMAScript5的Object.defineProperty()方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">\"name\"</span>, &#123;  </span><br><span class=\"line\">  configurable:<span class=\"literal\">true</span>, <span class=\"comment\">//设置false之后下次用defineProperty修改此属性就会抛错  </span></span><br><span class=\"line\">  value: jack</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2）访问器属性</p>\n<p>访问器属性不包含数据值；它们包含一对getter和setter函数；</p>\n<p>读取访问器属性的时候会调用getter函数；写入访问器属性的时候会调用setter函数</p>\n<p>访问器属性有如下4个特性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[Configurable]]:同上数据属性</span><br><span class=\"line\"></span><br><span class=\"line\">[[Enumerable]]:同上数据属性</span><br><span class=\"line\"></span><br><span class=\"line\">[[Get]]:在读取属性的时候调用的函数。默认undefined</span><br><span class=\"line\"></span><br><span class=\"line\">[[Set]]:在写入属性的时候调用的函数。默认为undefined</span><br></pre></td></tr></table></figure>\n<p>3) 访问器属性不能直接定义，必须使用Object.defineProperty()来定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">  __year:<span class=\"number\">2016</span>,</span><br><span class=\"line\">  edition:<span class=\"number\">1</span>\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book, <span class=\"string\">\"year\"</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__year;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2016</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.__year  = newValue;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.edition += newValue - <span class=\"number\">2016</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = <span class=\"number\">2017</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(book.edition); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>3) 定义多个属性</p>\n<p>ECMAScript5定义了一个Object.defineProperties()方法。利用这个方法可以通过描述符一次定义多个属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">  __year: &#123; <span class=\"comment\">//数据属性</span></span><br><span class=\"line\">    value:<span class=\"number\">2016</span>,</span><br><span class=\"line\">    writable:<span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  edition: &#123; <span class=\"comment\">//数据属性</span></span><br><span class=\"line\">    value:<span class=\"number\">1</span>,</span><br><span class=\"line\">    writable:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  year: &#123; <span class=\"comment\">//访问器属性</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2016</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.__year = newValue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.edition += newValue - <span class=\"number\">2016</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>4) 读取属性的特性</p>\n<p>使用ECMAScript5的Ojbect.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...上面的例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">\"__year\"</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(descriptor.value, descriptor.writable, descriptor.configurable, descriptor.value);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><p>1.工厂模式</p>\n<p>2.构造函数模式</p>\n<p>3.原型模式</p>\n<p>4.组合使用构造函数模式和原型模式</p>\n<p>5.动态原型模式</p>\n<p>6.寄生构造函数模式</p>\n<p>7.稳妥构造函数模式</p>\n<hr>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>许多OO语言都支持两种继承方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接口继承:继承方法签名</span><br><span class=\"line\"></span><br><span class=\"line\">实现继承:继承实际方法</span><br></pre></td></tr></table></figure>\n<p>JavaScript支持实现继承，且继承方式是依靠原型链实现的（es6的class类已经支持继承）</p>\n<p>1.原型链继承</p>\n<p>2.借用构造函数实现继承</p>\n<p>3.组合继承</p>\n<p>4.原型式继承</p>\n<p>5.寄生继承</p>\n<p>6.寄生组合式继承</p>\n"},{"title":"pm2简单用法","date":"2016-03-28T16:00:00.000Z","_content":"\npm2是nodejs的进程管理工具能够让你的nodejs进程永远处于启动状态\n是nodejs项目常用的进程管理工具\n\n\n启动如下\n``` shell\nset NODE_ENV=production&& npm start\n\nset port=端口号\n```\n\n``` shell\npm2 start app.json --env production\n\npm2 restart app.json --env production\n```\n\n**linux 使用 export代替set**\n``` shell\nexport -p 列出当前的所有环境变量\n```\n\n如果使用了pm2，app.json\n\n\n### pm2正式项目配置举例\n``` \n{\n  \"apps\":[{\n    \"name\":\"appName\",\n    \"script\":\"bin/www\",\n    \"log_date_format\":\"YYYY-MM-DD HH:mm:SS\",\n    \"merge_logs\":true,\n    \"log_file\":\"../logpath/file.log\",\n    \"error_file\":\"../logpath/err.log\",\n    \"out_file\":\"../logpath/out.log\",\n    \"pid_file\":\"../logpath/file.pid\",\n    \"exec_mode\":\"fork_mode\",\n    \"watch\":true,\n    \"env\":{\n      \"NODE_ENV\":\"development\",\n      \"PORT\":80\n    },\n    \"env_test\":{\n      \"NODE_ENV\":\"test\",\n    },\n    \"env_production\":{\n      \"NODE_ENV\":\"production\",\n      \"PORT\":80\n    }\n  }]\n}\n```\n示例启动\n``` shell\npm2 start app.json --env test\n```\n\n\npm2传送门：\n\n[https://github.com/Unitech/pm2](https://github.com/Unitech/pm2)\n\nnodejs传送门：\n\n[https://nodejs.org/dist/latest-v5.x/docs/api/](https://nodejs.org/dist/latest-v5.x/docs/api/)\n\nnodejs中文传送门：\n\n[http://nodeapi.ucdok.com/#/api/](http://nodeapi.ucdok.com/#/api/)\n\n\n","source":"_posts/pm2.md","raw":"---\ntitle: pm2简单用法\ndate: 2016/03/29\ntag: [pm2,nodejs]\ncategory: 技术\n---\n\npm2是nodejs的进程管理工具能够让你的nodejs进程永远处于启动状态\n是nodejs项目常用的进程管理工具\n\n\n启动如下\n``` shell\nset NODE_ENV=production&& npm start\n\nset port=端口号\n```\n\n``` shell\npm2 start app.json --env production\n\npm2 restart app.json --env production\n```\n\n**linux 使用 export代替set**\n``` shell\nexport -p 列出当前的所有环境变量\n```\n\n如果使用了pm2，app.json\n\n\n### pm2正式项目配置举例\n``` \n{\n  \"apps\":[{\n    \"name\":\"appName\",\n    \"script\":\"bin/www\",\n    \"log_date_format\":\"YYYY-MM-DD HH:mm:SS\",\n    \"merge_logs\":true,\n    \"log_file\":\"../logpath/file.log\",\n    \"error_file\":\"../logpath/err.log\",\n    \"out_file\":\"../logpath/out.log\",\n    \"pid_file\":\"../logpath/file.pid\",\n    \"exec_mode\":\"fork_mode\",\n    \"watch\":true,\n    \"env\":{\n      \"NODE_ENV\":\"development\",\n      \"PORT\":80\n    },\n    \"env_test\":{\n      \"NODE_ENV\":\"test\",\n    },\n    \"env_production\":{\n      \"NODE_ENV\":\"production\",\n      \"PORT\":80\n    }\n  }]\n}\n```\n示例启动\n``` shell\npm2 start app.json --env test\n```\n\n\npm2传送门：\n\n[https://github.com/Unitech/pm2](https://github.com/Unitech/pm2)\n\nnodejs传送门：\n\n[https://nodejs.org/dist/latest-v5.x/docs/api/](https://nodejs.org/dist/latest-v5.x/docs/api/)\n\nnodejs中文传送门：\n\n[http://nodeapi.ucdok.com/#/api/](http://nodeapi.ucdok.com/#/api/)\n\n\n","slug":"pm2","published":1,"updated":"2018-05-22T12:35:24.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjt001dxwqtszxzb547","content":"<p>pm2是nodejs的进程管理工具能够让你的nodejs进程永远处于启动状态<br>是nodejs项目常用的进程管理工具</p>\n<p>启动如下<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set NODE_ENV=production&amp;&amp; npm start</span><br><span class=\"line\"></span><br><span class=\"line\">set port=端口号</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.json --env production</span><br><span class=\"line\"></span><br><span class=\"line\">pm2 restart app.json --env production</span><br></pre></td></tr></table></figure>\n<p><strong>linux 使用 export代替set</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export -p 列出当前的所有环境变量</span><br></pre></td></tr></table></figure></p>\n<p>如果使用了pm2，app.json</p>\n<h3 id=\"pm2正式项目配置举例\"><a href=\"#pm2正式项目配置举例\" class=\"headerlink\" title=\"pm2正式项目配置举例\"></a>pm2正式项目配置举例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;apps&quot;:[&#123;</span><br><span class=\"line\">    &quot;name&quot;:&quot;appName&quot;,</span><br><span class=\"line\">    &quot;script&quot;:&quot;bin/www&quot;,</span><br><span class=\"line\">    &quot;log_date_format&quot;:&quot;YYYY-MM-DD HH:mm:SS&quot;,</span><br><span class=\"line\">    &quot;merge_logs&quot;:true,</span><br><span class=\"line\">    &quot;log_file&quot;:&quot;../logpath/file.log&quot;,</span><br><span class=\"line\">    &quot;error_file&quot;:&quot;../logpath/err.log&quot;,</span><br><span class=\"line\">    &quot;out_file&quot;:&quot;../logpath/out.log&quot;,</span><br><span class=\"line\">    &quot;pid_file&quot;:&quot;../logpath/file.pid&quot;,</span><br><span class=\"line\">    &quot;exec_mode&quot;:&quot;fork_mode&quot;,</span><br><span class=\"line\">    &quot;watch&quot;:true,</span><br><span class=\"line\">    &quot;env&quot;:&#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;:&quot;development&quot;,</span><br><span class=\"line\">      &quot;PORT&quot;:80</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;env_test&quot;:&#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;:&quot;test&quot;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;env_production&quot;:&#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;:&quot;production&quot;,</span><br><span class=\"line\">      &quot;PORT&quot;:80</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例启动<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.json --env test</span><br></pre></td></tr></table></figure></p>\n<p>pm2传送门：</p>\n<p><a href=\"https://github.com/Unitech/pm2\" target=\"_blank\" rel=\"noopener\">https://github.com/Unitech/pm2</a></p>\n<p>nodejs传送门：</p>\n<p><a href=\"https://nodejs.org/dist/latest-v5.x/docs/api/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/latest-v5.x/docs/api/</a></p>\n<p>nodejs中文传送门：</p>\n<p><a href=\"http://nodeapi.ucdok.com/#/api/\" target=\"_blank\" rel=\"noopener\">http://nodeapi.ucdok.com/#/api/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>pm2是nodejs的进程管理工具能够让你的nodejs进程永远处于启动状态<br>是nodejs项目常用的进程管理工具</p>\n<p>启动如下<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set NODE_ENV=production&amp;&amp; npm start</span><br><span class=\"line\"></span><br><span class=\"line\">set port=端口号</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.json --env production</span><br><span class=\"line\"></span><br><span class=\"line\">pm2 restart app.json --env production</span><br></pre></td></tr></table></figure>\n<p><strong>linux 使用 export代替set</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export -p 列出当前的所有环境变量</span><br></pre></td></tr></table></figure></p>\n<p>如果使用了pm2，app.json</p>\n<h3 id=\"pm2正式项目配置举例\"><a href=\"#pm2正式项目配置举例\" class=\"headerlink\" title=\"pm2正式项目配置举例\"></a>pm2正式项目配置举例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;apps&quot;:[&#123;</span><br><span class=\"line\">    &quot;name&quot;:&quot;appName&quot;,</span><br><span class=\"line\">    &quot;script&quot;:&quot;bin/www&quot;,</span><br><span class=\"line\">    &quot;log_date_format&quot;:&quot;YYYY-MM-DD HH:mm:SS&quot;,</span><br><span class=\"line\">    &quot;merge_logs&quot;:true,</span><br><span class=\"line\">    &quot;log_file&quot;:&quot;../logpath/file.log&quot;,</span><br><span class=\"line\">    &quot;error_file&quot;:&quot;../logpath/err.log&quot;,</span><br><span class=\"line\">    &quot;out_file&quot;:&quot;../logpath/out.log&quot;,</span><br><span class=\"line\">    &quot;pid_file&quot;:&quot;../logpath/file.pid&quot;,</span><br><span class=\"line\">    &quot;exec_mode&quot;:&quot;fork_mode&quot;,</span><br><span class=\"line\">    &quot;watch&quot;:true,</span><br><span class=\"line\">    &quot;env&quot;:&#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;:&quot;development&quot;,</span><br><span class=\"line\">      &quot;PORT&quot;:80</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;env_test&quot;:&#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;:&quot;test&quot;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;env_production&quot;:&#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;:&quot;production&quot;,</span><br><span class=\"line\">      &quot;PORT&quot;:80</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例启动<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.json --env test</span><br></pre></td></tr></table></figure></p>\n<p>pm2传送门：</p>\n<p><a href=\"https://github.com/Unitech/pm2\" target=\"_blank\" rel=\"noopener\">https://github.com/Unitech/pm2</a></p>\n<p>nodejs传送门：</p>\n<p><a href=\"https://nodejs.org/dist/latest-v5.x/docs/api/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/latest-v5.x/docs/api/</a></p>\n<p>nodejs中文传送门：</p>\n<p><a href=\"http://nodeapi.ucdok.com/#/api/\" target=\"_blank\" rel=\"noopener\">http://nodeapi.ucdok.com/#/api/</a></p>\n"},{"layout":"default","title":"一个localhost引发的血案。","date":"2018-05-21T11:41:48.000Z","_content":"\n## {{page.title}}\n\n本来一天都开开心心，直到跑了一个npm run dev。\n原本百分百没有问题的项目，npm run dev的时候某个接口突然跑不通了，一直报504错误。\n看了下代码，这个接口是做了本地代理的mock数据接口，之前一直好好的。\n查了很久，检查了N遍代码，切了master分支，皆不行。不得已让同事跑了一下此项目，结果 —— 在他们那能正常运行。\n嗯，既然如此，真相只有一个：本地环境的问题。\n于是开始了漫长的试错与调试。\n尝试了如下方法，重装nodejs（怀疑是node 10.0.0的问题），重装node_module，重装gulp，干掉nginx，干掉其它一切可能占用端口的软件，甚至最后重启了电脑。结果 —— 全部铺盖。\n\n两个小时以后。。。\n\n算了，去node_module看源码吧（基本上80%把握确定是代理的问题）\n于是决定重头开始，仔细分析控制台的错误码，错误信息如下：\n\n```html\n[HPM] Error occurred while trying to proxy request /repay/get_api_info from localhost:8084 to http://localhost:8088 (ENOTFOUND) (https://nodejs.org/api/errors.html#errors_common_system_errors)\n```\n拿着此错误码google了一下，无果。大家遇到的错误都和我的不一样。即使有一样的也没有人解决。\n\n算了，还是去看看代理的源码吧。于是找到如下文件。\n\n```html\n/node_modules/http-proxy-middleware/lib/index.js\n```\n\n经过人肉搜索，终于找到抛出错误信息的位置（如下代码所示）。\n原来这个错误是经过加工的，而且真正抛出错误的地方还不是此模块，而是它依赖的另外一个模块（/node_modules/http-proxy）\n先不管这些，先将错误信息打印出来看看详细错误。（如下的console.log(err)）\n\n```javascript\nfunction logError(err, req, res) {\n  var hostname = (req.headers && req.headers.host) || (req.hostname || req.host);     // (websocket) || (node0.10 || node 4/5)\n  var target = proxyOptions.target.host || proxyOptions.target;\n  var errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n  // ------------>  在此处打印错误日志\n  console.log(err)\n  logger.error('[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)', req.url, hostname, target, err.code, errReference);\n}\n```\n\n最终打印错误信息如下：\n\n```html\n{ Error: getaddrinfo ENOTFOUND localhost localhost:8088\n    at errnoException (dns.js:50:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)\n  code: 'ENOTFOUND',\n  errno: 'ENOTFOUND',\n  syscall: 'getaddrinfo',\n  hostname: 'localhost',\n  host: 'localhost',\n  port: '8088' }\n```\n\ngoogle搜索了一下关键字 *getaddrinfo ENOTFOUND localhost*\n找到这个报错的原因，是本地的host没有绑定\n\n```shell\n127.0.0.1 localhost\n```\n\n嗯？应该有的啊，算了去hosts看看，这一看才发现不知道什么时候被注释掉了。\n于是，去除注释，npm run dev，\n咦？好了？wtf!!!!.\n\n事情经过就是这样，就这样解决了。\n\n### 分析总结\n分析：\n本来这个127.0.0.1 localhost是存在的，只是因为之前装了一个SwitchHosts软件，SwitchHosts会修改原来的文件/etc/hosts，将其内容剪切到另外的位置，也就是SwitchHosts软件存放host的位置的。同时会将默认的配置选项开启，所以正常情况是不会对原有的host造成影响的。\n于是我检查了一下我的host文件配置，发现原来是自己把SwitchHosts的那个基础配置选项关掉了，所以才导致找不到这个localhost。\n解决办法将其打开即可（当然，直接在hosts文件补上也行）。\n\n总结：\n此问题的解决和运气有一定的关系，同时，自己的解决问题的思路也有问题，浪费了很多时间。\n如果一开始就认真分析错误日志，可能早就解决了。\n\n---全文完---\n\n\n\n\n","source":"_posts/proxy-error.md","raw":"---\nlayout: default\ntitle: 一个localhost引发的血案。\ndate: 2018-05-21 19:41:48\ntags: [npm,proxy]\ncategory: 技术\n---\n\n## {{page.title}}\n\n本来一天都开开心心，直到跑了一个npm run dev。\n原本百分百没有问题的项目，npm run dev的时候某个接口突然跑不通了，一直报504错误。\n看了下代码，这个接口是做了本地代理的mock数据接口，之前一直好好的。\n查了很久，检查了N遍代码，切了master分支，皆不行。不得已让同事跑了一下此项目，结果 —— 在他们那能正常运行。\n嗯，既然如此，真相只有一个：本地环境的问题。\n于是开始了漫长的试错与调试。\n尝试了如下方法，重装nodejs（怀疑是node 10.0.0的问题），重装node_module，重装gulp，干掉nginx，干掉其它一切可能占用端口的软件，甚至最后重启了电脑。结果 —— 全部铺盖。\n\n两个小时以后。。。\n\n算了，去node_module看源码吧（基本上80%把握确定是代理的问题）\n于是决定重头开始，仔细分析控制台的错误码，错误信息如下：\n\n```html\n[HPM] Error occurred while trying to proxy request /repay/get_api_info from localhost:8084 to http://localhost:8088 (ENOTFOUND) (https://nodejs.org/api/errors.html#errors_common_system_errors)\n```\n拿着此错误码google了一下，无果。大家遇到的错误都和我的不一样。即使有一样的也没有人解决。\n\n算了，还是去看看代理的源码吧。于是找到如下文件。\n\n```html\n/node_modules/http-proxy-middleware/lib/index.js\n```\n\n经过人肉搜索，终于找到抛出错误信息的位置（如下代码所示）。\n原来这个错误是经过加工的，而且真正抛出错误的地方还不是此模块，而是它依赖的另外一个模块（/node_modules/http-proxy）\n先不管这些，先将错误信息打印出来看看详细错误。（如下的console.log(err)）\n\n```javascript\nfunction logError(err, req, res) {\n  var hostname = (req.headers && req.headers.host) || (req.hostname || req.host);     // (websocket) || (node0.10 || node 4/5)\n  var target = proxyOptions.target.host || proxyOptions.target;\n  var errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n  // ------------>  在此处打印错误日志\n  console.log(err)\n  logger.error('[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)', req.url, hostname, target, err.code, errReference);\n}\n```\n\n最终打印错误信息如下：\n\n```html\n{ Error: getaddrinfo ENOTFOUND localhost localhost:8088\n    at errnoException (dns.js:50:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)\n  code: 'ENOTFOUND',\n  errno: 'ENOTFOUND',\n  syscall: 'getaddrinfo',\n  hostname: 'localhost',\n  host: 'localhost',\n  port: '8088' }\n```\n\ngoogle搜索了一下关键字 *getaddrinfo ENOTFOUND localhost*\n找到这个报错的原因，是本地的host没有绑定\n\n```shell\n127.0.0.1 localhost\n```\n\n嗯？应该有的啊，算了去hosts看看，这一看才发现不知道什么时候被注释掉了。\n于是，去除注释，npm run dev，\n咦？好了？wtf!!!!.\n\n事情经过就是这样，就这样解决了。\n\n### 分析总结\n分析：\n本来这个127.0.0.1 localhost是存在的，只是因为之前装了一个SwitchHosts软件，SwitchHosts会修改原来的文件/etc/hosts，将其内容剪切到另外的位置，也就是SwitchHosts软件存放host的位置的。同时会将默认的配置选项开启，所以正常情况是不会对原有的host造成影响的。\n于是我检查了一下我的host文件配置，发现原来是自己把SwitchHosts的那个基础配置选项关掉了，所以才导致找不到这个localhost。\n解决办法将其打开即可（当然，直接在hosts文件补上也行）。\n\n总结：\n此问题的解决和运气有一定的关系，同时，自己的解决问题的思路也有问题，浪费了很多时间。\n如果一开始就认真分析错误日志，可能早就解决了。\n\n---全文完---\n\n\n\n\n","slug":"proxy-error","published":1,"updated":"2018-05-22T12:35:24.449Z","comments":1,"photos":[],"link":"","_id":"cji1sigju001gxwqtg81bahk6","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>本来一天都开开心心，直到跑了一个npm run dev。<br>原本百分百没有问题的项目，npm run dev的时候某个接口突然跑不通了，一直报504错误。<br>看了下代码，这个接口是做了本地代理的mock数据接口，之前一直好好的。<br>查了很久，检查了N遍代码，切了master分支，皆不行。不得已让同事跑了一下此项目，结果 —— 在他们那能正常运行。<br>嗯，既然如此，真相只有一个：本地环境的问题。<br>于是开始了漫长的试错与调试。<br>尝试了如下方法，重装nodejs（怀疑是node 10.0.0的问题），重装node_module，重装gulp，干掉nginx，干掉其它一切可能占用端口的软件，甚至最后重启了电脑。结果 —— 全部铺盖。</p>\n<p>两个小时以后。。。</p>\n<p>算了，去node_module看源码吧（基本上80%把握确定是代理的问题）<br>于是决定重头开始，仔细分析控制台的错误码，错误信息如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[HPM] Error occurred while trying to proxy request /repay/get_api_info from localhost:8084 to http://localhost:8088 (ENOTFOUND) (https://nodejs.org/api/errors.html#errors_common_system_errors)</span><br></pre></td></tr></table></figure>\n<p>拿着此错误码google了一下，无果。大家遇到的错误都和我的不一样。即使有一样的也没有人解决。</p>\n<p>算了，还是去看看代理的源码吧。于是找到如下文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/node_modules/http-proxy-middleware/lib/index.js</span><br></pre></td></tr></table></figure>\n<p>经过人肉搜索，终于找到抛出错误信息的位置（如下代码所示）。<br>原来这个错误是经过加工的，而且真正抛出错误的地方还不是此模块，而是它依赖的另外一个模块（/node_modules/http-proxy）<br>先不管这些，先将错误信息打印出来看看详细错误。（如下的console.log(err)）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logError</span>(<span class=\"params\">err, req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hostname = (req.headers &amp;&amp; req.headers.host) || (req.hostname || req.host);     <span class=\"comment\">// (websocket) || (node0.10 || node 4/5)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = proxyOptions.target.host || proxyOptions.target;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> errReference = <span class=\"string\">'https://nodejs.org/api/errors.html#errors_common_system_errors'</span>; <span class=\"comment\">// link to Node Common Systems Errors page</span></span><br><span class=\"line\">  <span class=\"comment\">// ------------&gt;  在此处打印错误日志</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  logger.error(<span class=\"string\">'[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)'</span>, req.url, hostname, target, err.code, errReference);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终打印错误信息如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: getaddrinfo ENOTFOUND localhost localhost:8088</span><br><span class=\"line\">    at errnoException (dns.js:50:10)</span><br><span class=\"line\">    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)</span><br><span class=\"line\">  code: 'ENOTFOUND',</span><br><span class=\"line\">  errno: 'ENOTFOUND',</span><br><span class=\"line\">  syscall: 'getaddrinfo',</span><br><span class=\"line\">  hostname: 'localhost',</span><br><span class=\"line\">  host: 'localhost',</span><br><span class=\"line\">  port: '8088' &#125;</span><br></pre></td></tr></table></figure>\n<p>google搜索了一下关键字 <em>getaddrinfo ENOTFOUND localhost</em><br>找到这个报错的原因，是本地的host没有绑定</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 localhost</span><br></pre></td></tr></table></figure>\n<p>嗯？应该有的啊，算了去hosts看看，这一看才发现不知道什么时候被注释掉了。<br>于是，去除注释，npm run dev，<br>咦？好了？wtf!!!!.</p>\n<p>事情经过就是这样，就这样解决了。</p>\n<h3 id=\"分析总结\"><a href=\"#分析总结\" class=\"headerlink\" title=\"分析总结\"></a>分析总结</h3><p>分析：<br>本来这个127.0.0.1 localhost是存在的，只是因为之前装了一个SwitchHosts软件，SwitchHosts会修改原来的文件/etc/hosts，将其内容剪切到另外的位置，也就是SwitchHosts软件存放host的位置的。同时会将默认的配置选项开启，所以正常情况是不会对原有的host造成影响的。<br>于是我检查了一下我的host文件配置，发现原来是自己把SwitchHosts的那个基础配置选项关掉了，所以才导致找不到这个localhost。<br>解决办法将其打开即可（当然，直接在hosts文件补上也行）。</p>\n<p>总结：<br>此问题的解决和运气有一定的关系，同时，自己的解决问题的思路也有问题，浪费了很多时间。<br>如果一开始就认真分析错误日志，可能早就解决了。</p>\n<p>—全文完—</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>本来一天都开开心心，直到跑了一个npm run dev。<br>原本百分百没有问题的项目，npm run dev的时候某个接口突然跑不通了，一直报504错误。<br>看了下代码，这个接口是做了本地代理的mock数据接口，之前一直好好的。<br>查了很久，检查了N遍代码，切了master分支，皆不行。不得已让同事跑了一下此项目，结果 —— 在他们那能正常运行。<br>嗯，既然如此，真相只有一个：本地环境的问题。<br>于是开始了漫长的试错与调试。<br>尝试了如下方法，重装nodejs（怀疑是node 10.0.0的问题），重装node_module，重装gulp，干掉nginx，干掉其它一切可能占用端口的软件，甚至最后重启了电脑。结果 —— 全部铺盖。</p>\n<p>两个小时以后。。。</p>\n<p>算了，去node_module看源码吧（基本上80%把握确定是代理的问题）<br>于是决定重头开始，仔细分析控制台的错误码，错误信息如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[HPM] Error occurred while trying to proxy request /repay/get_api_info from localhost:8084 to http://localhost:8088 (ENOTFOUND) (https://nodejs.org/api/errors.html#errors_common_system_errors)</span><br></pre></td></tr></table></figure>\n<p>拿着此错误码google了一下，无果。大家遇到的错误都和我的不一样。即使有一样的也没有人解决。</p>\n<p>算了，还是去看看代理的源码吧。于是找到如下文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/node_modules/http-proxy-middleware/lib/index.js</span><br></pre></td></tr></table></figure>\n<p>经过人肉搜索，终于找到抛出错误信息的位置（如下代码所示）。<br>原来这个错误是经过加工的，而且真正抛出错误的地方还不是此模块，而是它依赖的另外一个模块（/node_modules/http-proxy）<br>先不管这些，先将错误信息打印出来看看详细错误。（如下的console.log(err)）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logError</span>(<span class=\"params\">err, req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hostname = (req.headers &amp;&amp; req.headers.host) || (req.hostname || req.host);     <span class=\"comment\">// (websocket) || (node0.10 || node 4/5)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = proxyOptions.target.host || proxyOptions.target;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> errReference = <span class=\"string\">'https://nodejs.org/api/errors.html#errors_common_system_errors'</span>; <span class=\"comment\">// link to Node Common Systems Errors page</span></span><br><span class=\"line\">  <span class=\"comment\">// ------------&gt;  在此处打印错误日志</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  logger.error(<span class=\"string\">'[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)'</span>, req.url, hostname, target, err.code, errReference);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终打印错误信息如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: getaddrinfo ENOTFOUND localhost localhost:8088</span><br><span class=\"line\">    at errnoException (dns.js:50:10)</span><br><span class=\"line\">    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)</span><br><span class=\"line\">  code: 'ENOTFOUND',</span><br><span class=\"line\">  errno: 'ENOTFOUND',</span><br><span class=\"line\">  syscall: 'getaddrinfo',</span><br><span class=\"line\">  hostname: 'localhost',</span><br><span class=\"line\">  host: 'localhost',</span><br><span class=\"line\">  port: '8088' &#125;</span><br></pre></td></tr></table></figure>\n<p>google搜索了一下关键字 <em>getaddrinfo ENOTFOUND localhost</em><br>找到这个报错的原因，是本地的host没有绑定</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 localhost</span><br></pre></td></tr></table></figure>\n<p>嗯？应该有的啊，算了去hosts看看，这一看才发现不知道什么时候被注释掉了。<br>于是，去除注释，npm run dev，<br>咦？好了？wtf!!!!.</p>\n<p>事情经过就是这样，就这样解决了。</p>\n<h3 id=\"分析总结\"><a href=\"#分析总结\" class=\"headerlink\" title=\"分析总结\"></a>分析总结</h3><p>分析：<br>本来这个127.0.0.1 localhost是存在的，只是因为之前装了一个SwitchHosts软件，SwitchHosts会修改原来的文件/etc/hosts，将其内容剪切到另外的位置，也就是SwitchHosts软件存放host的位置的。同时会将默认的配置选项开启，所以正常情况是不会对原有的host造成影响的。<br>于是我检查了一下我的host文件配置，发现原来是自己把SwitchHosts的那个基础配置选项关掉了，所以才导致找不到这个localhost。<br>解决办法将其打开即可（当然，直接在hosts文件补上也行）。</p>\n<p>总结：<br>此问题的解决和运气有一定的关系，同时，自己的解决问题的思路也有问题，浪费了很多时间。<br>如果一开始就认真分析错误日志，可能早就解决了。</p>\n<p>—全文完—</p>\n"},{"title":"svn入门","date":"2017-04-10T16:00:00.000Z","_content":"\n\nsvn\n\n### Mac上用命令行使用svn\n\n``` shell\nsvn checkout：将服务器代码完整的下载到本地\n\nsvn commit：将本地修改的内容提交到服务器\n\nsvn update：将服务器最新代码下载到本地\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/svn.md","raw":"---\ntitle: svn入门\ntag: svn\ndate: 2017/04/11\ncategory: 技术\n---\n\n\nsvn\n\n### Mac上用命令行使用svn\n\n``` shell\nsvn checkout：将服务器代码完整的下载到本地\n\nsvn commit：将本地修改的内容提交到服务器\n\nsvn update：将服务器最新代码下载到本地\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"svn","published":1,"updated":"2018-05-22T12:35:24.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigjw001jxwqtudz9q97k","content":"<p>svn</p>\n<h3 id=\"Mac上用命令行使用svn\"><a href=\"#Mac上用命令行使用svn\" class=\"headerlink\" title=\"Mac上用命令行使用svn\"></a>Mac上用命令行使用svn</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn checkout：将服务器代码完整的下载到本地</span><br><span class=\"line\"></span><br><span class=\"line\">svn commit：将本地修改的内容提交到服务器</span><br><span class=\"line\"></span><br><span class=\"line\">svn update：将服务器最新代码下载到本地</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>svn</p>\n<h3 id=\"Mac上用命令行使用svn\"><a href=\"#Mac上用命令行使用svn\" class=\"headerlink\" title=\"Mac上用命令行使用svn\"></a>Mac上用命令行使用svn</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn checkout：将服务器代码完整的下载到本地</span><br><span class=\"line\"></span><br><span class=\"line\">svn commit：将本地修改的内容提交到服务器</span><br><span class=\"line\"></span><br><span class=\"line\">svn update：将服务器最新代码下载到本地</span><br></pre></td></tr></table></figure>\n"},{"layout":"default","title":"使用npm版本锁定的必要性","date":"2018-05-22T11:33:33.000Z","_content":"\n## {{page.title}}\n\n### 事情的背景\n我司的项目基本上都是后端java，前端随意。\n前端什么技术都有，react、vue、jquery、regular、seajs...\n好在构建工具不复杂，也就是用的gulp + webpack\n其实，还算是比较灵活了，虽然没有用nodejs，但是java的ftl模板也足够支持前后端分离了。\n\n发布是走的公司运维开发的发布系统，由于**历史原因**，发布构建的时候，每修改一次代码需要分两步发版，分别是：\n前端发布：webpack+gulp构建，然后发前端静态资源到cdn\n后端发布：webpack+gulp构建，然后发ftl文件以及java文件到源站。\n\n并且两次发布所在的目录是不同的，因此也就需要执行npm install - npm build多次，也就意味着有两套node_modules\n\n\n### 问题\n\n当然了，还是历史原因，我们项目中有部分代码是在本地构建之后提交到版本库的。\n而本次我的任务就是解决历史问题，然后将代码本地构建改为发版构建。\n\n于是，问题来了。\n\n我在将本地构建改为发布构建的时候突然发现某个js资源404了，经检查，原来是两次构建的文件hash值不一样。\n也就是说，前端发布的时候和后端发布的时候两次编译出来的文件hash值不一样。\n\n经过多次测试，发现：\n我本地是好的，多次构建都是完全一样的，哪怕是删除了package.json、node_modules\n而同样的某一台构建服务器上却是两次构建不一样，并且两次和我本机的构建hash也不一样。\n另外其它的构建服务器上却是两次构建一样，并且两次和我本机的构建hash不一样。\n\n### 分析\nhash值是根据文件内容算出来的，理论上来说不一样的文件内容计算出来的结果一定是不一样的。\n因此，一定是编译出来的文件某个地方不一样才导致的hash不同。\n\n既然有了猜想，便去验证一番，经过一番折腾终于拿到了构建机器两次构建之后的源码\n后经过一番对比，发现文件大部分内容都是一样的，只有极少部分变量名不同\n其中有一个地方引起了我的注意，那就是某个es6转换成es5代码之后的某个方法有些异常，虽然结果一样，但是语法、方法结构却不一样\n\n难道是babel？\n同样版本的构建为什么会出现不一样的文件？\n\n等等，同样的构建？突然想到，npm的package.json版本管理的原理。\n\n我们的package.json文件都是用的上尖括号（范版本）\n```shell\n\"dependencies\": {\n  \"vue\": \"^2.4.2\",\n  \"vue-resource\": \"^1.3.4\",\n  \"vue-router\": \"^2.7.0\",\n  \"vuex\": \"^3.0.1\"\n},\n```\n\n尖括号的意思是，匹配所有的次要版本，也就是说：\n\n```html\n如果当前配置的是 ^1.1.1\n当依赖包最新版本为 1.x.x的时候，下次npm install就会自动安装最新的版本。\n但是会忽略 2.0.0及以上版本\n```\n\n除此之外还有一种匹配模式是波浪号，匹配第二次要的版本\n\n```shell\n\"dependencies\": {\n  \"vue\": \"~2.4.2\",\n  \"vue-resource\": \"~1.3.4\",\n  \"vue-router\": \"~2.7.0\",\n  \"vuex\": \"~3.0.1\"\n},\n```\n\n比如\n\n```html\n如果~1.1.1，当最新版本为 1.1.x的时候，下次npm install就会自动更新最新的版本\n但是会忽略 2.2.0及以上版本\n```\n\n莫非是因为babel升级了一个小版本？而我们的node_module有的更新了，有的没有更新？\n这个还真的很有可能，因为我们的构建机器上的依赖包是优先缓存的，而之前为了做实验我做了清缓存的操作，有可能是有的更新了缓存，有的却没有更新。\n\n因为有了这个猜想，便去验证一番，如果是安装包的问题，那么是不是说只需要做到几次安装的node_module下的依赖包版本一致，就能解决这个问题了呢？\n\n### 实践\n\n解决版本锁定也很简单，加个npm-lock就可以了\n但是npm本身支持lock是在5.0.0以上的，而我们构建服务器因为nodejs版本还是6.x.x，因此对应npm可能不支持npm-lock\n好在我们发版构建工具支持yarn，yarn本身就支持yarn-lock，只需要把yarn-lock提交上去就可以了（之前由于历史原因，将yarn-lock忽略掉了）\n\n于是，我把yarn-lock提交上去之后，咦？好了！\n嗯，问题就这样好了，两次构建出来的hash值不但一致了，就连和我本地构建出来的文件hash也是一致的了。\n\n至此时，本人内心很平静，毫无波澜。\n\n### 总结与分析\n\n很明显，问题就是出在依赖包，因为使用了范版本，不同的机器安装的包是不一样的，那么构建出来的代码（尤其是压缩、babel等语法解析作用的包处理之后的代码）是非常可能不一样的。\n\nnpm早期版本其实也有解决这个问题的方案，那就是 npm shrinkwrap ，这个也是用作版本锁定的，并且到目前为止也是兼容的，其优先级高于npm-lock\n当然，最简单的还是使用yarn，至少可以少跑一个命令。\n\n以后为了解决各种奇怪的编译问题，还是做好版本锁定的好。\n\n\n\n### 补充\n\nnpm安装包加lock可以提升安全性，更好的让开发人员对安装包进行代码review，减少恶意安装包肆意更新带来的安全隐患\n\n\n\n--- 全文完 ---\n\n","source":"_posts/npm-lock.md","raw":"---\nlayout: default\ntitle: 使用npm版本锁定的必要性\ndate: 2018-05-22 19:33:33\ntags:\n---\n\n## {{page.title}}\n\n### 事情的背景\n我司的项目基本上都是后端java，前端随意。\n前端什么技术都有，react、vue、jquery、regular、seajs...\n好在构建工具不复杂，也就是用的gulp + webpack\n其实，还算是比较灵活了，虽然没有用nodejs，但是java的ftl模板也足够支持前后端分离了。\n\n发布是走的公司运维开发的发布系统，由于**历史原因**，发布构建的时候，每修改一次代码需要分两步发版，分别是：\n前端发布：webpack+gulp构建，然后发前端静态资源到cdn\n后端发布：webpack+gulp构建，然后发ftl文件以及java文件到源站。\n\n并且两次发布所在的目录是不同的，因此也就需要执行npm install - npm build多次，也就意味着有两套node_modules\n\n\n### 问题\n\n当然了，还是历史原因，我们项目中有部分代码是在本地构建之后提交到版本库的。\n而本次我的任务就是解决历史问题，然后将代码本地构建改为发版构建。\n\n于是，问题来了。\n\n我在将本地构建改为发布构建的时候突然发现某个js资源404了，经检查，原来是两次构建的文件hash值不一样。\n也就是说，前端发布的时候和后端发布的时候两次编译出来的文件hash值不一样。\n\n经过多次测试，发现：\n我本地是好的，多次构建都是完全一样的，哪怕是删除了package.json、node_modules\n而同样的某一台构建服务器上却是两次构建不一样，并且两次和我本机的构建hash也不一样。\n另外其它的构建服务器上却是两次构建一样，并且两次和我本机的构建hash不一样。\n\n### 分析\nhash值是根据文件内容算出来的，理论上来说不一样的文件内容计算出来的结果一定是不一样的。\n因此，一定是编译出来的文件某个地方不一样才导致的hash不同。\n\n既然有了猜想，便去验证一番，经过一番折腾终于拿到了构建机器两次构建之后的源码\n后经过一番对比，发现文件大部分内容都是一样的，只有极少部分变量名不同\n其中有一个地方引起了我的注意，那就是某个es6转换成es5代码之后的某个方法有些异常，虽然结果一样，但是语法、方法结构却不一样\n\n难道是babel？\n同样版本的构建为什么会出现不一样的文件？\n\n等等，同样的构建？突然想到，npm的package.json版本管理的原理。\n\n我们的package.json文件都是用的上尖括号（范版本）\n```shell\n\"dependencies\": {\n  \"vue\": \"^2.4.2\",\n  \"vue-resource\": \"^1.3.4\",\n  \"vue-router\": \"^2.7.0\",\n  \"vuex\": \"^3.0.1\"\n},\n```\n\n尖括号的意思是，匹配所有的次要版本，也就是说：\n\n```html\n如果当前配置的是 ^1.1.1\n当依赖包最新版本为 1.x.x的时候，下次npm install就会自动安装最新的版本。\n但是会忽略 2.0.0及以上版本\n```\n\n除此之外还有一种匹配模式是波浪号，匹配第二次要的版本\n\n```shell\n\"dependencies\": {\n  \"vue\": \"~2.4.2\",\n  \"vue-resource\": \"~1.3.4\",\n  \"vue-router\": \"~2.7.0\",\n  \"vuex\": \"~3.0.1\"\n},\n```\n\n比如\n\n```html\n如果~1.1.1，当最新版本为 1.1.x的时候，下次npm install就会自动更新最新的版本\n但是会忽略 2.2.0及以上版本\n```\n\n莫非是因为babel升级了一个小版本？而我们的node_module有的更新了，有的没有更新？\n这个还真的很有可能，因为我们的构建机器上的依赖包是优先缓存的，而之前为了做实验我做了清缓存的操作，有可能是有的更新了缓存，有的却没有更新。\n\n因为有了这个猜想，便去验证一番，如果是安装包的问题，那么是不是说只需要做到几次安装的node_module下的依赖包版本一致，就能解决这个问题了呢？\n\n### 实践\n\n解决版本锁定也很简单，加个npm-lock就可以了\n但是npm本身支持lock是在5.0.0以上的，而我们构建服务器因为nodejs版本还是6.x.x，因此对应npm可能不支持npm-lock\n好在我们发版构建工具支持yarn，yarn本身就支持yarn-lock，只需要把yarn-lock提交上去就可以了（之前由于历史原因，将yarn-lock忽略掉了）\n\n于是，我把yarn-lock提交上去之后，咦？好了！\n嗯，问题就这样好了，两次构建出来的hash值不但一致了，就连和我本地构建出来的文件hash也是一致的了。\n\n至此时，本人内心很平静，毫无波澜。\n\n### 总结与分析\n\n很明显，问题就是出在依赖包，因为使用了范版本，不同的机器安装的包是不一样的，那么构建出来的代码（尤其是压缩、babel等语法解析作用的包处理之后的代码）是非常可能不一样的。\n\nnpm早期版本其实也有解决这个问题的方案，那就是 npm shrinkwrap ，这个也是用作版本锁定的，并且到目前为止也是兼容的，其优先级高于npm-lock\n当然，最简单的还是使用yarn，至少可以少跑一个命令。\n\n以后为了解决各种奇怪的编译问题，还是做好版本锁定的好。\n\n\n\n### 补充\n\nnpm安装包加lock可以提升安全性，更好的让开发人员对安装包进行代码review，减少恶意安装包肆意更新带来的安全隐患\n\n\n\n--- 全文完 ---\n\n","slug":"npm-lock","published":1,"updated":"2018-06-01T11:26:18.313Z","comments":1,"photos":[],"link":"","_id":"cji1sigjy001mxwqtewmwngua","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"事情的背景\"><a href=\"#事情的背景\" class=\"headerlink\" title=\"事情的背景\"></a>事情的背景</h3><p>我司的项目基本上都是后端java，前端随意。<br>前端什么技术都有，react、vue、jquery、regular、seajs…<br>好在构建工具不复杂，也就是用的gulp + webpack<br>其实，还算是比较灵活了，虽然没有用nodejs，但是java的ftl模板也足够支持前后端分离了。</p>\n<p>发布是走的公司运维开发的发布系统，由于<strong>历史原因</strong>，发布构建的时候，每修改一次代码需要分两步发版，分别是：<br>前端发布：webpack+gulp构建，然后发前端静态资源到cdn<br>后端发布：webpack+gulp构建，然后发ftl文件以及java文件到源站。</p>\n<p>并且两次发布所在的目录是不同的，因此也就需要执行npm install - npm build多次，也就意味着有两套node_modules</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>当然了，还是历史原因，我们项目中有部分代码是在本地构建之后提交到版本库的。<br>而本次我的任务就是解决历史问题，然后将代码本地构建改为发版构建。</p>\n<p>于是，问题来了。</p>\n<p>我在将本地构建改为发布构建的时候突然发现某个js资源404了，经检查，原来是两次构建的文件hash值不一样。<br>也就是说，前端发布的时候和后端发布的时候两次编译出来的文件hash值不一样。</p>\n<p>经过多次测试，发现：<br>我本地是好的，多次构建都是完全一样的，哪怕是删除了package.json、node_modules<br>而同样的某一台构建服务器上却是两次构建不一样，并且两次和我本机的构建hash也不一样。<br>另外其它的构建服务器上却是两次构建一样，并且两次和我本机的构建hash不一样。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>hash值是根据文件内容算出来的，理论上来说不一样的文件内容计算出来的结果一定是不一样的。<br>因此，一定是编译出来的文件某个地方不一样才导致的hash不同。</p>\n<p>既然有了猜想，便去验证一番，经过一番折腾终于拿到了构建机器两次构建之后的源码<br>后经过一番对比，发现文件大部分内容都是一样的，只有极少部分变量名不同<br>其中有一个地方引起了我的注意，那就是某个es6转换成es5代码之后的某个方法有些异常，虽然结果一样，但是语法、方法结构却不一样</p>\n<p>难道是babel？<br>同样版本的构建为什么会出现不一样的文件？</p>\n<p>等等，同样的构建？突然想到，npm的package.json版本管理的原理。</p>\n<p>我们的package.json文件都是用的上尖括号（范版本）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"vue\": \"^2.4.2\",</span><br><span class=\"line\">  \"vue-resource\": \"^1.3.4\",</span><br><span class=\"line\">  \"vue-router\": \"^2.7.0\",</span><br><span class=\"line\">  \"vuex\": \"^3.0.1\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>尖括号的意思是，匹配所有的次要版本，也就是说：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果当前配置的是 ^1.1.1</span><br><span class=\"line\">当依赖包最新版本为 1.x.x的时候，下次npm install就会自动安装最新的版本。</span><br><span class=\"line\">但是会忽略 2.0.0及以上版本</span><br></pre></td></tr></table></figure>\n<p>除此之外还有一种匹配模式是波浪号，匹配第二次要的版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"vue\": \"~2.4.2\",</span><br><span class=\"line\">  \"vue-resource\": \"~1.3.4\",</span><br><span class=\"line\">  \"vue-router\": \"~2.7.0\",</span><br><span class=\"line\">  \"vuex\": \"~3.0.1\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果~1.1.1，当最新版本为 1.1.x的时候，下次npm install就会自动更新最新的版本</span><br><span class=\"line\">但是会忽略 2.2.0及以上版本</span><br></pre></td></tr></table></figure>\n<p>莫非是因为babel升级了一个小版本？而我们的node_module有的更新了，有的没有更新？<br>这个还真的很有可能，因为我们的构建机器上的依赖包是优先缓存的，而之前为了做实验我做了清缓存的操作，有可能是有的更新了缓存，有的却没有更新。</p>\n<p>因为有了这个猜想，便去验证一番，如果是安装包的问题，那么是不是说只需要做到几次安装的node_module下的依赖包版本一致，就能解决这个问题了呢？</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>解决版本锁定也很简单，加个npm-lock就可以了<br>但是npm本身支持lock是在5.0.0以上的，而我们构建服务器因为nodejs版本还是6.x.x，因此对应npm可能不支持npm-lock<br>好在我们发版构建工具支持yarn，yarn本身就支持yarn-lock，只需要把yarn-lock提交上去就可以了（之前由于历史原因，将yarn-lock忽略掉了）</p>\n<p>于是，我把yarn-lock提交上去之后，咦？好了！<br>嗯，问题就这样好了，两次构建出来的hash值不但一致了，就连和我本地构建出来的文件hash也是一致的了。</p>\n<p>至此时，本人内心很平静，毫无波澜。</p>\n<h3 id=\"总结与分析\"><a href=\"#总结与分析\" class=\"headerlink\" title=\"总结与分析\"></a>总结与分析</h3><p>很明显，问题就是出在依赖包，因为使用了范版本，不同的机器安装的包是不一样的，那么构建出来的代码（尤其是压缩、babel等语法解析作用的包处理之后的代码）是非常可能不一样的。</p>\n<p>npm早期版本其实也有解决这个问题的方案，那就是 npm shrinkwrap ，这个也是用作版本锁定的，并且到目前为止也是兼容的，其优先级高于npm-lock<br>当然，最简单的还是使用yarn，至少可以少跑一个命令。</p>\n<p>以后为了解决各种奇怪的编译问题，还是做好版本锁定的好。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>npm安装包加lock可以提升安全性，更好的让开发人员对安装包进行代码review，减少恶意安装包肆意更新带来的安全隐患</p>\n<p>— 全文完 —</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"事情的背景\"><a href=\"#事情的背景\" class=\"headerlink\" title=\"事情的背景\"></a>事情的背景</h3><p>我司的项目基本上都是后端java，前端随意。<br>前端什么技术都有，react、vue、jquery、regular、seajs…<br>好在构建工具不复杂，也就是用的gulp + webpack<br>其实，还算是比较灵活了，虽然没有用nodejs，但是java的ftl模板也足够支持前后端分离了。</p>\n<p>发布是走的公司运维开发的发布系统，由于<strong>历史原因</strong>，发布构建的时候，每修改一次代码需要分两步发版，分别是：<br>前端发布：webpack+gulp构建，然后发前端静态资源到cdn<br>后端发布：webpack+gulp构建，然后发ftl文件以及java文件到源站。</p>\n<p>并且两次发布所在的目录是不同的，因此也就需要执行npm install - npm build多次，也就意味着有两套node_modules</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>当然了，还是历史原因，我们项目中有部分代码是在本地构建之后提交到版本库的。<br>而本次我的任务就是解决历史问题，然后将代码本地构建改为发版构建。</p>\n<p>于是，问题来了。</p>\n<p>我在将本地构建改为发布构建的时候突然发现某个js资源404了，经检查，原来是两次构建的文件hash值不一样。<br>也就是说，前端发布的时候和后端发布的时候两次编译出来的文件hash值不一样。</p>\n<p>经过多次测试，发现：<br>我本地是好的，多次构建都是完全一样的，哪怕是删除了package.json、node_modules<br>而同样的某一台构建服务器上却是两次构建不一样，并且两次和我本机的构建hash也不一样。<br>另外其它的构建服务器上却是两次构建一样，并且两次和我本机的构建hash不一样。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>hash值是根据文件内容算出来的，理论上来说不一样的文件内容计算出来的结果一定是不一样的。<br>因此，一定是编译出来的文件某个地方不一样才导致的hash不同。</p>\n<p>既然有了猜想，便去验证一番，经过一番折腾终于拿到了构建机器两次构建之后的源码<br>后经过一番对比，发现文件大部分内容都是一样的，只有极少部分变量名不同<br>其中有一个地方引起了我的注意，那就是某个es6转换成es5代码之后的某个方法有些异常，虽然结果一样，但是语法、方法结构却不一样</p>\n<p>难道是babel？<br>同样版本的构建为什么会出现不一样的文件？</p>\n<p>等等，同样的构建？突然想到，npm的package.json版本管理的原理。</p>\n<p>我们的package.json文件都是用的上尖括号（范版本）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"vue\": \"^2.4.2\",</span><br><span class=\"line\">  \"vue-resource\": \"^1.3.4\",</span><br><span class=\"line\">  \"vue-router\": \"^2.7.0\",</span><br><span class=\"line\">  \"vuex\": \"^3.0.1\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>尖括号的意思是，匹配所有的次要版本，也就是说：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果当前配置的是 ^1.1.1</span><br><span class=\"line\">当依赖包最新版本为 1.x.x的时候，下次npm install就会自动安装最新的版本。</span><br><span class=\"line\">但是会忽略 2.0.0及以上版本</span><br></pre></td></tr></table></figure>\n<p>除此之外还有一种匹配模式是波浪号，匹配第二次要的版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"vue\": \"~2.4.2\",</span><br><span class=\"line\">  \"vue-resource\": \"~1.3.4\",</span><br><span class=\"line\">  \"vue-router\": \"~2.7.0\",</span><br><span class=\"line\">  \"vuex\": \"~3.0.1\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果~1.1.1，当最新版本为 1.1.x的时候，下次npm install就会自动更新最新的版本</span><br><span class=\"line\">但是会忽略 2.2.0及以上版本</span><br></pre></td></tr></table></figure>\n<p>莫非是因为babel升级了一个小版本？而我们的node_module有的更新了，有的没有更新？<br>这个还真的很有可能，因为我们的构建机器上的依赖包是优先缓存的，而之前为了做实验我做了清缓存的操作，有可能是有的更新了缓存，有的却没有更新。</p>\n<p>因为有了这个猜想，便去验证一番，如果是安装包的问题，那么是不是说只需要做到几次安装的node_module下的依赖包版本一致，就能解决这个问题了呢？</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>解决版本锁定也很简单，加个npm-lock就可以了<br>但是npm本身支持lock是在5.0.0以上的，而我们构建服务器因为nodejs版本还是6.x.x，因此对应npm可能不支持npm-lock<br>好在我们发版构建工具支持yarn，yarn本身就支持yarn-lock，只需要把yarn-lock提交上去就可以了（之前由于历史原因，将yarn-lock忽略掉了）</p>\n<p>于是，我把yarn-lock提交上去之后，咦？好了！<br>嗯，问题就这样好了，两次构建出来的hash值不但一致了，就连和我本地构建出来的文件hash也是一致的了。</p>\n<p>至此时，本人内心很平静，毫无波澜。</p>\n<h3 id=\"总结与分析\"><a href=\"#总结与分析\" class=\"headerlink\" title=\"总结与分析\"></a>总结与分析</h3><p>很明显，问题就是出在依赖包，因为使用了范版本，不同的机器安装的包是不一样的，那么构建出来的代码（尤其是压缩、babel等语法解析作用的包处理之后的代码）是非常可能不一样的。</p>\n<p>npm早期版本其实也有解决这个问题的方案，那就是 npm shrinkwrap ，这个也是用作版本锁定的，并且到目前为止也是兼容的，其优先级高于npm-lock<br>当然，最简单的还是使用yarn，至少可以少跑一个命令。</p>\n<p>以后为了解决各种奇怪的编译问题，还是做好版本锁定的好。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>npm安装包加lock可以提升安全性，更好的让开发人员对安装包进行代码review，减少恶意安装包肆意更新带来的安全隐患</p>\n<p>— 全文完 —</p>\n"},{"title":"Vim入门","date":"2016-12-30T16:00:00.000Z","_content":"\nVim是从vi发展出来的一个文本编辑器,在程序员中尤其受欢迎，虽然一般人（包括一般的程序员）都不一定能够熟练、经常使用它们，但是这并不影响的地位，至少目前为止还没有人能够替代它成为人们的‘信仰’，毕竟编辑器之神的称号不是白叫的。\n早就对它仰慕已久，只不过迟迟未能正式与它见面。作为一名前端开发工程师，因为Nodejs的大火而开始接触到服务端的知识，这也就不可避免的需要在非可视化界面以及无鼠标环境进行操作了，这时候vim的价值就更加凸显了，下面记录一下学习vim的一些笔记。\n\n\n#### 普通模式(Normal Mode)\n\n在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。\n这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。\n\n``` shell\ngg 回到最前一行\n\nG 回到最后一行\n\nnG 跳到第n行 （n为int数值）\n\nctl+b 向上滚动一页\n\nctl+f 向下滚动一页\n\ndd 删除一行\n\nx 删除游标所在的字符\n\nX 删除游标所在字符的前一个字符\n\nd^ 删除至行首\n\n2dd 删除2行\n\nu 撤销修改\n```\n\n在普通模式有如下方位键\n\n``` shell\nh   左\nl   右（小写L）\nj   下\nk   上\nw   移动到下一个单词\nb   移动到上一个单词\n```\n\n### 命令行模式（Command-Line）\n\n在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（\":\"键），搜索（\"/\"和\"?\"键）或者过滤命令（\"!\"键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。\n\n``` shell\n:q! 强制保存\n\n:q 退出\n\n:wq 保存并退出\n\n:x 保存并退出\n\n:wq! 强制保存并退出\n\n```\n\n命令模式对vim编辑器进行设置\n\n``` shell\nsyntax on                   \" 自动语法高亮\n\ncolorscheme torte           \"配置颜色方案\n\nset number                  \" 显示行号\n\nset cursorline              \" 突出显示当前行\n\nset wildmenu                \"Turn on WiLd menu 在末行命令行敲tab键时会在状态栏显示选项\n\nset whichwrap+=h,           \"Bbackspace and cursor keys wrap to 使指定的左右移动光标的键在行首或行尾可以移到前一行或者后一行\n\nset shiftwidth=4            \" 设定 << 和 >> 命令移动时的宽度为 4\n\nset softtabstop=4           \" 使得按退格键时可以一次删掉 4 个空格\n\nset tabstop=4               \" 设定 tab 长度为 4\n\nset nobackup                \" 覆盖文件时不备份\n\nset autochdir               \" 自动切换当前目录为当前文件所在的目录\n```\n\n\n### 插入模式（Insert Mode）\n\n进入vim编辑之后，默认为普通模式，普通模式下，可以按i\\I，a\\A，o\\O进入，这几个进入插入模式后位置不同。\n在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按ESC键回到普通模式。\n\n\n\n### 可视模式（Visual Mode）\n\n这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的\"文本对象\"也能和移动命令一样用在这个模式中。\n\n\n### 选择模式（Select Mode）\n\n这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。\n\n\n\n### 格式化代码\n\n``` shell\ngg=G\n```\n\n\n### Ex模式（Ex Mode）\n\n普通模式下键入Q进入该模式\n\n这和命令行模式比较相似，在使用\":visual\"命令离开Ex模式前，可以一次执行多条命令。\n\n上面的都是vim的基本模式，其次还有派生模式，这个模式包含：操作符等待模式、插入普通模式、插入可视模式、插入选择模式、替换模式、其他\n\n### item\n```shell\ncommand+option+方向键 #切换item屏幕\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vim.md","raw":"---\ntitle: Vim入门\ntag: vim\ndate: 2016/12/31\ncategory: 技术\n---\n\nVim是从vi发展出来的一个文本编辑器,在程序员中尤其受欢迎，虽然一般人（包括一般的程序员）都不一定能够熟练、经常使用它们，但是这并不影响的地位，至少目前为止还没有人能够替代它成为人们的‘信仰’，毕竟编辑器之神的称号不是白叫的。\n早就对它仰慕已久，只不过迟迟未能正式与它见面。作为一名前端开发工程师，因为Nodejs的大火而开始接触到服务端的知识，这也就不可避免的需要在非可视化界面以及无鼠标环境进行操作了，这时候vim的价值就更加凸显了，下面记录一下学习vim的一些笔记。\n\n\n#### 普通模式(Normal Mode)\n\n在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。\n这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。\n\n``` shell\ngg 回到最前一行\n\nG 回到最后一行\n\nnG 跳到第n行 （n为int数值）\n\nctl+b 向上滚动一页\n\nctl+f 向下滚动一页\n\ndd 删除一行\n\nx 删除游标所在的字符\n\nX 删除游标所在字符的前一个字符\n\nd^ 删除至行首\n\n2dd 删除2行\n\nu 撤销修改\n```\n\n在普通模式有如下方位键\n\n``` shell\nh   左\nl   右（小写L）\nj   下\nk   上\nw   移动到下一个单词\nb   移动到上一个单词\n```\n\n### 命令行模式（Command-Line）\n\n在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（\":\"键），搜索（\"/\"和\"?\"键）或者过滤命令（\"!\"键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。\n\n``` shell\n:q! 强制保存\n\n:q 退出\n\n:wq 保存并退出\n\n:x 保存并退出\n\n:wq! 强制保存并退出\n\n```\n\n命令模式对vim编辑器进行设置\n\n``` shell\nsyntax on                   \" 自动语法高亮\n\ncolorscheme torte           \"配置颜色方案\n\nset number                  \" 显示行号\n\nset cursorline              \" 突出显示当前行\n\nset wildmenu                \"Turn on WiLd menu 在末行命令行敲tab键时会在状态栏显示选项\n\nset whichwrap+=h,           \"Bbackspace and cursor keys wrap to 使指定的左右移动光标的键在行首或行尾可以移到前一行或者后一行\n\nset shiftwidth=4            \" 设定 << 和 >> 命令移动时的宽度为 4\n\nset softtabstop=4           \" 使得按退格键时可以一次删掉 4 个空格\n\nset tabstop=4               \" 设定 tab 长度为 4\n\nset nobackup                \" 覆盖文件时不备份\n\nset autochdir               \" 自动切换当前目录为当前文件所在的目录\n```\n\n\n### 插入模式（Insert Mode）\n\n进入vim编辑之后，默认为普通模式，普通模式下，可以按i\\I，a\\A，o\\O进入，这几个进入插入模式后位置不同。\n在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按ESC键回到普通模式。\n\n\n\n### 可视模式（Visual Mode）\n\n这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的\"文本对象\"也能和移动命令一样用在这个模式中。\n\n\n### 选择模式（Select Mode）\n\n这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。\n\n\n\n### 格式化代码\n\n``` shell\ngg=G\n```\n\n\n### Ex模式（Ex Mode）\n\n普通模式下键入Q进入该模式\n\n这和命令行模式比较相似，在使用\":visual\"命令离开Ex模式前，可以一次执行多条命令。\n\n上面的都是vim的基本模式，其次还有派生模式，这个模式包含：操作符等待模式、插入普通模式、插入可视模式、插入选择模式、替换模式、其他\n\n### item\n```shell\ncommand+option+方向键 #切换item屏幕\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vim","published":1,"updated":"2018-05-22T12:35:24.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigk0001pxwqtvanotjs6","content":"<p>Vim是从vi发展出来的一个文本编辑器,在程序员中尤其受欢迎，虽然一般人（包括一般的程序员）都不一定能够熟练、经常使用它们，但是这并不影响的地位，至少目前为止还没有人能够替代它成为人们的‘信仰’，毕竟编辑器之神的称号不是白叫的。<br>早就对它仰慕已久，只不过迟迟未能正式与它见面。作为一名前端开发工程师，因为Nodejs的大火而开始接触到服务端的知识，这也就不可避免的需要在非可视化界面以及无鼠标环境进行操作了，这时候vim的价值就更加凸显了，下面记录一下学习vim的一些笔记。</p>\n<h4 id=\"普通模式-Normal-Mode\"><a href=\"#普通模式-Normal-Mode\" class=\"headerlink\" title=\"普通模式(Normal Mode)\"></a>普通模式(Normal Mode)</h4><p>在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。<br>这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gg 回到最前一行</span><br><span class=\"line\"></span><br><span class=\"line\">G 回到最后一行</span><br><span class=\"line\"></span><br><span class=\"line\">nG 跳到第n行 （n为int数值）</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+b 向上滚动一页</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+f 向下滚动一页</span><br><span class=\"line\"></span><br><span class=\"line\">dd 删除一行</span><br><span class=\"line\"></span><br><span class=\"line\">x 删除游标所在的字符</span><br><span class=\"line\"></span><br><span class=\"line\">X 删除游标所在字符的前一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">d^ 删除至行首</span><br><span class=\"line\"></span><br><span class=\"line\">2dd 删除2行</span><br><span class=\"line\"></span><br><span class=\"line\">u 撤销修改</span><br></pre></td></tr></table></figure>\n<p>在普通模式有如下方位键</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h   左</span><br><span class=\"line\">l   右（小写L）</span><br><span class=\"line\">j   下</span><br><span class=\"line\">k   上</span><br><span class=\"line\">w   移动到下一个单词</span><br><span class=\"line\">b   移动到上一个单词</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令行模式（Command-Line）\"><a href=\"#命令行模式（Command-Line）\" class=\"headerlink\" title=\"命令行模式（Command-Line）\"></a>命令行模式（Command-Line）</h3><p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（”:”键），搜索（”/“和”?”键）或者过滤命令（”!”键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:q! 强制保存</span><br><span class=\"line\"></span><br><span class=\"line\">:q 退出</span><br><span class=\"line\"></span><br><span class=\"line\">:wq 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:x 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:wq! 强制保存并退出</span><br></pre></td></tr></table></figure>\n<p>命令模式对vim编辑器进行设置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax on                   \" 自动语法高亮</span><br><span class=\"line\"></span><br><span class=\"line\">colorscheme torte           \"配置颜色方案</span><br><span class=\"line\"></span><br><span class=\"line\">set number                  \" 显示行号</span><br><span class=\"line\"></span><br><span class=\"line\">set cursorline              \" 突出显示当前行</span><br><span class=\"line\"></span><br><span class=\"line\">set wildmenu                \"Turn on WiLd menu 在末行命令行敲tab键时会在状态栏显示选项</span><br><span class=\"line\"></span><br><span class=\"line\">set whichwrap+=h,           \"Bbackspace and cursor keys wrap to 使指定的左右移动光标的键在行首或行尾可以移到前一行或者后一行</span><br><span class=\"line\"></span><br><span class=\"line\">set shiftwidth=4            \" 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</span><br><span class=\"line\"></span><br><span class=\"line\">set softtabstop=4           \" 使得按退格键时可以一次删掉 4 个空格</span><br><span class=\"line\"></span><br><span class=\"line\">set tabstop=4               \" 设定 tab 长度为 4</span><br><span class=\"line\"></span><br><span class=\"line\">set nobackup                \" 覆盖文件时不备份</span><br><span class=\"line\"></span><br><span class=\"line\">set autochdir               \" 自动切换当前目录为当前文件所在的目录</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入模式（Insert-Mode）\"><a href=\"#插入模式（Insert-Mode）\" class=\"headerlink\" title=\"插入模式（Insert Mode）\"></a>插入模式（Insert Mode）</h3><p>进入vim编辑之后，默认为普通模式，普通模式下，可以按i\\I，a\\A，o\\O进入，这几个进入插入模式后位置不同。<br>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按ESC键回到普通模式。</p>\n<h3 id=\"可视模式（Visual-Mode）\"><a href=\"#可视模式（Visual-Mode）\" class=\"headerlink\" title=\"可视模式（Visual Mode）\"></a>可视模式（Visual Mode）</h3><p>这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的”文本对象”也能和移动命令一样用在这个模式中。</p>\n<h3 id=\"选择模式（Select-Mode）\"><a href=\"#选择模式（Select-Mode）\" class=\"headerlink\" title=\"选择模式（Select Mode）\"></a>选择模式（Select Mode）</h3><p>这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。</p>\n<h3 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gg=G</span><br></pre></td></tr></table></figure>\n<h3 id=\"Ex模式（Ex-Mode）\"><a href=\"#Ex模式（Ex-Mode）\" class=\"headerlink\" title=\"Ex模式（Ex Mode）\"></a>Ex模式（Ex Mode）</h3><p>普通模式下键入Q进入该模式</p>\n<p>这和命令行模式比较相似，在使用”:visual”命令离开Ex模式前，可以一次执行多条命令。</p>\n<p>上面的都是vim的基本模式，其次还有派生模式，这个模式包含：操作符等待模式、插入普通模式、插入可视模式、插入选择模式、替换模式、其他</p>\n<h3 id=\"item\"><a href=\"#item\" class=\"headerlink\" title=\"item\"></a>item</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command+option+方向键 #切换item屏幕</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Vim是从vi发展出来的一个文本编辑器,在程序员中尤其受欢迎，虽然一般人（包括一般的程序员）都不一定能够熟练、经常使用它们，但是这并不影响的地位，至少目前为止还没有人能够替代它成为人们的‘信仰’，毕竟编辑器之神的称号不是白叫的。<br>早就对它仰慕已久，只不过迟迟未能正式与它见面。作为一名前端开发工程师，因为Nodejs的大火而开始接触到服务端的知识，这也就不可避免的需要在非可视化界面以及无鼠标环境进行操作了，这时候vim的价值就更加凸显了，下面记录一下学习vim的一些笔记。</p>\n<h4 id=\"普通模式-Normal-Mode\"><a href=\"#普通模式-Normal-Mode\" class=\"headerlink\" title=\"普通模式(Normal Mode)\"></a>普通模式(Normal Mode)</h4><p>在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。<br>这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gg 回到最前一行</span><br><span class=\"line\"></span><br><span class=\"line\">G 回到最后一行</span><br><span class=\"line\"></span><br><span class=\"line\">nG 跳到第n行 （n为int数值）</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+b 向上滚动一页</span><br><span class=\"line\"></span><br><span class=\"line\">ctl+f 向下滚动一页</span><br><span class=\"line\"></span><br><span class=\"line\">dd 删除一行</span><br><span class=\"line\"></span><br><span class=\"line\">x 删除游标所在的字符</span><br><span class=\"line\"></span><br><span class=\"line\">X 删除游标所在字符的前一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">d^ 删除至行首</span><br><span class=\"line\"></span><br><span class=\"line\">2dd 删除2行</span><br><span class=\"line\"></span><br><span class=\"line\">u 撤销修改</span><br></pre></td></tr></table></figure>\n<p>在普通模式有如下方位键</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h   左</span><br><span class=\"line\">l   右（小写L）</span><br><span class=\"line\">j   下</span><br><span class=\"line\">k   上</span><br><span class=\"line\">w   移动到下一个单词</span><br><span class=\"line\">b   移动到上一个单词</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令行模式（Command-Line）\"><a href=\"#命令行模式（Command-Line）\" class=\"headerlink\" title=\"命令行模式（Command-Line）\"></a>命令行模式（Command-Line）</h3><p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（”:”键），搜索（”/“和”?”键）或者过滤命令（”!”键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:q! 强制保存</span><br><span class=\"line\"></span><br><span class=\"line\">:q 退出</span><br><span class=\"line\"></span><br><span class=\"line\">:wq 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:x 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:wq! 强制保存并退出</span><br></pre></td></tr></table></figure>\n<p>命令模式对vim编辑器进行设置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax on                   \" 自动语法高亮</span><br><span class=\"line\"></span><br><span class=\"line\">colorscheme torte           \"配置颜色方案</span><br><span class=\"line\"></span><br><span class=\"line\">set number                  \" 显示行号</span><br><span class=\"line\"></span><br><span class=\"line\">set cursorline              \" 突出显示当前行</span><br><span class=\"line\"></span><br><span class=\"line\">set wildmenu                \"Turn on WiLd menu 在末行命令行敲tab键时会在状态栏显示选项</span><br><span class=\"line\"></span><br><span class=\"line\">set whichwrap+=h,           \"Bbackspace and cursor keys wrap to 使指定的左右移动光标的键在行首或行尾可以移到前一行或者后一行</span><br><span class=\"line\"></span><br><span class=\"line\">set shiftwidth=4            \" 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</span><br><span class=\"line\"></span><br><span class=\"line\">set softtabstop=4           \" 使得按退格键时可以一次删掉 4 个空格</span><br><span class=\"line\"></span><br><span class=\"line\">set tabstop=4               \" 设定 tab 长度为 4</span><br><span class=\"line\"></span><br><span class=\"line\">set nobackup                \" 覆盖文件时不备份</span><br><span class=\"line\"></span><br><span class=\"line\">set autochdir               \" 自动切换当前目录为当前文件所在的目录</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入模式（Insert-Mode）\"><a href=\"#插入模式（Insert-Mode）\" class=\"headerlink\" title=\"插入模式（Insert Mode）\"></a>插入模式（Insert Mode）</h3><p>进入vim编辑之后，默认为普通模式，普通模式下，可以按i\\I，a\\A，o\\O进入，这几个进入插入模式后位置不同。<br>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按ESC键回到普通模式。</p>\n<h3 id=\"可视模式（Visual-Mode）\"><a href=\"#可视模式（Visual-Mode）\" class=\"headerlink\" title=\"可视模式（Visual Mode）\"></a>可视模式（Visual Mode）</h3><p>这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的”文本对象”也能和移动命令一样用在这个模式中。</p>\n<h3 id=\"选择模式（Select-Mode）\"><a href=\"#选择模式（Select-Mode）\" class=\"headerlink\" title=\"选择模式（Select Mode）\"></a>选择模式（Select Mode）</h3><p>这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。</p>\n<h3 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gg=G</span><br></pre></td></tr></table></figure>\n<h3 id=\"Ex模式（Ex-Mode）\"><a href=\"#Ex模式（Ex-Mode）\" class=\"headerlink\" title=\"Ex模式（Ex Mode）\"></a>Ex模式（Ex Mode）</h3><p>普通模式下键入Q进入该模式</p>\n<p>这和命令行模式比较相似，在使用”:visual”命令离开Ex模式前，可以一次执行多条命令。</p>\n<p>上面的都是vim的基本模式，其次还有派生模式，这个模式包含：操作符等待模式、插入普通模式、插入可视模式、插入选择模式、替换模式、其他</p>\n<h3 id=\"item\"><a href=\"#item\" class=\"headerlink\" title=\"item\"></a>item</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command+option+方向键 #切换item屏幕</span><br></pre></td></tr></table></figure>\n"},{"title":"React、Flux以及Redux小结","date":"2018-04-09T16:00:00.000Z","_content":"\nReact和Vue是当下前端最流行的Javascript框架。作为一名现代化前端工程师，学习这两个框架已经成为了标配。\n本人学习这两个框架已经有很长一段时间了，当下对其做一些基本概念梳理总结，利人利己。\n\n\n### Flux\n\n##### Flux是什么\n\nFlux是一种架构思想，专门解决软件结构问题，它和MVC是同一种东西。\n\n##### facebook flux官网描述\n```html\nFlux is the application architecture that Facebook uses for building client-side web applications. \nIt complements React's composable view components by utilizing a unidirectional data flow. \nIt's more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code.\n\n（Flux是Facebook用来构建客户端应用程序的web应用程序架构。它是React单向数据流view组件的补充。它更向是一种模式，而不是一种框架，你只需要使用一点点代码就能立即使用它）\n```\n\n##### Flux结构组成\n```html\nView 视图层\n\nAction 动作 比如视图层发出的消息（比如mouseClick）\n\nDispatcher 派发器 接受Actions，执行回调函数\n\nStore 数据层 用来存放应用状态 Store变动的时候，会触发View更新\n```\n\n##### Flux最大的特点就是“数据的单向流动”\n\n```html\n1.用户访问View\n\n2.用户触发View发起Action\n\n3.Dispather接收到用户的Action，要求Store进行相应更新\n\n4.Store更新之后通知view更新\n```\n如图所示：（图片来源:http://www.ruanyifeng.com/）\n\n![avatar](http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png)\n\n##### Flux的应用\nFlux是一种架构思想，使用flux就是使用flux的这种思想模式构建程序代码。\n使用flux模式构建的代码能够更容易阅读，修改维护更为简单。\n当然，通其它结构思想一样（如MVC）引入flux模式必然会需要引入一些其它的代码，一定程度上提升了代码的复杂度。\n因此，如果不是项目到达一定的规模，如果不是觉得不用框架开发起来很艰难，那就不需要使用flux框架。\n\n\n---\n\n### React\nReact是一个View层框架，用来渲染视图，不直接操作View，想要操作view只能通过修改state来实现\nstate的改变主要来自两个方面，一个是服务端，另一个是用户行为，其中用户行为占很大一部分。\nReact每个组件都有一个setState方法用来修改当前的state，所以一般把修改state操作都放在各自的组件中。\n但是，随着项目的扩大，业务逻辑越来越复杂，一个state的变化往往对应着多个组件，这样很可能导致混乱。\n此时，我们需要一个对state进行统一管理，这也就是Flux出现的原因了。\n\n\n##### React使用Flux\nFlux在React中主要用来集中管理引起state变化的情况，Flux维护着一个或多个Store，（MVC中的Model），Store中存储着应用用到的所有数据。\n当Action触发的时候，Flux根据Action在对应Store中经过一系列逻辑处理，更新Store。\n当Store发生变化的时候，通常根组件（也可以不是根组件）会去获取新的store，然后更新state，然后利用React的单项数据流的特点一层层的向下传递state以更新view。\n\n\n##### Redux\nRedux的作用和Flux相同，可以看作是Flux的一种实现\n\n当然，Redux既然独立存在，肯定是有其独特之处，同Flux相比，Redux有以下不同。\n```html\n1.Redux没有 Dispatcher，只有Reducer，Reducer是一个纯函数，它接受两个参数(previousState、action)，返回一个新的state；\n  Redux中含有多个reducer，多个reducer通过combineReducers方法合并为一个根reducer，这个根reducer负责维护完整的state；\n  当action发起的时候，store会调用dispatch方法，向某个特定的reducer纯函数传递该action，以更新state。\n\n2.Flux有多个store；在store中完成新的state的推导；每一个store都只对对应的view，每次更新都只通知对应的view\n  Redux只有一个store；Redux的更新逻辑也不在store中执行，而是放在reducer中；Redux中所有reducer都由根Reducer统一管理，对应一个根View。\n```\n\n##### Redux Store 以及 Redux State\nStore保存所有的数据，可以将其看做是一个容器。整个应用只能有一个Store\n``` javascript\nimport {createStore} from \"redux\";\n\nconst store = createStore(fn);\n```\n\n如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合就叫做State\n``` javascript\nimport {createStore} from \"redux\";\n\nconst store = createStore(fn);\n\nconst state = store.getState();\n```\n\nRedux规定，一个State对应一个View。只要State相同，View就相同。\n知道State就能知道View是什么样，反之亦然。\n\n##### Redux Action\nAction为View发出的通知，表示State将要发生变化\nAction描述当前发生的事情。改变State的唯一办法就是通过Action将数据运送到Store\n``` javascript\nconst action = {\n  type: \"ADD_TODO\", // Action的名称\n  payload: \"LEARN Redux\" // Action携带的字符串信息\n};\n```\n\n#### Redux Action Creater\n定义一个函数，用来自动生成Action，这个函数就叫做Action Creator\n\n``` javascript\nconst ADD_TODO = \"添加 TODO\";\n\nfunction addToDo(text) {\n    return {\n        type: ADD_TODO,\n        text\n    }\n}\n\nconst action = addToDo(Learn Redux);\n```\n\n#### Redux store.dispatch()\nstore.dispatch()是View唯一发出Action的方法\n\n``` javascript\nimport {createStore} form \"redux\";\n\nconst store = createStore(fn);\n\nstore.dispatch({\n  type: \"ADD_TODO\",\n  payload: \"Learn Redux\",\n});\n```\nstore.dispatch接受一个Action对象作为参数，将它发送出去\n\n结合Action Creater\n\n``` javascript\nstore.dispatch(addToDo(\"Learn Redux\"));\n```\n\n##### Redux Reducer\nStore收到一个Action之后必须给出一个新的State，这样View才会发生变化。\n这种State的计算过程就叫做Reducer，Reducer是一个纯函数，它接受Action和当前的State作为参数，返回一个新的State\n``` javascript\nconst Reducer = function(state, action){\n  //...\n  return new_state;\n}\n```\n\n##### Redux subscribe()\nStore允许使用Store.subscribe方法设置监听函数，一旦State发生变化就自动执行这个函数\n\n``` javascript\nimport {createStore} from \"redux\";\nconst store = createStore(reducer);\n\nstore.subscribe(listener);\n```\n\n解除监听，store.subscribe方法返回一个函数，调用这个函数即可解除监听\n\n``` javascript\nconst unsubscribe = store.subscribe(() => \n    console.log(store.getState());\n);\nunsubscribe();\n```\n\n##### Redux Store的实现\nStore提供了三个方法\n\n``` javascript\nstore.getState();\n\nstore.dispatch();\n\nstore.subscribe();\n```\n\n``` javascript\nimport {createStore} from \"redux\";\nlet {subscribe, dispatch, getState} = createStore(reducer);\n```\n\n##### Reducer拆分\nReducer负责生成State，由于一个项目只有一个State，导致这个State会非常庞大。\n所以，Redux提供了解决方案，那就是将其拆分开来，同时Redux又提供了一个combineReducers方法\n用这个方法可以将各个子Reducer合并成一个大的Reducer。\n\n``` javascript\nimport {combineReducers} form \"redux\";\n\nconst chatReducer = combineReducers(){\n    chatLog,\n    statusMessage,\n    userName\n};\n\nexport default todoApp;\n```\n\n可以将所有的子Reducer放在一个文件里面，然后统一引入\n\n``` javascript\nimport {combineReducers} form \"redux\";\nimport * as reducers from \"./reducers\";\n\nconst reducer = combineReducers(reducers); \n```\n\n\n##### Reducer工作流程\n1.用户发出action\n``` javascript\nstore.dispatch(actioin);\n```\n\n2.Store自动调用Reducer，并传入两个参数（当前State和Action）。Reducer会返回新的State\n``` javascript\nlet nextState = todoApp(previousState, action);\n```\n\n3.State出现变化之后，Store调用监听函数\n``` javascript\nstore.subscribe(listener);\n```\nlistener可以通过store.getState()获取当前状态。\n\n``` javascript\nfunction listener() {\n  let newState = store.getState();\n  component.setState(newState);\n}\n```\n\n\n---------------------------------------\n\n### 传送门\n\n#### babel官网\n<a href=\"https://babeljs.io/\" target=\"_blank\">https://babeljs.io/</a>\n\n\n#### react官网\n<a href=\"https://facebook.github.io/react/\" target=\"_blank\">https://facebook.github.io/react/</a>\n\n\n#### redux中文文档\n<a href=\"http://cn.redux.js.org/\" target=\"_blank\">http://cn.redux.js.org/</a>\n\n\n#### redux介绍（segmentfault）\n<a href=\"https://segmentfault.com/a/1190000003503338?_ea=323420\" target=\"_blank\">https://segmentfault.com/a/1190000003503338?_ea=323420</a>\n\n\n#### react入门实践\n<a href=\"http://www.jianshu.com/p/808bb43b3744\" target=\"_blank\">http://www.jianshu.com/p/808bb43b3744</a>\n\n\n#### 阮一峰react系列教程\n<a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" >http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html</a>\n\n#### imwebRedux文章\n<a href=\"http://imweb.io/topic/57711e37f0a5487b05f325b5\" target=\"_blank\">http://imweb.io/topic/57711e37f0a5487b05f325b5</a>\n\n\n\n","source":"_posts/react.md","raw":"---\ntitle: React、Flux以及Redux小结\ndate: 2018/04/10\ntag: [js,react,flux,redux]\ncategory: 技术\n---\n\nReact和Vue是当下前端最流行的Javascript框架。作为一名现代化前端工程师，学习这两个框架已经成为了标配。\n本人学习这两个框架已经有很长一段时间了，当下对其做一些基本概念梳理总结，利人利己。\n\n\n### Flux\n\n##### Flux是什么\n\nFlux是一种架构思想，专门解决软件结构问题，它和MVC是同一种东西。\n\n##### facebook flux官网描述\n```html\nFlux is the application architecture that Facebook uses for building client-side web applications. \nIt complements React's composable view components by utilizing a unidirectional data flow. \nIt's more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code.\n\n（Flux是Facebook用来构建客户端应用程序的web应用程序架构。它是React单向数据流view组件的补充。它更向是一种模式，而不是一种框架，你只需要使用一点点代码就能立即使用它）\n```\n\n##### Flux结构组成\n```html\nView 视图层\n\nAction 动作 比如视图层发出的消息（比如mouseClick）\n\nDispatcher 派发器 接受Actions，执行回调函数\n\nStore 数据层 用来存放应用状态 Store变动的时候，会触发View更新\n```\n\n##### Flux最大的特点就是“数据的单向流动”\n\n```html\n1.用户访问View\n\n2.用户触发View发起Action\n\n3.Dispather接收到用户的Action，要求Store进行相应更新\n\n4.Store更新之后通知view更新\n```\n如图所示：（图片来源:http://www.ruanyifeng.com/）\n\n![avatar](http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png)\n\n##### Flux的应用\nFlux是一种架构思想，使用flux就是使用flux的这种思想模式构建程序代码。\n使用flux模式构建的代码能够更容易阅读，修改维护更为简单。\n当然，通其它结构思想一样（如MVC）引入flux模式必然会需要引入一些其它的代码，一定程度上提升了代码的复杂度。\n因此，如果不是项目到达一定的规模，如果不是觉得不用框架开发起来很艰难，那就不需要使用flux框架。\n\n\n---\n\n### React\nReact是一个View层框架，用来渲染视图，不直接操作View，想要操作view只能通过修改state来实现\nstate的改变主要来自两个方面，一个是服务端，另一个是用户行为，其中用户行为占很大一部分。\nReact每个组件都有一个setState方法用来修改当前的state，所以一般把修改state操作都放在各自的组件中。\n但是，随着项目的扩大，业务逻辑越来越复杂，一个state的变化往往对应着多个组件，这样很可能导致混乱。\n此时，我们需要一个对state进行统一管理，这也就是Flux出现的原因了。\n\n\n##### React使用Flux\nFlux在React中主要用来集中管理引起state变化的情况，Flux维护着一个或多个Store，（MVC中的Model），Store中存储着应用用到的所有数据。\n当Action触发的时候，Flux根据Action在对应Store中经过一系列逻辑处理，更新Store。\n当Store发生变化的时候，通常根组件（也可以不是根组件）会去获取新的store，然后更新state，然后利用React的单项数据流的特点一层层的向下传递state以更新view。\n\n\n##### Redux\nRedux的作用和Flux相同，可以看作是Flux的一种实现\n\n当然，Redux既然独立存在，肯定是有其独特之处，同Flux相比，Redux有以下不同。\n```html\n1.Redux没有 Dispatcher，只有Reducer，Reducer是一个纯函数，它接受两个参数(previousState、action)，返回一个新的state；\n  Redux中含有多个reducer，多个reducer通过combineReducers方法合并为一个根reducer，这个根reducer负责维护完整的state；\n  当action发起的时候，store会调用dispatch方法，向某个特定的reducer纯函数传递该action，以更新state。\n\n2.Flux有多个store；在store中完成新的state的推导；每一个store都只对对应的view，每次更新都只通知对应的view\n  Redux只有一个store；Redux的更新逻辑也不在store中执行，而是放在reducer中；Redux中所有reducer都由根Reducer统一管理，对应一个根View。\n```\n\n##### Redux Store 以及 Redux State\nStore保存所有的数据，可以将其看做是一个容器。整个应用只能有一个Store\n``` javascript\nimport {createStore} from \"redux\";\n\nconst store = createStore(fn);\n```\n\n如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合就叫做State\n``` javascript\nimport {createStore} from \"redux\";\n\nconst store = createStore(fn);\n\nconst state = store.getState();\n```\n\nRedux规定，一个State对应一个View。只要State相同，View就相同。\n知道State就能知道View是什么样，反之亦然。\n\n##### Redux Action\nAction为View发出的通知，表示State将要发生变化\nAction描述当前发生的事情。改变State的唯一办法就是通过Action将数据运送到Store\n``` javascript\nconst action = {\n  type: \"ADD_TODO\", // Action的名称\n  payload: \"LEARN Redux\" // Action携带的字符串信息\n};\n```\n\n#### Redux Action Creater\n定义一个函数，用来自动生成Action，这个函数就叫做Action Creator\n\n``` javascript\nconst ADD_TODO = \"添加 TODO\";\n\nfunction addToDo(text) {\n    return {\n        type: ADD_TODO,\n        text\n    }\n}\n\nconst action = addToDo(Learn Redux);\n```\n\n#### Redux store.dispatch()\nstore.dispatch()是View唯一发出Action的方法\n\n``` javascript\nimport {createStore} form \"redux\";\n\nconst store = createStore(fn);\n\nstore.dispatch({\n  type: \"ADD_TODO\",\n  payload: \"Learn Redux\",\n});\n```\nstore.dispatch接受一个Action对象作为参数，将它发送出去\n\n结合Action Creater\n\n``` javascript\nstore.dispatch(addToDo(\"Learn Redux\"));\n```\n\n##### Redux Reducer\nStore收到一个Action之后必须给出一个新的State，这样View才会发生变化。\n这种State的计算过程就叫做Reducer，Reducer是一个纯函数，它接受Action和当前的State作为参数，返回一个新的State\n``` javascript\nconst Reducer = function(state, action){\n  //...\n  return new_state;\n}\n```\n\n##### Redux subscribe()\nStore允许使用Store.subscribe方法设置监听函数，一旦State发生变化就自动执行这个函数\n\n``` javascript\nimport {createStore} from \"redux\";\nconst store = createStore(reducer);\n\nstore.subscribe(listener);\n```\n\n解除监听，store.subscribe方法返回一个函数，调用这个函数即可解除监听\n\n``` javascript\nconst unsubscribe = store.subscribe(() => \n    console.log(store.getState());\n);\nunsubscribe();\n```\n\n##### Redux Store的实现\nStore提供了三个方法\n\n``` javascript\nstore.getState();\n\nstore.dispatch();\n\nstore.subscribe();\n```\n\n``` javascript\nimport {createStore} from \"redux\";\nlet {subscribe, dispatch, getState} = createStore(reducer);\n```\n\n##### Reducer拆分\nReducer负责生成State，由于一个项目只有一个State，导致这个State会非常庞大。\n所以，Redux提供了解决方案，那就是将其拆分开来，同时Redux又提供了一个combineReducers方法\n用这个方法可以将各个子Reducer合并成一个大的Reducer。\n\n``` javascript\nimport {combineReducers} form \"redux\";\n\nconst chatReducer = combineReducers(){\n    chatLog,\n    statusMessage,\n    userName\n};\n\nexport default todoApp;\n```\n\n可以将所有的子Reducer放在一个文件里面，然后统一引入\n\n``` javascript\nimport {combineReducers} form \"redux\";\nimport * as reducers from \"./reducers\";\n\nconst reducer = combineReducers(reducers); \n```\n\n\n##### Reducer工作流程\n1.用户发出action\n``` javascript\nstore.dispatch(actioin);\n```\n\n2.Store自动调用Reducer，并传入两个参数（当前State和Action）。Reducer会返回新的State\n``` javascript\nlet nextState = todoApp(previousState, action);\n```\n\n3.State出现变化之后，Store调用监听函数\n``` javascript\nstore.subscribe(listener);\n```\nlistener可以通过store.getState()获取当前状态。\n\n``` javascript\nfunction listener() {\n  let newState = store.getState();\n  component.setState(newState);\n}\n```\n\n\n---------------------------------------\n\n### 传送门\n\n#### babel官网\n<a href=\"https://babeljs.io/\" target=\"_blank\">https://babeljs.io/</a>\n\n\n#### react官网\n<a href=\"https://facebook.github.io/react/\" target=\"_blank\">https://facebook.github.io/react/</a>\n\n\n#### redux中文文档\n<a href=\"http://cn.redux.js.org/\" target=\"_blank\">http://cn.redux.js.org/</a>\n\n\n#### redux介绍（segmentfault）\n<a href=\"https://segmentfault.com/a/1190000003503338?_ea=323420\" target=\"_blank\">https://segmentfault.com/a/1190000003503338?_ea=323420</a>\n\n\n#### react入门实践\n<a href=\"http://www.jianshu.com/p/808bb43b3744\" target=\"_blank\">http://www.jianshu.com/p/808bb43b3744</a>\n\n\n#### 阮一峰react系列教程\n<a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" >http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html</a>\n\n#### imwebRedux文章\n<a href=\"http://imweb.io/topic/57711e37f0a5487b05f325b5\" target=\"_blank\">http://imweb.io/topic/57711e37f0a5487b05f325b5</a>\n\n\n\n","slug":"react","published":1,"updated":"2018-05-22T12:35:24.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigk2001txwqt641loqoq","content":"<p>React和Vue是当下前端最流行的Javascript框架。作为一名现代化前端工程师，学习这两个框架已经成为了标配。<br>本人学习这两个框架已经有很长一段时间了，当下对其做一些基本概念梳理总结，利人利己。</p>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><h5 id=\"Flux是什么\"><a href=\"#Flux是什么\" class=\"headerlink\" title=\"Flux是什么\"></a>Flux是什么</h5><p>Flux是一种架构思想，专门解决软件结构问题，它和MVC是同一种东西。</p>\n<h5 id=\"facebook-flux官网描述\"><a href=\"#facebook-flux官网描述\" class=\"headerlink\" title=\"facebook flux官网描述\"></a>facebook flux官网描述</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flux is the application architecture that Facebook uses for building client-side web applications. </span><br><span class=\"line\">It complements React's composable view components by utilizing a unidirectional data flow. </span><br><span class=\"line\">It's more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code.</span><br><span class=\"line\"></span><br><span class=\"line\">（Flux是Facebook用来构建客户端应用程序的web应用程序架构。它是React单向数据流view组件的补充。它更向是一种模式，而不是一种框架，你只需要使用一点点代码就能立即使用它）</span><br></pre></td></tr></table></figure>\n<h5 id=\"Flux结构组成\"><a href=\"#Flux结构组成\" class=\"headerlink\" title=\"Flux结构组成\"></a>Flux结构组成</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View 视图层</span><br><span class=\"line\"></span><br><span class=\"line\">Action 动作 比如视图层发出的消息（比如mouseClick）</span><br><span class=\"line\"></span><br><span class=\"line\">Dispatcher 派发器 接受Actions，执行回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">Store 数据层 用来存放应用状态 Store变动的时候，会触发View更新</span><br></pre></td></tr></table></figure>\n<h5 id=\"Flux最大的特点就是“数据的单向流动”\"><a href=\"#Flux最大的特点就是“数据的单向流动”\" class=\"headerlink\" title=\"Flux最大的特点就是“数据的单向流动”\"></a>Flux最大的特点就是“数据的单向流动”</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.用户访问View</span><br><span class=\"line\"></span><br><span class=\"line\">2.用户触发View发起Action</span><br><span class=\"line\"></span><br><span class=\"line\">3.Dispather接收到用户的Action，要求Store进行相应更新</span><br><span class=\"line\"></span><br><span class=\"line\">4.Store更新之后通知view更新</span><br></pre></td></tr></table></figure>\n<p>如图所示：（图片来源:<a href=\"http://www.ruanyifeng.com/）\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/）</a></p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png\" alt=\"avatar\"></p>\n<h5 id=\"Flux的应用\"><a href=\"#Flux的应用\" class=\"headerlink\" title=\"Flux的应用\"></a>Flux的应用</h5><p>Flux是一种架构思想，使用flux就是使用flux的这种思想模式构建程序代码。<br>使用flux模式构建的代码能够更容易阅读，修改维护更为简单。<br>当然，通其它结构思想一样（如MVC）引入flux模式必然会需要引入一些其它的代码，一定程度上提升了代码的复杂度。<br>因此，如果不是项目到达一定的规模，如果不是觉得不用框架开发起来很艰难，那就不需要使用flux框架。</p>\n<hr>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React是一个View层框架，用来渲染视图，不直接操作View，想要操作view只能通过修改state来实现<br>state的改变主要来自两个方面，一个是服务端，另一个是用户行为，其中用户行为占很大一部分。<br>React每个组件都有一个setState方法用来修改当前的state，所以一般把修改state操作都放在各自的组件中。<br>但是，随着项目的扩大，业务逻辑越来越复杂，一个state的变化往往对应着多个组件，这样很可能导致混乱。<br>此时，我们需要一个对state进行统一管理，这也就是Flux出现的原因了。</p>\n<h5 id=\"React使用Flux\"><a href=\"#React使用Flux\" class=\"headerlink\" title=\"React使用Flux\"></a>React使用Flux</h5><p>Flux在React中主要用来集中管理引起state变化的情况，Flux维护着一个或多个Store，（MVC中的Model），Store中存储着应用用到的所有数据。<br>当Action触发的时候，Flux根据Action在对应Store中经过一系列逻辑处理，更新Store。<br>当Store发生变化的时候，通常根组件（也可以不是根组件）会去获取新的store，然后更新state，然后利用React的单项数据流的特点一层层的向下传递state以更新view。</p>\n<h5 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h5><p>Redux的作用和Flux相同，可以看作是Flux的一种实现</p>\n<p>当然，Redux既然独立存在，肯定是有其独特之处，同Flux相比，Redux有以下不同。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Redux没有 Dispatcher，只有Reducer，Reducer是一个纯函数，它接受两个参数(previousState、action)，返回一个新的state；</span><br><span class=\"line\">  Redux中含有多个reducer，多个reducer通过combineReducers方法合并为一个根reducer，这个根reducer负责维护完整的state；</span><br><span class=\"line\">  当action发起的时候，store会调用dispatch方法，向某个特定的reducer纯函数传递该action，以更新state。</span><br><span class=\"line\"></span><br><span class=\"line\">2.Flux有多个store；在store中完成新的state的推导；每一个store都只对对应的view，每次更新都只通知对应的view</span><br><span class=\"line\">  Redux只有一个store；Redux的更新逻辑也不在store中执行，而是放在reducer中；Redux中所有reducer都由根Reducer统一管理，对应一个根View。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Redux-Store-以及-Redux-State\"><a href=\"#Redux-Store-以及-Redux-State\" class=\"headerlink\" title=\"Redux Store 以及 Redux State\"></a>Redux Store 以及 Redux State</h5><p>Store保存所有的数据，可以将其看做是一个容器。整个应用只能有一个Store<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br></pre></td></tr></table></figure></p>\n<p>如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合就叫做State<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = store.getState();</span><br></pre></td></tr></table></figure></p>\n<p>Redux规定，一个State对应一个View。只要State相同，View就相同。<br>知道State就能知道View是什么样，反之亦然。</p>\n<h5 id=\"Redux-Action\"><a href=\"#Redux-Action\" class=\"headerlink\" title=\"Redux Action\"></a>Redux Action</h5><p>Action为View发出的通知，表示State将要发生变化<br>Action描述当前发生的事情。改变State的唯一办法就是通过Action将数据运送到Store<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"ADD_TODO\"</span>, <span class=\"comment\">// Action的名称</span></span><br><span class=\"line\">  payload: <span class=\"string\">\"LEARN Redux\"</span> <span class=\"comment\">// Action携带的字符串信息</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Redux-Action-Creater\"><a href=\"#Redux-Action-Creater\" class=\"headerlink\" title=\"Redux Action Creater\"></a>Redux Action Creater</h4><p>定义一个函数，用来自动生成Action，这个函数就叫做Action Creator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">\"添加 TODO\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToDo</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: ADD_TODO,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = addToDo(Learn Redux);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redux-store-dispatch\"><a href=\"#Redux-store-dispatch\" class=\"headerlink\" title=\"Redux store.dispatch()\"></a>Redux store.dispatch()</h4><p>store.dispatch()是View唯一发出Action的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; form <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"ADD_TODO\"</span>,</span><br><span class=\"line\">  payload: <span class=\"string\">\"Learn Redux\"</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>store.dispatch接受一个Action对象作为参数，将它发送出去</p>\n<p>结合Action Creater</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(addToDo(<span class=\"string\">\"Learn Redux\"</span>));</span><br></pre></td></tr></table></figure>\n<h5 id=\"Redux-Reducer\"><a href=\"#Redux-Reducer\" class=\"headerlink\" title=\"Redux Reducer\"></a>Redux Reducer</h5><p>Store收到一个Action之后必须给出一个新的State，这样View才会发生变化。<br>这种State的计算过程就叫做Reducer，Reducer是一个纯函数，它接受Action和当前的State作为参数，返回一个新的State<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Reducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, action</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> new_state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Redux-subscribe\"><a href=\"#Redux-subscribe\" class=\"headerlink\" title=\"Redux subscribe()\"></a>Redux subscribe()</h5><p>Store允许使用Store.subscribe方法设置监听函数，一旦State发生变化就自动执行这个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</span><br><span class=\"line\"></span><br><span class=\"line\">store.subscribe(listener);</span><br></pre></td></tr></table></figure>\n<p>解除监听，store.subscribe方法返回一个函数，调用这个函数即可解除监听</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unsubscribe = store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(store.getState());</span><br><span class=\"line\">);</span><br><span class=\"line\">unsubscribe();</span><br></pre></td></tr></table></figure>\n<h5 id=\"Redux-Store的实现\"><a href=\"#Redux-Store的实现\" class=\"headerlink\" title=\"Redux Store的实现\"></a>Redux Store的实现</h5><p>Store提供了三个方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.getState();</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch();</span><br><span class=\"line\"></span><br><span class=\"line\">store.subscribe();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;subscribe, dispatch, getState&#125; = createStore(reducer);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Reducer拆分\"><a href=\"#Reducer拆分\" class=\"headerlink\" title=\"Reducer拆分\"></a>Reducer拆分</h5><p>Reducer负责生成State，由于一个项目只有一个State，导致这个State会非常庞大。<br>所以，Redux提供了解决方案，那就是将其拆分开来，同时Redux又提供了一个combineReducers方法<br>用这个方法可以将各个子Reducer合并成一个大的Reducer。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;combineReducers&#125; form <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> chatReducer = combineReducers()&#123;</span><br><span class=\"line\">    chatLog,</span><br><span class=\"line\">    statusMessage,</span><br><span class=\"line\">    userName</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> todoApp;</span><br></pre></td></tr></table></figure>\n<p>可以将所有的子Reducer放在一个文件里面，然后统一引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;combineReducers&#125; form <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">\"./reducers\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(reducers);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Reducer工作流程\"><a href=\"#Reducer工作流程\" class=\"headerlink\" title=\"Reducer工作流程\"></a>Reducer工作流程</h5><p>1.用户发出action<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(actioin);</span><br></pre></td></tr></table></figure></p>\n<p>2.Store自动调用Reducer，并传入两个参数（当前State和Action）。Reducer会返回新的State<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nextState = todoApp(previousState, action);</span><br></pre></td></tr></table></figure></p>\n<p>3.State出现变化之后，Store调用监听函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.subscribe(listener);</span><br></pre></td></tr></table></figure></p>\n<p>listener可以通过store.getState()获取当前状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newState = store.getState();</span><br><span class=\"line\">  component.setState(newState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3><h4 id=\"babel官网\"><a href=\"#babel官网\" class=\"headerlink\" title=\"babel官网\"></a>babel官网</h4><p><a href=\"https://babeljs.io/\" target=\"_blank\">https://babeljs.io/</a></p>\n<h4 id=\"react官网\"><a href=\"#react官网\" class=\"headerlink\" title=\"react官网\"></a>react官网</h4><p><a href=\"https://facebook.github.io/react/\" target=\"_blank\">https://facebook.github.io/react/</a></p>\n<h4 id=\"redux中文文档\"><a href=\"#redux中文文档\" class=\"headerlink\" title=\"redux中文文档\"></a>redux中文文档</h4><p><a href=\"http://cn.redux.js.org/\" target=\"_blank\">http://cn.redux.js.org/</a></p>\n<h4 id=\"redux介绍（segmentfault）\"><a href=\"#redux介绍（segmentfault）\" class=\"headerlink\" title=\"redux介绍（segmentfault）\"></a>redux介绍（segmentfault）</h4><p><a href=\"https://segmentfault.com/a/1190000003503338?_ea=323420\" target=\"_blank\">https://segmentfault.com/a/1190000003503338?_ea=323420</a></p>\n<h4 id=\"react入门实践\"><a href=\"#react入门实践\" class=\"headerlink\" title=\"react入门实践\"></a>react入门实践</h4><p><a href=\"http://www.jianshu.com/p/808bb43b3744\" target=\"_blank\">http://www.jianshu.com/p/808bb43b3744</a></p>\n<h4 id=\"阮一峰react系列教程\"><a href=\"#阮一峰react系列教程\" class=\"headerlink\" title=\"阮一峰react系列教程\"></a>阮一峰react系列教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\">http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html</a></p>\n<h4 id=\"imwebRedux文章\"><a href=\"#imwebRedux文章\" class=\"headerlink\" title=\"imwebRedux文章\"></a>imwebRedux文章</h4><p><a href=\"http://imweb.io/topic/57711e37f0a5487b05f325b5\" target=\"_blank\">http://imweb.io/topic/57711e37f0a5487b05f325b5</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>React和Vue是当下前端最流行的Javascript框架。作为一名现代化前端工程师，学习这两个框架已经成为了标配。<br>本人学习这两个框架已经有很长一段时间了，当下对其做一些基本概念梳理总结，利人利己。</p>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><h5 id=\"Flux是什么\"><a href=\"#Flux是什么\" class=\"headerlink\" title=\"Flux是什么\"></a>Flux是什么</h5><p>Flux是一种架构思想，专门解决软件结构问题，它和MVC是同一种东西。</p>\n<h5 id=\"facebook-flux官网描述\"><a href=\"#facebook-flux官网描述\" class=\"headerlink\" title=\"facebook flux官网描述\"></a>facebook flux官网描述</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flux is the application architecture that Facebook uses for building client-side web applications. </span><br><span class=\"line\">It complements React's composable view components by utilizing a unidirectional data flow. </span><br><span class=\"line\">It's more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code.</span><br><span class=\"line\"></span><br><span class=\"line\">（Flux是Facebook用来构建客户端应用程序的web应用程序架构。它是React单向数据流view组件的补充。它更向是一种模式，而不是一种框架，你只需要使用一点点代码就能立即使用它）</span><br></pre></td></tr></table></figure>\n<h5 id=\"Flux结构组成\"><a href=\"#Flux结构组成\" class=\"headerlink\" title=\"Flux结构组成\"></a>Flux结构组成</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View 视图层</span><br><span class=\"line\"></span><br><span class=\"line\">Action 动作 比如视图层发出的消息（比如mouseClick）</span><br><span class=\"line\"></span><br><span class=\"line\">Dispatcher 派发器 接受Actions，执行回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">Store 数据层 用来存放应用状态 Store变动的时候，会触发View更新</span><br></pre></td></tr></table></figure>\n<h5 id=\"Flux最大的特点就是“数据的单向流动”\"><a href=\"#Flux最大的特点就是“数据的单向流动”\" class=\"headerlink\" title=\"Flux最大的特点就是“数据的单向流动”\"></a>Flux最大的特点就是“数据的单向流动”</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.用户访问View</span><br><span class=\"line\"></span><br><span class=\"line\">2.用户触发View发起Action</span><br><span class=\"line\"></span><br><span class=\"line\">3.Dispather接收到用户的Action，要求Store进行相应更新</span><br><span class=\"line\"></span><br><span class=\"line\">4.Store更新之后通知view更新</span><br></pre></td></tr></table></figure>\n<p>如图所示：（图片来源:<a href=\"http://www.ruanyifeng.com/）\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/）</a></p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png\" alt=\"avatar\"></p>\n<h5 id=\"Flux的应用\"><a href=\"#Flux的应用\" class=\"headerlink\" title=\"Flux的应用\"></a>Flux的应用</h5><p>Flux是一种架构思想，使用flux就是使用flux的这种思想模式构建程序代码。<br>使用flux模式构建的代码能够更容易阅读，修改维护更为简单。<br>当然，通其它结构思想一样（如MVC）引入flux模式必然会需要引入一些其它的代码，一定程度上提升了代码的复杂度。<br>因此，如果不是项目到达一定的规模，如果不是觉得不用框架开发起来很艰难，那就不需要使用flux框架。</p>\n<hr>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React是一个View层框架，用来渲染视图，不直接操作View，想要操作view只能通过修改state来实现<br>state的改变主要来自两个方面，一个是服务端，另一个是用户行为，其中用户行为占很大一部分。<br>React每个组件都有一个setState方法用来修改当前的state，所以一般把修改state操作都放在各自的组件中。<br>但是，随着项目的扩大，业务逻辑越来越复杂，一个state的变化往往对应着多个组件，这样很可能导致混乱。<br>此时，我们需要一个对state进行统一管理，这也就是Flux出现的原因了。</p>\n<h5 id=\"React使用Flux\"><a href=\"#React使用Flux\" class=\"headerlink\" title=\"React使用Flux\"></a>React使用Flux</h5><p>Flux在React中主要用来集中管理引起state变化的情况，Flux维护着一个或多个Store，（MVC中的Model），Store中存储着应用用到的所有数据。<br>当Action触发的时候，Flux根据Action在对应Store中经过一系列逻辑处理，更新Store。<br>当Store发生变化的时候，通常根组件（也可以不是根组件）会去获取新的store，然后更新state，然后利用React的单项数据流的特点一层层的向下传递state以更新view。</p>\n<h5 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h5><p>Redux的作用和Flux相同，可以看作是Flux的一种实现</p>\n<p>当然，Redux既然独立存在，肯定是有其独特之处，同Flux相比，Redux有以下不同。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Redux没有 Dispatcher，只有Reducer，Reducer是一个纯函数，它接受两个参数(previousState、action)，返回一个新的state；</span><br><span class=\"line\">  Redux中含有多个reducer，多个reducer通过combineReducers方法合并为一个根reducer，这个根reducer负责维护完整的state；</span><br><span class=\"line\">  当action发起的时候，store会调用dispatch方法，向某个特定的reducer纯函数传递该action，以更新state。</span><br><span class=\"line\"></span><br><span class=\"line\">2.Flux有多个store；在store中完成新的state的推导；每一个store都只对对应的view，每次更新都只通知对应的view</span><br><span class=\"line\">  Redux只有一个store；Redux的更新逻辑也不在store中执行，而是放在reducer中；Redux中所有reducer都由根Reducer统一管理，对应一个根View。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Redux-Store-以及-Redux-State\"><a href=\"#Redux-Store-以及-Redux-State\" class=\"headerlink\" title=\"Redux Store 以及 Redux State\"></a>Redux Store 以及 Redux State</h5><p>Store保存所有的数据，可以将其看做是一个容器。整个应用只能有一个Store<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br></pre></td></tr></table></figure></p>\n<p>如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合就叫做State<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = store.getState();</span><br></pre></td></tr></table></figure></p>\n<p>Redux规定，一个State对应一个View。只要State相同，View就相同。<br>知道State就能知道View是什么样，反之亦然。</p>\n<h5 id=\"Redux-Action\"><a href=\"#Redux-Action\" class=\"headerlink\" title=\"Redux Action\"></a>Redux Action</h5><p>Action为View发出的通知，表示State将要发生变化<br>Action描述当前发生的事情。改变State的唯一办法就是通过Action将数据运送到Store<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"ADD_TODO\"</span>, <span class=\"comment\">// Action的名称</span></span><br><span class=\"line\">  payload: <span class=\"string\">\"LEARN Redux\"</span> <span class=\"comment\">// Action携带的字符串信息</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Redux-Action-Creater\"><a href=\"#Redux-Action-Creater\" class=\"headerlink\" title=\"Redux Action Creater\"></a>Redux Action Creater</h4><p>定义一个函数，用来自动生成Action，这个函数就叫做Action Creator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">\"添加 TODO\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToDo</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: ADD_TODO,</span><br><span class=\"line\">        text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = addToDo(Learn Redux);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redux-store-dispatch\"><a href=\"#Redux-store-dispatch\" class=\"headerlink\" title=\"Redux store.dispatch()\"></a>Redux store.dispatch()</h4><p>store.dispatch()是View唯一发出Action的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; form <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"ADD_TODO\"</span>,</span><br><span class=\"line\">  payload: <span class=\"string\">\"Learn Redux\"</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>store.dispatch接受一个Action对象作为参数，将它发送出去</p>\n<p>结合Action Creater</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(addToDo(<span class=\"string\">\"Learn Redux\"</span>));</span><br></pre></td></tr></table></figure>\n<h5 id=\"Redux-Reducer\"><a href=\"#Redux-Reducer\" class=\"headerlink\" title=\"Redux Reducer\"></a>Redux Reducer</h5><p>Store收到一个Action之后必须给出一个新的State，这样View才会发生变化。<br>这种State的计算过程就叫做Reducer，Reducer是一个纯函数，它接受Action和当前的State作为参数，返回一个新的State<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Reducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, action</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> new_state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Redux-subscribe\"><a href=\"#Redux-subscribe\" class=\"headerlink\" title=\"Redux subscribe()\"></a>Redux subscribe()</h5><p>Store允许使用Store.subscribe方法设置监听函数，一旦State发生变化就自动执行这个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</span><br><span class=\"line\"></span><br><span class=\"line\">store.subscribe(listener);</span><br></pre></td></tr></table></figure>\n<p>解除监听，store.subscribe方法返回一个函数，调用这个函数即可解除监听</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unsubscribe = store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(store.getState());</span><br><span class=\"line\">);</span><br><span class=\"line\">unsubscribe();</span><br></pre></td></tr></table></figure>\n<h5 id=\"Redux-Store的实现\"><a href=\"#Redux-Store的实现\" class=\"headerlink\" title=\"Redux Store的实现\"></a>Redux Store的实现</h5><p>Store提供了三个方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.getState();</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch();</span><br><span class=\"line\"></span><br><span class=\"line\">store.subscribe();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;subscribe, dispatch, getState&#125; = createStore(reducer);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Reducer拆分\"><a href=\"#Reducer拆分\" class=\"headerlink\" title=\"Reducer拆分\"></a>Reducer拆分</h5><p>Reducer负责生成State，由于一个项目只有一个State，导致这个State会非常庞大。<br>所以，Redux提供了解决方案，那就是将其拆分开来，同时Redux又提供了一个combineReducers方法<br>用这个方法可以将各个子Reducer合并成一个大的Reducer。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;combineReducers&#125; form <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> chatReducer = combineReducers()&#123;</span><br><span class=\"line\">    chatLog,</span><br><span class=\"line\">    statusMessage,</span><br><span class=\"line\">    userName</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> todoApp;</span><br></pre></td></tr></table></figure>\n<p>可以将所有的子Reducer放在一个文件里面，然后统一引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;combineReducers&#125; form <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">\"./reducers\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(reducers);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Reducer工作流程\"><a href=\"#Reducer工作流程\" class=\"headerlink\" title=\"Reducer工作流程\"></a>Reducer工作流程</h5><p>1.用户发出action<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(actioin);</span><br></pre></td></tr></table></figure></p>\n<p>2.Store自动调用Reducer，并传入两个参数（当前State和Action）。Reducer会返回新的State<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nextState = todoApp(previousState, action);</span><br></pre></td></tr></table></figure></p>\n<p>3.State出现变化之后，Store调用监听函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.subscribe(listener);</span><br></pre></td></tr></table></figure></p>\n<p>listener可以通过store.getState()获取当前状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newState = store.getState();</span><br><span class=\"line\">  component.setState(newState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3><h4 id=\"babel官网\"><a href=\"#babel官网\" class=\"headerlink\" title=\"babel官网\"></a>babel官网</h4><p><a href=\"https://babeljs.io/\" target=\"_blank\">https://babeljs.io/</a></p>\n<h4 id=\"react官网\"><a href=\"#react官网\" class=\"headerlink\" title=\"react官网\"></a>react官网</h4><p><a href=\"https://facebook.github.io/react/\" target=\"_blank\">https://facebook.github.io/react/</a></p>\n<h4 id=\"redux中文文档\"><a href=\"#redux中文文档\" class=\"headerlink\" title=\"redux中文文档\"></a>redux中文文档</h4><p><a href=\"http://cn.redux.js.org/\" target=\"_blank\">http://cn.redux.js.org/</a></p>\n<h4 id=\"redux介绍（segmentfault）\"><a href=\"#redux介绍（segmentfault）\" class=\"headerlink\" title=\"redux介绍（segmentfault）\"></a>redux介绍（segmentfault）</h4><p><a href=\"https://segmentfault.com/a/1190000003503338?_ea=323420\" target=\"_blank\">https://segmentfault.com/a/1190000003503338?_ea=323420</a></p>\n<h4 id=\"react入门实践\"><a href=\"#react入门实践\" class=\"headerlink\" title=\"react入门实践\"></a>react入门实践</h4><p><a href=\"http://www.jianshu.com/p/808bb43b3744\" target=\"_blank\">http://www.jianshu.com/p/808bb43b3744</a></p>\n<h4 id=\"阮一峰react系列教程\"><a href=\"#阮一峰react系列教程\" class=\"headerlink\" title=\"阮一峰react系列教程\"></a>阮一峰react系列教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\">http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html</a></p>\n<h4 id=\"imwebRedux文章\"><a href=\"#imwebRedux文章\" class=\"headerlink\" title=\"imwebRedux文章\"></a>imwebRedux文章</h4><p><a href=\"http://imweb.io/topic/57711e37f0a5487b05f325b5\" target=\"_blank\">http://imweb.io/topic/57711e37f0a5487b05f325b5</a></p>\n"},{"title":"Webpack配置入门","date":"2017-03-05T16:00:00.000Z","_content":"\nWebpack是一个前端资源加载以及打包工具。\n只需要简单的配置即可实现前端各种工程化的操作。\nWebpack结合其Loader、Plugin能够完成复杂的前端自动化构建。\n除此之外它还可以与Gulp等其它工程化工具结合使用。\n\n### Webpack的Loader和Plugin\nLoader是Webpack中的一个重要概念，它是指将一段代码转换为另外一段代码的Webpack插件。\nLoader被用来加载某些资源文件。\n因为Webpack本身只能打包commonjs规范的js文件，对于其它资源，例如css、图片或者其他的语法集（jsx、coffee）是没有办法加载的。这就需要对应的loader将资源转化，加载进来。\n\nPlugin用于扩展Webpack的功能。\n它直接作用于Webpack，Loader也是变相扩展了Webpack的功能，之不过只是专注于资源的加载和转化。\nPlugin的功能更加丰富。不仅局限于资源的加载。\n\n### Webpack的Loader\n\n处理样式，转成css\n``` html\ncss-loader：遍历css文件，找到url()然后处理它们\n\nstyle-loader：把css代码插入到页面的style标签中\n\nless-loader：和css-loader、style-loader合作让webpack支持less语法\n\nsass-loader：让webpack支持sass语法\n```\n\n图片处理，两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中\n``` html\nurl-loader：\n\nfile-loader：\n```\n\n处理js，将es6或更高级的代码转成es5的代码。\n``` html\nbabel-loader\n\nbabel-preset-es2015\n\nbabel-preset-react\n```\n\n将js模块暴露到全局.\n``` html\nexpose-loader\n```\n\n---\n\n### Webpack的Plugin\n\n代码热替换\n``` html\nHotModuleReplacementPlugin\n```\n\n生成html文件\n``` html\nHtmlWebpackPlugin\n```\n\n将css成生文件，而非内联\n``` html\nExtractTextPlugin\n```\n\n报错但不退出webpack进程\n``` html\nNoErrorsPlugin\n```\n\n代码丑化,开发过程中不建议打开\n``` html\nUglifyJsPlugin\n```\n\n多个 html共用一个js文件(chunk)\n``` html\nCommonsChunkPlugin\n```\n\n清理文件夹\n``` html\nClean\n```\n\n调用模块的别名,例如想在js中用$，如果通过webpack加载，需要将$与jQuery对应起来\n\n``` html\nProvidePlugin\n```\n\n定义一些全局的变量,我们可以在模块当中直接使用这些变量，无需作任何声明\n\n``` html\nDefinePlugin\n```\n\n### webpack热更新以及完整示例\n\n热更新，可以在修改代码后，不用刷新浏览器就能看到修改后的效果。而它的另一个好处则是可以只替换修改部分相关的代码，大大的缩短了构建的时间。Webpack的热更新是它的一个特色功能，通过启动一个服务，在内存中运行，速度相对很快。\n\n有几种配置方法都能实现热更新的\n这里介绍一种通过express+webpack-hot-middleware+webpack-dev-middleware中间件来实现。\n\n在网站根目录下创建如下文件\n``` html\n./webpack-dev-server.js\n```\n\n``` javascript\n// 引入express\nlet express = require('express');\n\n// 引入webpack\nlet webpack = require('webpack');\n\n// 结合webpack-dev-middleware使用的middleware\n// 它可以实现浏览器的无刷新更新（hot reload）。\n// 这也是webpack文档里常说的HMR（Hot Module Replacement）。\nlet webpackHotMiddleware = require('webpack-hot-middleware');\n\n// 处理静态资源的中间件\nlet webpackDevMiddleware = require(\"webpack-dev-middleware\");\n\n// webpack配置文件\nlet webpackConfig = require('./webpack.config.js');\n\n// webpack服务ip端口配置\nlet serverConfig = require('./config/server.js');\n\nlet app = new express();\n\nlet serverOptions = {\n  publicPath: webpackConfig.output.publicPath,\n  contentBase: 'http://' + serverConfig.HOST + ':' + serverConfig.PORT,\n  quiet: false,\n  noInfo: false,\n  hot: true,\n  lazy: false,\n  stats: {\n    chunks : false,\n    chunkModules : false,\n    colors : true\n  },\n};\n\nlet compiler = webpack(webpackConfig);\napp.use(webpackDevMiddleware(compiler, serverOptions));\napp.use(webpackHotMiddleware(compiler));\n\nvar router = express.Router()\nrouter.get('/', function (req, res, next) {\n  res.render('/index', { message: 'Hey there!'});\n})\napp.use(router)\n\napp.listen(serverConfig.PORT, function onAppListening(err) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.info('==> 🚧  Webpack development server listening on port %s', serverConfig.PORT);\n  }\n});\n```\n\n``` html\n./webpack.config.js\n```\n\n``` javascript\n'use strict';\nlet webpack = require('webpack');\nlet path = require('path');\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\nlet serverConfig = require('./config/server.js');\n\nlet config = {\n  devtool: 'source-map',\n  context: path.join(__dirname, './'),\n  entry: {\n    index: [\n      'webpack-hot-middleware/client?reload=true&path=http://' + serverConfig.HOST + ':' + serverConfig.PORT + '/__webpack_hmr',\n      './static/js/Index.js'\n    ] // reload=true是用于当需要刷新的时候允许刷新页面\n  },\n  output: {\n    publicPath:'/',\n    path: path.resolve(__dirname, './'),\n    filename: 'staticPub/js/[name].entry.js'\n  },\n\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loaders: ['babel-loader'],\n      exclude: /node_modules/,\n    },{\n      test: /\\.(css|scss)$/,\n      loader: 'style-loader?sourceMap=true!css-loader?sourceMap=true'\n    },{\n      test: /\\.scss$/,\n      loader: 'sass-loader?sourceMap=true'\n    },{\n      test: /\\.woff|\\.woff2|\\.svg|.eot|\\.ttf/,\n      loader: 'url?prefix=font/&limit=10000',\n    }]\n  },\n\n  //devtool: false,\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),    \n    new webpack.optimize.UglifyJsPlugin({\n      sourceMap: true,\n      mangle: true,\n      compress: {\n        warnings: false,\n      },\n    }),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production')\n      }\n    }),\n    new HtmlWebpackPlugin({\n      favicon: path.join(__dirname, './favicon.ico'),\n      title: '标题',\n      filename: './index.html',\n      template: path.join(__dirname, './static/html/index.html'),\n      inject: true,\n      hash: false,    // 为静态资源生成hash值\n      minify: {       // 压缩HTML文件\n        removeComments: false,      // 移除HTML中的注释\n        collapseWhitespace: true    // 删除空白符与换行符\n      }\n    })\n  ],\n  resolve: {\n    //定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全\n    extensions: ['.js', '.jsx', 'es6', 'css', 'scss', 'png', 'jpg', 'jpeg']\n  }\n};\n\nmodule.exports = config;\n```\n\n``` html\n./config/server.js // 非必须，这里将其拆分出来\n```\n\n``` javascript\n/**\n * 服务器配置\n */\nconst config = {\n    HOST: '127.0.0.1',\n    PORT: 3000\n}\nmodule.exports = config;\n```\n\n### 相关链接\n\n## webpack指南：\n\nhttps://webpack.toobug.net/zh-cn/chapter4/using-loaders.html\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/webpack.md","raw":"---\ntitle: Webpack配置入门\ndate: 2017/03/06\ntag: webpack\ncategory: 技术\n---\n\nWebpack是一个前端资源加载以及打包工具。\n只需要简单的配置即可实现前端各种工程化的操作。\nWebpack结合其Loader、Plugin能够完成复杂的前端自动化构建。\n除此之外它还可以与Gulp等其它工程化工具结合使用。\n\n### Webpack的Loader和Plugin\nLoader是Webpack中的一个重要概念，它是指将一段代码转换为另外一段代码的Webpack插件。\nLoader被用来加载某些资源文件。\n因为Webpack本身只能打包commonjs规范的js文件，对于其它资源，例如css、图片或者其他的语法集（jsx、coffee）是没有办法加载的。这就需要对应的loader将资源转化，加载进来。\n\nPlugin用于扩展Webpack的功能。\n它直接作用于Webpack，Loader也是变相扩展了Webpack的功能，之不过只是专注于资源的加载和转化。\nPlugin的功能更加丰富。不仅局限于资源的加载。\n\n### Webpack的Loader\n\n处理样式，转成css\n``` html\ncss-loader：遍历css文件，找到url()然后处理它们\n\nstyle-loader：把css代码插入到页面的style标签中\n\nless-loader：和css-loader、style-loader合作让webpack支持less语法\n\nsass-loader：让webpack支持sass语法\n```\n\n图片处理，两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中\n``` html\nurl-loader：\n\nfile-loader：\n```\n\n处理js，将es6或更高级的代码转成es5的代码。\n``` html\nbabel-loader\n\nbabel-preset-es2015\n\nbabel-preset-react\n```\n\n将js模块暴露到全局.\n``` html\nexpose-loader\n```\n\n---\n\n### Webpack的Plugin\n\n代码热替换\n``` html\nHotModuleReplacementPlugin\n```\n\n生成html文件\n``` html\nHtmlWebpackPlugin\n```\n\n将css成生文件，而非内联\n``` html\nExtractTextPlugin\n```\n\n报错但不退出webpack进程\n``` html\nNoErrorsPlugin\n```\n\n代码丑化,开发过程中不建议打开\n``` html\nUglifyJsPlugin\n```\n\n多个 html共用一个js文件(chunk)\n``` html\nCommonsChunkPlugin\n```\n\n清理文件夹\n``` html\nClean\n```\n\n调用模块的别名,例如想在js中用$，如果通过webpack加载，需要将$与jQuery对应起来\n\n``` html\nProvidePlugin\n```\n\n定义一些全局的变量,我们可以在模块当中直接使用这些变量，无需作任何声明\n\n``` html\nDefinePlugin\n```\n\n### webpack热更新以及完整示例\n\n热更新，可以在修改代码后，不用刷新浏览器就能看到修改后的效果。而它的另一个好处则是可以只替换修改部分相关的代码，大大的缩短了构建的时间。Webpack的热更新是它的一个特色功能，通过启动一个服务，在内存中运行，速度相对很快。\n\n有几种配置方法都能实现热更新的\n这里介绍一种通过express+webpack-hot-middleware+webpack-dev-middleware中间件来实现。\n\n在网站根目录下创建如下文件\n``` html\n./webpack-dev-server.js\n```\n\n``` javascript\n// 引入express\nlet express = require('express');\n\n// 引入webpack\nlet webpack = require('webpack');\n\n// 结合webpack-dev-middleware使用的middleware\n// 它可以实现浏览器的无刷新更新（hot reload）。\n// 这也是webpack文档里常说的HMR（Hot Module Replacement）。\nlet webpackHotMiddleware = require('webpack-hot-middleware');\n\n// 处理静态资源的中间件\nlet webpackDevMiddleware = require(\"webpack-dev-middleware\");\n\n// webpack配置文件\nlet webpackConfig = require('./webpack.config.js');\n\n// webpack服务ip端口配置\nlet serverConfig = require('./config/server.js');\n\nlet app = new express();\n\nlet serverOptions = {\n  publicPath: webpackConfig.output.publicPath,\n  contentBase: 'http://' + serverConfig.HOST + ':' + serverConfig.PORT,\n  quiet: false,\n  noInfo: false,\n  hot: true,\n  lazy: false,\n  stats: {\n    chunks : false,\n    chunkModules : false,\n    colors : true\n  },\n};\n\nlet compiler = webpack(webpackConfig);\napp.use(webpackDevMiddleware(compiler, serverOptions));\napp.use(webpackHotMiddleware(compiler));\n\nvar router = express.Router()\nrouter.get('/', function (req, res, next) {\n  res.render('/index', { message: 'Hey there!'});\n})\napp.use(router)\n\napp.listen(serverConfig.PORT, function onAppListening(err) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.info('==> 🚧  Webpack development server listening on port %s', serverConfig.PORT);\n  }\n});\n```\n\n``` html\n./webpack.config.js\n```\n\n``` javascript\n'use strict';\nlet webpack = require('webpack');\nlet path = require('path');\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\nlet serverConfig = require('./config/server.js');\n\nlet config = {\n  devtool: 'source-map',\n  context: path.join(__dirname, './'),\n  entry: {\n    index: [\n      'webpack-hot-middleware/client?reload=true&path=http://' + serverConfig.HOST + ':' + serverConfig.PORT + '/__webpack_hmr',\n      './static/js/Index.js'\n    ] // reload=true是用于当需要刷新的时候允许刷新页面\n  },\n  output: {\n    publicPath:'/',\n    path: path.resolve(__dirname, './'),\n    filename: 'staticPub/js/[name].entry.js'\n  },\n\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loaders: ['babel-loader'],\n      exclude: /node_modules/,\n    },{\n      test: /\\.(css|scss)$/,\n      loader: 'style-loader?sourceMap=true!css-loader?sourceMap=true'\n    },{\n      test: /\\.scss$/,\n      loader: 'sass-loader?sourceMap=true'\n    },{\n      test: /\\.woff|\\.woff2|\\.svg|.eot|\\.ttf/,\n      loader: 'url?prefix=font/&limit=10000',\n    }]\n  },\n\n  //devtool: false,\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),    \n    new webpack.optimize.UglifyJsPlugin({\n      sourceMap: true,\n      mangle: true,\n      compress: {\n        warnings: false,\n      },\n    }),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production')\n      }\n    }),\n    new HtmlWebpackPlugin({\n      favicon: path.join(__dirname, './favicon.ico'),\n      title: '标题',\n      filename: './index.html',\n      template: path.join(__dirname, './static/html/index.html'),\n      inject: true,\n      hash: false,    // 为静态资源生成hash值\n      minify: {       // 压缩HTML文件\n        removeComments: false,      // 移除HTML中的注释\n        collapseWhitespace: true    // 删除空白符与换行符\n      }\n    })\n  ],\n  resolve: {\n    //定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全\n    extensions: ['.js', '.jsx', 'es6', 'css', 'scss', 'png', 'jpg', 'jpeg']\n  }\n};\n\nmodule.exports = config;\n```\n\n``` html\n./config/server.js // 非必须，这里将其拆分出来\n```\n\n``` javascript\n/**\n * 服务器配置\n */\nconst config = {\n    HOST: '127.0.0.1',\n    PORT: 3000\n}\nmodule.exports = config;\n```\n\n### 相关链接\n\n## webpack指南：\n\nhttps://webpack.toobug.net/zh-cn/chapter4/using-loaders.html\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"webpack","published":1,"updated":"2018-05-22T12:35:24.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigk4001wxwqtfxal81mg","content":"<p>Webpack是一个前端资源加载以及打包工具。<br>只需要简单的配置即可实现前端各种工程化的操作。<br>Webpack结合其Loader、Plugin能够完成复杂的前端自动化构建。<br>除此之外它还可以与Gulp等其它工程化工具结合使用。</p>\n<h3 id=\"Webpack的Loader和Plugin\"><a href=\"#Webpack的Loader和Plugin\" class=\"headerlink\" title=\"Webpack的Loader和Plugin\"></a>Webpack的Loader和Plugin</h3><p>Loader是Webpack中的一个重要概念，它是指将一段代码转换为另外一段代码的Webpack插件。<br>Loader被用来加载某些资源文件。<br>因为Webpack本身只能打包commonjs规范的js文件，对于其它资源，例如css、图片或者其他的语法集（jsx、coffee）是没有办法加载的。这就需要对应的loader将资源转化，加载进来。</p>\n<p>Plugin用于扩展Webpack的功能。<br>它直接作用于Webpack，Loader也是变相扩展了Webpack的功能，之不过只是专注于资源的加载和转化。<br>Plugin的功能更加丰富。不仅局限于资源的加载。</p>\n<h3 id=\"Webpack的Loader\"><a href=\"#Webpack的Loader\" class=\"headerlink\" title=\"Webpack的Loader\"></a>Webpack的Loader</h3><p>处理样式，转成css<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css-loader：遍历css文件，找到url()然后处理它们</span><br><span class=\"line\"></span><br><span class=\"line\">style-loader：把css代码插入到页面的style标签中</span><br><span class=\"line\"></span><br><span class=\"line\">less-loader：和css-loader、style-loader合作让webpack支持less语法</span><br><span class=\"line\"></span><br><span class=\"line\">sass-loader：让webpack支持sass语法</span><br></pre></td></tr></table></figure></p>\n<p>图片处理，两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url-loader：</span><br><span class=\"line\"></span><br><span class=\"line\">file-loader：</span><br></pre></td></tr></table></figure></p>\n<p>处理js，将es6或更高级的代码转成es5的代码。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel-loader</span><br><span class=\"line\"></span><br><span class=\"line\">babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\">babel-preset-react</span><br></pre></td></tr></table></figure></p>\n<p>将js模块暴露到全局.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expose-loader</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"Webpack的Plugin\"><a href=\"#Webpack的Plugin\" class=\"headerlink\" title=\"Webpack的Plugin\"></a>Webpack的Plugin</h3><p>代码热替换<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HotModuleReplacementPlugin</span><br></pre></td></tr></table></figure></p>\n<p>生成html文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HtmlWebpackPlugin</span><br></pre></td></tr></table></figure></p>\n<p>将css成生文件，而非内联<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExtractTextPlugin</span><br></pre></td></tr></table></figure></p>\n<p>报错但不退出webpack进程<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NoErrorsPlugin</span><br></pre></td></tr></table></figure></p>\n<p>代码丑化,开发过程中不建议打开<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UglifyJsPlugin</span><br></pre></td></tr></table></figure></p>\n<p>多个 html共用一个js文件(chunk)<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommonsChunkPlugin</span><br></pre></td></tr></table></figure></p>\n<p>清理文件夹<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Clean</span><br></pre></td></tr></table></figure></p>\n<p>调用模块的别名,例如想在js中用$，如果通过webpack加载，需要将$与jQuery对应起来</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProvidePlugin</span><br></pre></td></tr></table></figure>\n<p>定义一些全局的变量,我们可以在模块当中直接使用这些变量，无需作任何声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefinePlugin</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack热更新以及完整示例\"><a href=\"#webpack热更新以及完整示例\" class=\"headerlink\" title=\"webpack热更新以及完整示例\"></a>webpack热更新以及完整示例</h3><p>热更新，可以在修改代码后，不用刷新浏览器就能看到修改后的效果。而它的另一个好处则是可以只替换修改部分相关的代码，大大的缩短了构建的时间。Webpack的热更新是它的一个特色功能，通过启动一个服务，在内存中运行，速度相对很快。</p>\n<p>有几种配置方法都能实现热更新的<br>这里介绍一种通过express+webpack-hot-middleware+webpack-dev-middleware中间件来实现。</p>\n<p>在网站根目录下创建如下文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./webpack-dev-server.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入webpack</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结合webpack-dev-middleware使用的middleware</span></span><br><span class=\"line\"><span class=\"comment\">// 它可以实现浏览器的无刷新更新（hot reload）。</span></span><br><span class=\"line\"><span class=\"comment\">// 这也是webpack文档里常说的HMR（Hot Module Replacement）。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackHotMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-hot-middleware'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理静态资源的中间件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack-dev-middleware\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack服务ip端口配置</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> serverConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/server.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> serverOptions = &#123;</span><br><span class=\"line\">  publicPath: webpackConfig.output.publicPath,</span><br><span class=\"line\">  contentBase: <span class=\"string\">'http://'</span> + serverConfig.HOST + <span class=\"string\">':'</span> + serverConfig.PORT,</span><br><span class=\"line\">  quiet: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  noInfo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  lazy: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    chunks : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    chunkModules : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    colors : <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> compiler = webpack(webpackConfig);</span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, serverOptions));</span><br><span class=\"line\">app.use(webpackHotMiddleware(compiler));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router()</span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'/index'</span>, &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Hey there!'</span>&#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(router)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(serverConfig.PORT, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onAppListening</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'==&gt; 🚧  Webpack development server listening on port %s'</span>, serverConfig.PORT);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./webpack.config.js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> serverConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/server.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">  context: path.join(__dirname, <span class=\"string\">'./'</span>),</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: [</span><br><span class=\"line\">      <span class=\"string\">'webpack-hot-middleware/client?reload=true&amp;path=http://'</span> + serverConfig.HOST + <span class=\"string\">':'</span> + serverConfig.PORT + <span class=\"string\">'/__webpack_hmr'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./static/js/Index.js'</span></span><br><span class=\"line\">    ] <span class=\"comment\">// reload=true是用于当需要刷新的时候允许刷新页面</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    publicPath:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'staticPub/js/[name].entry.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(css|scss)$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'style-loader?sourceMap=true!css-loader?sourceMap=true'</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'sass-loader?sourceMap=true'</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.woff|\\.woff2|\\.svg|.eot|\\.ttf/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'url?prefix=font/&amp;limit=10000'</span>,</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//devtool: false,</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),    </span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      mangle: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      favicon: path.join(__dirname, <span class=\"string\">'./favicon.ico'</span>),</span><br><span class=\"line\">      title: <span class=\"string\">'标题'</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">'./index.html'</span>,</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'./static/html/index.html'</span>),</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      hash: <span class=\"literal\">false</span>,    <span class=\"comment\">// 为静态资源生成hash值</span></span><br><span class=\"line\">      minify: &#123;       <span class=\"comment\">// 压缩HTML文件</span></span><br><span class=\"line\">        removeComments: <span class=\"literal\">false</span>,      <span class=\"comment\">// 移除HTML中的注释</span></span><br><span class=\"line\">        collapseWhitespace: <span class=\"literal\">true</span>    <span class=\"comment\">// 删除空白符与换行符</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全</span></span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'es6'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'scss'</span>, <span class=\"string\">'png'</span>, <span class=\"string\">'jpg'</span>, <span class=\"string\">'jpeg'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./config/server.js // 非必须，这里将其拆分出来</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务器配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    HOST: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    PORT: <span class=\"number\">3000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><h2 id=\"webpack指南：\"><a href=\"#webpack指南：\" class=\"headerlink\" title=\"webpack指南：\"></a>webpack指南：</h2><p><a href=\"https://webpack.toobug.net/zh-cn/chapter4/using-loaders.html\" target=\"_blank\" rel=\"noopener\">https://webpack.toobug.net/zh-cn/chapter4/using-loaders.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Webpack是一个前端资源加载以及打包工具。<br>只需要简单的配置即可实现前端各种工程化的操作。<br>Webpack结合其Loader、Plugin能够完成复杂的前端自动化构建。<br>除此之外它还可以与Gulp等其它工程化工具结合使用。</p>\n<h3 id=\"Webpack的Loader和Plugin\"><a href=\"#Webpack的Loader和Plugin\" class=\"headerlink\" title=\"Webpack的Loader和Plugin\"></a>Webpack的Loader和Plugin</h3><p>Loader是Webpack中的一个重要概念，它是指将一段代码转换为另外一段代码的Webpack插件。<br>Loader被用来加载某些资源文件。<br>因为Webpack本身只能打包commonjs规范的js文件，对于其它资源，例如css、图片或者其他的语法集（jsx、coffee）是没有办法加载的。这就需要对应的loader将资源转化，加载进来。</p>\n<p>Plugin用于扩展Webpack的功能。<br>它直接作用于Webpack，Loader也是变相扩展了Webpack的功能，之不过只是专注于资源的加载和转化。<br>Plugin的功能更加丰富。不仅局限于资源的加载。</p>\n<h3 id=\"Webpack的Loader\"><a href=\"#Webpack的Loader\" class=\"headerlink\" title=\"Webpack的Loader\"></a>Webpack的Loader</h3><p>处理样式，转成css<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css-loader：遍历css文件，找到url()然后处理它们</span><br><span class=\"line\"></span><br><span class=\"line\">style-loader：把css代码插入到页面的style标签中</span><br><span class=\"line\"></span><br><span class=\"line\">less-loader：和css-loader、style-loader合作让webpack支持less语法</span><br><span class=\"line\"></span><br><span class=\"line\">sass-loader：让webpack支持sass语法</span><br></pre></td></tr></table></figure></p>\n<p>图片处理，两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url-loader：</span><br><span class=\"line\"></span><br><span class=\"line\">file-loader：</span><br></pre></td></tr></table></figure></p>\n<p>处理js，将es6或更高级的代码转成es5的代码。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel-loader</span><br><span class=\"line\"></span><br><span class=\"line\">babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\">babel-preset-react</span><br></pre></td></tr></table></figure></p>\n<p>将js模块暴露到全局.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expose-loader</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"Webpack的Plugin\"><a href=\"#Webpack的Plugin\" class=\"headerlink\" title=\"Webpack的Plugin\"></a>Webpack的Plugin</h3><p>代码热替换<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HotModuleReplacementPlugin</span><br></pre></td></tr></table></figure></p>\n<p>生成html文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HtmlWebpackPlugin</span><br></pre></td></tr></table></figure></p>\n<p>将css成生文件，而非内联<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExtractTextPlugin</span><br></pre></td></tr></table></figure></p>\n<p>报错但不退出webpack进程<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NoErrorsPlugin</span><br></pre></td></tr></table></figure></p>\n<p>代码丑化,开发过程中不建议打开<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UglifyJsPlugin</span><br></pre></td></tr></table></figure></p>\n<p>多个 html共用一个js文件(chunk)<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommonsChunkPlugin</span><br></pre></td></tr></table></figure></p>\n<p>清理文件夹<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Clean</span><br></pre></td></tr></table></figure></p>\n<p>调用模块的别名,例如想在js中用$，如果通过webpack加载，需要将$与jQuery对应起来</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProvidePlugin</span><br></pre></td></tr></table></figure>\n<p>定义一些全局的变量,我们可以在模块当中直接使用这些变量，无需作任何声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefinePlugin</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack热更新以及完整示例\"><a href=\"#webpack热更新以及完整示例\" class=\"headerlink\" title=\"webpack热更新以及完整示例\"></a>webpack热更新以及完整示例</h3><p>热更新，可以在修改代码后，不用刷新浏览器就能看到修改后的效果。而它的另一个好处则是可以只替换修改部分相关的代码，大大的缩短了构建的时间。Webpack的热更新是它的一个特色功能，通过启动一个服务，在内存中运行，速度相对很快。</p>\n<p>有几种配置方法都能实现热更新的<br>这里介绍一种通过express+webpack-hot-middleware+webpack-dev-middleware中间件来实现。</p>\n<p>在网站根目录下创建如下文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./webpack-dev-server.js</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入webpack</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结合webpack-dev-middleware使用的middleware</span></span><br><span class=\"line\"><span class=\"comment\">// 它可以实现浏览器的无刷新更新（hot reload）。</span></span><br><span class=\"line\"><span class=\"comment\">// 这也是webpack文档里常说的HMR（Hot Module Replacement）。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackHotMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-hot-middleware'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理静态资源的中间件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack-dev-middleware\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack服务ip端口配置</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> serverConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/server.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> serverOptions = &#123;</span><br><span class=\"line\">  publicPath: webpackConfig.output.publicPath,</span><br><span class=\"line\">  contentBase: <span class=\"string\">'http://'</span> + serverConfig.HOST + <span class=\"string\">':'</span> + serverConfig.PORT,</span><br><span class=\"line\">  quiet: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  noInfo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  lazy: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    chunks : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    chunkModules : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    colors : <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> compiler = webpack(webpackConfig);</span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, serverOptions));</span><br><span class=\"line\">app.use(webpackHotMiddleware(compiler));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router()</span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'/index'</span>, &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Hey there!'</span>&#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(router)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(serverConfig.PORT, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onAppListening</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'==&gt; 🚧  Webpack development server listening on port %s'</span>, serverConfig.PORT);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./webpack.config.js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> serverConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/server.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">  context: path.join(__dirname, <span class=\"string\">'./'</span>),</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: [</span><br><span class=\"line\">      <span class=\"string\">'webpack-hot-middleware/client?reload=true&amp;path=http://'</span> + serverConfig.HOST + <span class=\"string\">':'</span> + serverConfig.PORT + <span class=\"string\">'/__webpack_hmr'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./static/js/Index.js'</span></span><br><span class=\"line\">    ] <span class=\"comment\">// reload=true是用于当需要刷新的时候允许刷新页面</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    publicPath:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'staticPub/js/[name].entry.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(css|scss)$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'style-loader?sourceMap=true!css-loader?sourceMap=true'</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'sass-loader?sourceMap=true'</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.woff|\\.woff2|\\.svg|.eot|\\.ttf/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'url?prefix=font/&amp;limit=10000'</span>,</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//devtool: false,</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),    </span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      mangle: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      favicon: path.join(__dirname, <span class=\"string\">'./favicon.ico'</span>),</span><br><span class=\"line\">      title: <span class=\"string\">'标题'</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">'./index.html'</span>,</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'./static/html/index.html'</span>),</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      hash: <span class=\"literal\">false</span>,    <span class=\"comment\">// 为静态资源生成hash值</span></span><br><span class=\"line\">      minify: &#123;       <span class=\"comment\">// 压缩HTML文件</span></span><br><span class=\"line\">        removeComments: <span class=\"literal\">false</span>,      <span class=\"comment\">// 移除HTML中的注释</span></span><br><span class=\"line\">        collapseWhitespace: <span class=\"literal\">true</span>    <span class=\"comment\">// 删除空白符与换行符</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全</span></span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'es6'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'scss'</span>, <span class=\"string\">'png'</span>, <span class=\"string\">'jpg'</span>, <span class=\"string\">'jpeg'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./config/server.js // 非必须，这里将其拆分出来</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务器配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    HOST: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    PORT: <span class=\"number\">3000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><h2 id=\"webpack指南：\"><a href=\"#webpack指南：\" class=\"headerlink\" title=\"webpack指南：\"></a>webpack指南：</h2><p><a href=\"https://webpack.toobug.net/zh-cn/chapter4/using-loaders.html\" target=\"_blank\" rel=\"noopener\">https://webpack.toobug.net/zh-cn/chapter4/using-loaders.html</a></p>\n"},{"title":"Web安全问题","date":"2016-12-24T16:00:00.000Z","_content":"\n基于Web环境的互联网应用有着其它平台没有的优势，易于维护、更新迭代更快、使用方便、跨平台等。\n而缺点也同样明显，那就是性能远远没有桌面应用好，使得相对没那么受欢迎。\n随着科技的发展，尤其是近几年来设备的更新换代以及新型浏览器的出现，Web应用的性能有了极大的提升。\n基于web环境的互联网应用越来越多，而与之伴随的Web安全问题也更加凸显。\n本人对web安全也了解不多，趁此摸鱼的时间，查一查相关资料，在此记录一下。\n\n\n### 攻击方式\n\n1.资源枚举\n枚举url获取网站文件、枚举错误信息获取网站信息\n\n2.参数操纵\n包括了SQL注入、XPath注入、cgi命令执行，还有XXS和会话劫持等，前三个的攻击主要是在服务端触发的，后二者的攻击则是侧重于客户端。\n\n3.会话劫持\n\n4.XSS 全称(Cross Site Scripting) 跨站脚本攻击， 是Web程序中最常见的漏洞\nXSS指攻击者在网页中嵌入客户端脚本（js/css），\n当用户浏览此网页时，脚本就会在用户客户端上执行，从而达到攻击目的，比如获取用户cookie,导航到恶意网站，携带木马等。\n1)反射型XSS，又称非持久型XSS\n\t攻击者通过电子邮件等方式将包含注入脚本的恶意链接发送给受害者，当受害者点击该链接时，注 入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，从而在该浏览器上执行了这段脚本。\n2)存储型XSS\n3)DOM XSS\t\n4)XSS payload\n\n\n\n5.CSRF（cross-site request forgery），翻译为跨站请求伪造\n与XSS非常相似，但XSS是利用用户对当前网站的信任来发起攻击，而CSRF是利用网站对用户的信任来发起攻击。\n\n对于CSRF攻击，我们所能做的可以有：\n1). 检查报头中的Referer参数确保请求发自正确的网站（但XHR请求可调用setRequestHeader方法来修改Referer报头）；\n2). 对于任何重要的请求都需要重新验证用户的身份；\n3). 创建一个唯一的令牌（Token），将其存在服务端的session中及客户端的cookie中，对任何请求，都检查二者是否一致。\n\n\n\n6.钓鱼攻击 指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。\n\n7.拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭.\n处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。\n\n### 攻击层面\n\n攻击层面指的是有恶意的人可能会从哪些地方来入手制造麻烦，常见的攻击层面有三种：\n一. 传统WEB应用程序\n1. 表单输入（甚至包括hidden控件的内容）；\n2. cookie（通过修改cookie内容也可以达到SQL注入攻击的目的）；\n3. 报头（有时候为了方便统计来源数据，服务器会把客户端发来报头的Referer、User-Agent信息存到数据库中，那么通过修改报头信息也可以起到SQL注入工具目的）\n4. 请求参数\n5. 上传文件（在文件内携带恶意代码）\n\n二. Web服务\n1. 上述“传统WEB服务”的全部方法；\n2. WSDL文档（暴露了服务端的每个方法及其使用方式）\n\n三. AJAX应用程序\n即上述的“一”和“二”的合集\n\n### 解决方案\n综上所述，我们可以这样审视我们的WEB站点：\n\n1. 永远不要相信客户端传来的任何信息，对这些信息都应先进行编码或过滤处理；\n2. 谨慎返回用户输入的信息；\n3. 使用黑名单和白名单处理（即“不允许哪些敏感信息”或“只允许哪些信息”，白名单的效果更好但局限性高）；\n4. 检查、验证请求来源，对每一个重要的操作都进行重新验证；\n5. 使用SSL防止第三方监听通信（但无法阻止XSS、CSRF、SQL注入攻击）；\n6. 不要将重要文件、备份文件存放在公众可访问到的地方；\n7. 会话ID无序化；\n8. 对用户上传的文件进行验证（不单单是格式验证，比方一张gif图片还应将其转为二进制并验证其每帧颜色值<无符号8位>和宽高值<无符号16位>）；\n9. WSDL文档应当要求用户注册后才能获取；\n10. 在报头定义CSP（Content Security Policy）；\n11. 。。。\n\n虽然我们有一些必要的手段来防止WEB攻击，但永远不会有一枚silver bullet来彻底解决问题，先不谈那些数不胜数的已知的、可被攻击的漏洞，对于谜一样的0-day漏洞，我们所能做的只是提前发现并及时修补它们。\n\n\n### 参考链接\n\nhttp://www.cnblogs.com/vajoy/p/4176908.html\nhttp://imweb.io/topic/568958714c44bcc56092e409\n","source":"_posts/websafe.md","raw":"---\ntitle: Web安全问题\ntag: [js,cors,web安全]\ndate: 2016/12/25\ncategory: 技术\n---\n\n基于Web环境的互联网应用有着其它平台没有的优势，易于维护、更新迭代更快、使用方便、跨平台等。\n而缺点也同样明显，那就是性能远远没有桌面应用好，使得相对没那么受欢迎。\n随着科技的发展，尤其是近几年来设备的更新换代以及新型浏览器的出现，Web应用的性能有了极大的提升。\n基于web环境的互联网应用越来越多，而与之伴随的Web安全问题也更加凸显。\n本人对web安全也了解不多，趁此摸鱼的时间，查一查相关资料，在此记录一下。\n\n\n### 攻击方式\n\n1.资源枚举\n枚举url获取网站文件、枚举错误信息获取网站信息\n\n2.参数操纵\n包括了SQL注入、XPath注入、cgi命令执行，还有XXS和会话劫持等，前三个的攻击主要是在服务端触发的，后二者的攻击则是侧重于客户端。\n\n3.会话劫持\n\n4.XSS 全称(Cross Site Scripting) 跨站脚本攻击， 是Web程序中最常见的漏洞\nXSS指攻击者在网页中嵌入客户端脚本（js/css），\n当用户浏览此网页时，脚本就会在用户客户端上执行，从而达到攻击目的，比如获取用户cookie,导航到恶意网站，携带木马等。\n1)反射型XSS，又称非持久型XSS\n\t攻击者通过电子邮件等方式将包含注入脚本的恶意链接发送给受害者，当受害者点击该链接时，注 入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，从而在该浏览器上执行了这段脚本。\n2)存储型XSS\n3)DOM XSS\t\n4)XSS payload\n\n\n\n5.CSRF（cross-site request forgery），翻译为跨站请求伪造\n与XSS非常相似，但XSS是利用用户对当前网站的信任来发起攻击，而CSRF是利用网站对用户的信任来发起攻击。\n\n对于CSRF攻击，我们所能做的可以有：\n1). 检查报头中的Referer参数确保请求发自正确的网站（但XHR请求可调用setRequestHeader方法来修改Referer报头）；\n2). 对于任何重要的请求都需要重新验证用户的身份；\n3). 创建一个唯一的令牌（Token），将其存在服务端的session中及客户端的cookie中，对任何请求，都检查二者是否一致。\n\n\n\n6.钓鱼攻击 指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。\n\n7.拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭.\n处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。\n\n### 攻击层面\n\n攻击层面指的是有恶意的人可能会从哪些地方来入手制造麻烦，常见的攻击层面有三种：\n一. 传统WEB应用程序\n1. 表单输入（甚至包括hidden控件的内容）；\n2. cookie（通过修改cookie内容也可以达到SQL注入攻击的目的）；\n3. 报头（有时候为了方便统计来源数据，服务器会把客户端发来报头的Referer、User-Agent信息存到数据库中，那么通过修改报头信息也可以起到SQL注入工具目的）\n4. 请求参数\n5. 上传文件（在文件内携带恶意代码）\n\n二. Web服务\n1. 上述“传统WEB服务”的全部方法；\n2. WSDL文档（暴露了服务端的每个方法及其使用方式）\n\n三. AJAX应用程序\n即上述的“一”和“二”的合集\n\n### 解决方案\n综上所述，我们可以这样审视我们的WEB站点：\n\n1. 永远不要相信客户端传来的任何信息，对这些信息都应先进行编码或过滤处理；\n2. 谨慎返回用户输入的信息；\n3. 使用黑名单和白名单处理（即“不允许哪些敏感信息”或“只允许哪些信息”，白名单的效果更好但局限性高）；\n4. 检查、验证请求来源，对每一个重要的操作都进行重新验证；\n5. 使用SSL防止第三方监听通信（但无法阻止XSS、CSRF、SQL注入攻击）；\n6. 不要将重要文件、备份文件存放在公众可访问到的地方；\n7. 会话ID无序化；\n8. 对用户上传的文件进行验证（不单单是格式验证，比方一张gif图片还应将其转为二进制并验证其每帧颜色值<无符号8位>和宽高值<无符号16位>）；\n9. WSDL文档应当要求用户注册后才能获取；\n10. 在报头定义CSP（Content Security Policy）；\n11. 。。。\n\n虽然我们有一些必要的手段来防止WEB攻击，但永远不会有一枚silver bullet来彻底解决问题，先不谈那些数不胜数的已知的、可被攻击的漏洞，对于谜一样的0-day漏洞，我们所能做的只是提前发现并及时修补它们。\n\n\n### 参考链接\n\nhttp://www.cnblogs.com/vajoy/p/4176908.html\nhttp://imweb.io/topic/568958714c44bcc56092e409\n","slug":"websafe","published":1,"updated":"2018-05-22T12:35:24.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1sigk6001zxwqtsfcplexy","content":"<p>基于Web环境的互联网应用有着其它平台没有的优势，易于维护、更新迭代更快、使用方便、跨平台等。<br>而缺点也同样明显，那就是性能远远没有桌面应用好，使得相对没那么受欢迎。<br>随着科技的发展，尤其是近几年来设备的更新换代以及新型浏览器的出现，Web应用的性能有了极大的提升。<br>基于web环境的互联网应用越来越多，而与之伴随的Web安全问题也更加凸显。<br>本人对web安全也了解不多，趁此摸鱼的时间，查一查相关资料，在此记录一下。</p>\n<h3 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h3><p>1.资源枚举<br>枚举url获取网站文件、枚举错误信息获取网站信息</p>\n<p>2.参数操纵<br>包括了SQL注入、XPath注入、cgi命令执行，还有XXS和会话劫持等，前三个的攻击主要是在服务端触发的，后二者的攻击则是侧重于客户端。</p>\n<p>3.会话劫持</p>\n<p>4.XSS 全称(Cross Site Scripting) 跨站脚本攻击， 是Web程序中最常见的漏洞<br>XSS指攻击者在网页中嵌入客户端脚本（js/css），<br>当用户浏览此网页时，脚本就会在用户客户端上执行，从而达到攻击目的，比如获取用户cookie,导航到恶意网站，携带木马等。<br>1)反射型XSS，又称非持久型XSS<br>    攻击者通过电子邮件等方式将包含注入脚本的恶意链接发送给受害者，当受害者点击该链接时，注 入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，从而在该浏览器上执行了这段脚本。<br>2)存储型XSS<br>3)DOM XSS<br>4)XSS payload</p>\n<p>5.CSRF（cross-site request forgery），翻译为跨站请求伪造<br>与XSS非常相似，但XSS是利用用户对当前网站的信任来发起攻击，而CSRF是利用网站对用户的信任来发起攻击。</p>\n<p>对于CSRF攻击，我们所能做的可以有：<br>1). 检查报头中的Referer参数确保请求发自正确的网站（但XHR请求可调用setRequestHeader方法来修改Referer报头）；<br>2). 对于任何重要的请求都需要重新验证用户的身份；<br>3). 创建一个唯一的令牌（Token），将其存在服务端的session中及客户端的cookie中，对任何请求，都检查二者是否一致。</p>\n<p>6.钓鱼攻击 指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。</p>\n<p>7.拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭.<br>处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。</p>\n<h3 id=\"攻击层面\"><a href=\"#攻击层面\" class=\"headerlink\" title=\"攻击层面\"></a>攻击层面</h3><p>攻击层面指的是有恶意的人可能会从哪些地方来入手制造麻烦，常见的攻击层面有三种：<br>一. 传统WEB应用程序</p>\n<ol>\n<li>表单输入（甚至包括hidden控件的内容）；</li>\n<li>cookie（通过修改cookie内容也可以达到SQL注入攻击的目的）；</li>\n<li>报头（有时候为了方便统计来源数据，服务器会把客户端发来报头的Referer、User-Agent信息存到数据库中，那么通过修改报头信息也可以起到SQL注入工具目的）</li>\n<li>请求参数</li>\n<li>上传文件（在文件内携带恶意代码）</li>\n</ol>\n<p>二. Web服务</p>\n<ol>\n<li>上述“传统WEB服务”的全部方法；</li>\n<li>WSDL文档（暴露了服务端的每个方法及其使用方式）</li>\n</ol>\n<p>三. AJAX应用程序<br>即上述的“一”和“二”的合集</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>综上所述，我们可以这样审视我们的WEB站点：</p>\n<ol>\n<li>永远不要相信客户端传来的任何信息，对这些信息都应先进行编码或过滤处理；</li>\n<li>谨慎返回用户输入的信息；</li>\n<li>使用黑名单和白名单处理（即“不允许哪些敏感信息”或“只允许哪些信息”，白名单的效果更好但局限性高）；</li>\n<li>检查、验证请求来源，对每一个重要的操作都进行重新验证；</li>\n<li>使用SSL防止第三方监听通信（但无法阻止XSS、CSRF、SQL注入攻击）；</li>\n<li>不要将重要文件、备份文件存放在公众可访问到的地方；</li>\n<li>会话ID无序化；</li>\n<li>对用户上传的文件进行验证（不单单是格式验证，比方一张gif图片还应将其转为二进制并验证其每帧颜色值&lt;无符号8位&gt;和宽高值&lt;无符号16位&gt;）；</li>\n<li>WSDL文档应当要求用户注册后才能获取；</li>\n<li>在报头定义CSP（Content Security Policy）；</li>\n<li>。。。</li>\n</ol>\n<p>虽然我们有一些必要的手段来防止WEB攻击，但永远不会有一枚silver bullet来彻底解决问题，先不谈那些数不胜数的已知的、可被攻击的漏洞，对于谜一样的0-day漏洞，我们所能做的只是提前发现并及时修补它们。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.cnblogs.com/vajoy/p/4176908.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/vajoy/p/4176908.html</a><br><a href=\"http://imweb.io/topic/568958714c44bcc56092e409\" target=\"_blank\" rel=\"noopener\">http://imweb.io/topic/568958714c44bcc56092e409</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>基于Web环境的互联网应用有着其它平台没有的优势，易于维护、更新迭代更快、使用方便、跨平台等。<br>而缺点也同样明显，那就是性能远远没有桌面应用好，使得相对没那么受欢迎。<br>随着科技的发展，尤其是近几年来设备的更新换代以及新型浏览器的出现，Web应用的性能有了极大的提升。<br>基于web环境的互联网应用越来越多，而与之伴随的Web安全问题也更加凸显。<br>本人对web安全也了解不多，趁此摸鱼的时间，查一查相关资料，在此记录一下。</p>\n<h3 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h3><p>1.资源枚举<br>枚举url获取网站文件、枚举错误信息获取网站信息</p>\n<p>2.参数操纵<br>包括了SQL注入、XPath注入、cgi命令执行，还有XXS和会话劫持等，前三个的攻击主要是在服务端触发的，后二者的攻击则是侧重于客户端。</p>\n<p>3.会话劫持</p>\n<p>4.XSS 全称(Cross Site Scripting) 跨站脚本攻击， 是Web程序中最常见的漏洞<br>XSS指攻击者在网页中嵌入客户端脚本（js/css），<br>当用户浏览此网页时，脚本就会在用户客户端上执行，从而达到攻击目的，比如获取用户cookie,导航到恶意网站，携带木马等。<br>1)反射型XSS，又称非持久型XSS<br>    攻击者通过电子邮件等方式将包含注入脚本的恶意链接发送给受害者，当受害者点击该链接时，注 入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，从而在该浏览器上执行了这段脚本。<br>2)存储型XSS<br>3)DOM XSS<br>4)XSS payload</p>\n<p>5.CSRF（cross-site request forgery），翻译为跨站请求伪造<br>与XSS非常相似，但XSS是利用用户对当前网站的信任来发起攻击，而CSRF是利用网站对用户的信任来发起攻击。</p>\n<p>对于CSRF攻击，我们所能做的可以有：<br>1). 检查报头中的Referer参数确保请求发自正确的网站（但XHR请求可调用setRequestHeader方法来修改Referer报头）；<br>2). 对于任何重要的请求都需要重新验证用户的身份；<br>3). 创建一个唯一的令牌（Token），将其存在服务端的session中及客户端的cookie中，对任何请求，都检查二者是否一致。</p>\n<p>6.钓鱼攻击 指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。</p>\n<p>7.拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭.<br>处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。</p>\n<h3 id=\"攻击层面\"><a href=\"#攻击层面\" class=\"headerlink\" title=\"攻击层面\"></a>攻击层面</h3><p>攻击层面指的是有恶意的人可能会从哪些地方来入手制造麻烦，常见的攻击层面有三种：<br>一. 传统WEB应用程序</p>\n<ol>\n<li>表单输入（甚至包括hidden控件的内容）；</li>\n<li>cookie（通过修改cookie内容也可以达到SQL注入攻击的目的）；</li>\n<li>报头（有时候为了方便统计来源数据，服务器会把客户端发来报头的Referer、User-Agent信息存到数据库中，那么通过修改报头信息也可以起到SQL注入工具目的）</li>\n<li>请求参数</li>\n<li>上传文件（在文件内携带恶意代码）</li>\n</ol>\n<p>二. Web服务</p>\n<ol>\n<li>上述“传统WEB服务”的全部方法；</li>\n<li>WSDL文档（暴露了服务端的每个方法及其使用方式）</li>\n</ol>\n<p>三. AJAX应用程序<br>即上述的“一”和“二”的合集</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>综上所述，我们可以这样审视我们的WEB站点：</p>\n<ol>\n<li>永远不要相信客户端传来的任何信息，对这些信息都应先进行编码或过滤处理；</li>\n<li>谨慎返回用户输入的信息；</li>\n<li>使用黑名单和白名单处理（即“不允许哪些敏感信息”或“只允许哪些信息”，白名单的效果更好但局限性高）；</li>\n<li>检查、验证请求来源，对每一个重要的操作都进行重新验证；</li>\n<li>使用SSL防止第三方监听通信（但无法阻止XSS、CSRF、SQL注入攻击）；</li>\n<li>不要将重要文件、备份文件存放在公众可访问到的地方；</li>\n<li>会话ID无序化；</li>\n<li>对用户上传的文件进行验证（不单单是格式验证，比方一张gif图片还应将其转为二进制并验证其每帧颜色值&lt;无符号8位&gt;和宽高值&lt;无符号16位&gt;）；</li>\n<li>WSDL文档应当要求用户注册后才能获取；</li>\n<li>在报头定义CSP（Content Security Policy）；</li>\n<li>。。。</li>\n</ol>\n<p>虽然我们有一些必要的手段来防止WEB攻击，但永远不会有一枚silver bullet来彻底解决问题，先不谈那些数不胜数的已知的、可被攻击的漏洞，对于谜一样的0-day漏洞，我们所能做的只是提前发现并及时修补它们。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.cnblogs.com/vajoy/p/4176908.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/vajoy/p/4176908.html</a><br><a href=\"http://imweb.io/topic/568958714c44bcc56092e409\" target=\"_blank\" rel=\"noopener\">http://imweb.io/topic/568958714c44bcc56092e409</a></p>\n"},{"layout":"default","title":"Linux学习笔记(一)","date":"2018-06-05T13:51:11.000Z","_content":"\n接下来一段时间打算学一下linux\n学习来源书本《Linux命令行与shell脚本编程大全 第三版》\n\n\n#### Linux目录名称\n\n常见的目录均基于文件系统层级标准（FHS）。很多Linux发型版都遵循了FHS。\n因此，你可以在任何兼容FHS的Linux系统中很容易的查找文件\n\n```shell\n/sbin # 系统二进制目录，存放许多GNU管理员级工具\n/bin # 二进制目录，存放许多用户级别的GNU工具\n/usr # 用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里\n\n/boot # 启动目录，存放启动文件\n/dev # 设备目录，Linux在这里创建设备节点\n/etc # 系统配置文件目录\n/home # 主目录，Linux在这里创建用户目录\n/lib # 库目录，存放系统和应用程序的库文件\n/media # 媒体目录，可移动媒体设备的常用挂载点\n/mnt # 挂载目录，另一个可移动媒体设备的常用挂载点\n/opt # 可选目录，常用于存放第三方软件包和数据文件\n/proc # 进程目录，存放现有硬件及当前进程的相关信息\n/root # root用户的主目录\n/run # 运行目录，存放系统运行时的运行时数据\n/srv # 服务目录，存放不能低服务的相关文件\n/sys # 系统目录，存放系统硬件信息的相关文件\n/tmp # 临时目录，可以在该目录中创建和删除临时工作文件\n/var # 可变目录，用以存放经常变化的文件，比如日志文件\n```\n\n#### 基本命令\n\n```shell\ncd\nls\ntouch\nln\ncp\necho\nmv\nmkdir\nrm\nrmdir\nfile\ncat\nmore\nless\ntail\nhead\n```\n\n\n\n\n#### 名词解释\n\nGNU计划：又称革奴计划，是由Richard Stallman在1983年9月27日公开发起的。它的目标是创建一套完全自由的操作系统。 ———— 百度百科\n\nGNU软件：GNU软件是通过GNU项目发布的软件，它是一种根据GNU软件包的README手册以及自由软件指南开发的，大多数GNU软件是免费分发的，但不是多有的都这样，然而，所有的GNU软件都必须是自由软件。 ———— 百度百科\n\nGCC：GNU编译器套件（GNU Compiler Collection）。\n包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）GCC的初衷是为GNU操作系统专门编写的一款编译器。 ———— 百度百科\n\n","source":"_posts/linux1.md","raw":"---\nlayout: default\ntitle: Linux学习笔记(一)\ndate: 2018-06-05 21:51:11\ntag: [linux, shell]\ncategory: 笔记\n---\n\n接下来一段时间打算学一下linux\n学习来源书本《Linux命令行与shell脚本编程大全 第三版》\n\n\n#### Linux目录名称\n\n常见的目录均基于文件系统层级标准（FHS）。很多Linux发型版都遵循了FHS。\n因此，你可以在任何兼容FHS的Linux系统中很容易的查找文件\n\n```shell\n/sbin # 系统二进制目录，存放许多GNU管理员级工具\n/bin # 二进制目录，存放许多用户级别的GNU工具\n/usr # 用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里\n\n/boot # 启动目录，存放启动文件\n/dev # 设备目录，Linux在这里创建设备节点\n/etc # 系统配置文件目录\n/home # 主目录，Linux在这里创建用户目录\n/lib # 库目录，存放系统和应用程序的库文件\n/media # 媒体目录，可移动媒体设备的常用挂载点\n/mnt # 挂载目录，另一个可移动媒体设备的常用挂载点\n/opt # 可选目录，常用于存放第三方软件包和数据文件\n/proc # 进程目录，存放现有硬件及当前进程的相关信息\n/root # root用户的主目录\n/run # 运行目录，存放系统运行时的运行时数据\n/srv # 服务目录，存放不能低服务的相关文件\n/sys # 系统目录，存放系统硬件信息的相关文件\n/tmp # 临时目录，可以在该目录中创建和删除临时工作文件\n/var # 可变目录，用以存放经常变化的文件，比如日志文件\n```\n\n#### 基本命令\n\n```shell\ncd\nls\ntouch\nln\ncp\necho\nmv\nmkdir\nrm\nrmdir\nfile\ncat\nmore\nless\ntail\nhead\n```\n\n\n\n\n#### 名词解释\n\nGNU计划：又称革奴计划，是由Richard Stallman在1983年9月27日公开发起的。它的目标是创建一套完全自由的操作系统。 ———— 百度百科\n\nGNU软件：GNU软件是通过GNU项目发布的软件，它是一种根据GNU软件包的README手册以及自由软件指南开发的，大多数GNU软件是免费分发的，但不是多有的都这样，然而，所有的GNU软件都必须是自由软件。 ———— 百度百科\n\nGCC：GNU编译器套件（GNU Compiler Collection）。\n包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）GCC的初衷是为GNU操作系统专门编写的一款编译器。 ———— 百度百科\n\n","slug":"linux1","published":1,"updated":"2018-06-05T14:51:31.546Z","_id":"cji1sjglp003mxwqtgnhr51rf","comments":1,"photos":[],"link":"","content":"<p>接下来一段时间打算学一下linux<br>学习来源书本《Linux命令行与shell脚本编程大全 第三版》</p>\n<h4 id=\"Linux目录名称\"><a href=\"#Linux目录名称\" class=\"headerlink\" title=\"Linux目录名称\"></a>Linux目录名称</h4><p>常见的目录均基于文件系统层级标准（FHS）。很多Linux发型版都遵循了FHS。<br>因此，你可以在任何兼容FHS的Linux系统中很容易的查找文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin # 系统二进制目录，存放许多GNU管理员级工具</span><br><span class=\"line\">/bin # 二进制目录，存放许多用户级别的GNU工具</span><br><span class=\"line\">/usr # 用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里</span><br><span class=\"line\"></span><br><span class=\"line\">/boot # 启动目录，存放启动文件</span><br><span class=\"line\">/dev # 设备目录，Linux在这里创建设备节点</span><br><span class=\"line\">/etc # 系统配置文件目录</span><br><span class=\"line\">/home # 主目录，Linux在这里创建用户目录</span><br><span class=\"line\">/lib # 库目录，存放系统和应用程序的库文件</span><br><span class=\"line\">/media # 媒体目录，可移动媒体设备的常用挂载点</span><br><span class=\"line\">/mnt # 挂载目录，另一个可移动媒体设备的常用挂载点</span><br><span class=\"line\">/opt # 可选目录，常用于存放第三方软件包和数据文件</span><br><span class=\"line\">/proc # 进程目录，存放现有硬件及当前进程的相关信息</span><br><span class=\"line\">/root # root用户的主目录</span><br><span class=\"line\">/run # 运行目录，存放系统运行时的运行时数据</span><br><span class=\"line\">/srv # 服务目录，存放不能低服务的相关文件</span><br><span class=\"line\">/sys # 系统目录，存放系统硬件信息的相关文件</span><br><span class=\"line\">/tmp # 临时目录，可以在该目录中创建和删除临时工作文件</span><br><span class=\"line\">/var # 可变目录，用以存放经常变化的文件，比如日志文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd</span><br><span class=\"line\">ls</span><br><span class=\"line\">touch</span><br><span class=\"line\">ln</span><br><span class=\"line\">cp</span><br><span class=\"line\">echo</span><br><span class=\"line\">mv</span><br><span class=\"line\">mkdir</span><br><span class=\"line\">rm</span><br><span class=\"line\">rmdir</span><br><span class=\"line\">file</span><br><span class=\"line\">cat</span><br><span class=\"line\">more</span><br><span class=\"line\">less</span><br><span class=\"line\">tail</span><br><span class=\"line\">head</span><br></pre></td></tr></table></figure>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><p>GNU计划：又称革奴计划，是由Richard Stallman在1983年9月27日公开发起的。它的目标是创建一套完全自由的操作系统。 ———— 百度百科</p>\n<p>GNU软件：GNU软件是通过GNU项目发布的软件，它是一种根据GNU软件包的README手册以及自由软件指南开发的，大多数GNU软件是免费分发的，但不是多有的都这样，然而，所有的GNU软件都必须是自由软件。 ———— 百度百科</p>\n<p>GCC：GNU编译器套件（GNU Compiler Collection）。<br>包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）GCC的初衷是为GNU操作系统专门编写的一款编译器。 ———— 百度百科</p>\n","site":{"data":{}},"excerpt":"","more":"<p>接下来一段时间打算学一下linux<br>学习来源书本《Linux命令行与shell脚本编程大全 第三版》</p>\n<h4 id=\"Linux目录名称\"><a href=\"#Linux目录名称\" class=\"headerlink\" title=\"Linux目录名称\"></a>Linux目录名称</h4><p>常见的目录均基于文件系统层级标准（FHS）。很多Linux发型版都遵循了FHS。<br>因此，你可以在任何兼容FHS的Linux系统中很容易的查找文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin # 系统二进制目录，存放许多GNU管理员级工具</span><br><span class=\"line\">/bin # 二进制目录，存放许多用户级别的GNU工具</span><br><span class=\"line\">/usr # 用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里</span><br><span class=\"line\"></span><br><span class=\"line\">/boot # 启动目录，存放启动文件</span><br><span class=\"line\">/dev # 设备目录，Linux在这里创建设备节点</span><br><span class=\"line\">/etc # 系统配置文件目录</span><br><span class=\"line\">/home # 主目录，Linux在这里创建用户目录</span><br><span class=\"line\">/lib # 库目录，存放系统和应用程序的库文件</span><br><span class=\"line\">/media # 媒体目录，可移动媒体设备的常用挂载点</span><br><span class=\"line\">/mnt # 挂载目录，另一个可移动媒体设备的常用挂载点</span><br><span class=\"line\">/opt # 可选目录，常用于存放第三方软件包和数据文件</span><br><span class=\"line\">/proc # 进程目录，存放现有硬件及当前进程的相关信息</span><br><span class=\"line\">/root # root用户的主目录</span><br><span class=\"line\">/run # 运行目录，存放系统运行时的运行时数据</span><br><span class=\"line\">/srv # 服务目录，存放不能低服务的相关文件</span><br><span class=\"line\">/sys # 系统目录，存放系统硬件信息的相关文件</span><br><span class=\"line\">/tmp # 临时目录，可以在该目录中创建和删除临时工作文件</span><br><span class=\"line\">/var # 可变目录，用以存放经常变化的文件，比如日志文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd</span><br><span class=\"line\">ls</span><br><span class=\"line\">touch</span><br><span class=\"line\">ln</span><br><span class=\"line\">cp</span><br><span class=\"line\">echo</span><br><span class=\"line\">mv</span><br><span class=\"line\">mkdir</span><br><span class=\"line\">rm</span><br><span class=\"line\">rmdir</span><br><span class=\"line\">file</span><br><span class=\"line\">cat</span><br><span class=\"line\">more</span><br><span class=\"line\">less</span><br><span class=\"line\">tail</span><br><span class=\"line\">head</span><br></pre></td></tr></table></figure>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><p>GNU计划：又称革奴计划，是由Richard Stallman在1983年9月27日公开发起的。它的目标是创建一套完全自由的操作系统。 ———— 百度百科</p>\n<p>GNU软件：GNU软件是通过GNU项目发布的软件，它是一种根据GNU软件包的README手册以及自由软件指南开发的，大多数GNU软件是免费分发的，但不是多有的都这样，然而，所有的GNU软件都必须是自由软件。 ———— 百度百科</p>\n<p>GCC：GNU编译器套件（GNU Compiler Collection）。<br>包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）GCC的初衷是为GNU操作系统专门编写的一款编译器。 ———— 百度百科</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cji1sigj00005xwqt4lb82xje","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigj8000cxwqthzt1wh9s"},{"post_id":"cji1sigip0000xwqtovogaos6","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigja000gxwqttti3utuc"},{"post_id":"cji1sigj20006xwqt6rshui72","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjc000jxwqtfdlfkkkn"},{"post_id":"cji1sigj5000axwqt2ujrquqr","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigje000mxwqtitms02d2"},{"post_id":"cji1sigiu0001xwqt23o6knca","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjg000pxwqthicq7vuj"},{"post_id":"cji1sigj7000bxwqtlfy7fzxx","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjh000txwqti88kss00"},{"post_id":"cji1sigj9000fxwqtg0iaxbig","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjj000wxwqtnz6eme7k"},{"post_id":"cji1sigiz0004xwqtfhhsy2uy","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjl000zxwqtdo1jj8j9"},{"post_id":"cji1sigjb000ixwqtyhfmfl50","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjn0013xwqtsvqjdzjw"},{"post_id":"cji1sigjd000lxwqtwsvz1gkm","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjo0015xwqt66zwiy9z"},{"post_id":"cji1sigjf000oxwqttrb86kip","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjq0018xwqt9d1y23sx"},{"post_id":"cji1sigjh000sxwqtv1l61y2t","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjs001bxwqtu9r6myop"},{"post_id":"cji1sigji000vxwqtii2t9exe","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjt001exwqtn48zlpzt"},{"post_id":"cji1sigjk000yxwqt191mp6h6","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjv001hxwqtv0bg3fnw"},{"post_id":"cji1sigjm0012xwqtqzx4r5o9","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjx001kxwqtwvt9k3rf"},{"post_id":"cji1sigjo0014xwqt5vw1p7zy","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigjz001nxwqt10kd9vzq"},{"post_id":"cji1sigjp0017xwqteqv4tzob","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigk1001qxwqtb991e4ya"},{"post_id":"cji1sigjr001axwqtvh97fulj","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigk3001uxwqtfe6pwuxk"},{"post_id":"cji1sigjt001dxwqtszxzb547","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigk5001xxwqtg3ebmi4e"},{"post_id":"cji1sigju001gxwqtg81bahk6","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigk70020xwqt5kt04o81"},{"post_id":"cji1sigjw001jxwqtudz9q97k","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigk80022xwqt5v0ovcdc"},{"post_id":"cji1sigk0001pxwqtvanotjs6","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigk90024xwqtfs45jlx9"},{"post_id":"cji1sigk2001txwqt641loqoq","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigk90025xwqt0wnboa1n"},{"post_id":"cji1sigk4001wxwqtfxal81mg","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigka0027xwqtq7sq2geb"},{"post_id":"cji1sigk6001zxwqtsfcplexy","category_id":"cji1sigiw0002xwqt5hdul9ke","_id":"cji1sigka0028xwqt48i6d6i2"},{"post_id":"cji1sjglp003mxwqtgnhr51rf","category_id":"cji1sjglr003nxwqt5rrc328f","_id":"cji1sjgls003rxwqtba16up5c"}],"PostTag":[{"post_id":"cji1sigip0000xwqtovogaos6","tag_id":"cji1sigiy0003xwqt7hgvymdf","_id":"cji1sigj50009xwqt3qdgkbjd"},{"post_id":"cji1sigiu0001xwqt23o6knca","tag_id":"cji1sigj30008xwqtb35s7dd4","_id":"cji1sigja000hxwqtrfp8cflu"},{"post_id":"cji1sigiz0004xwqtfhhsy2uy","tag_id":"cji1sigj9000exwqt6tkmvxup","_id":"cji1sigjf000nxwqtrp989pm9"},{"post_id":"cji1sigjd000lxwqtwsvz1gkm","tag_id":"cji1sigj30008xwqtb35s7dd4","_id":"cji1sigjg000qxwqt3tbfkcez"},{"post_id":"cji1sigj00005xwqt4lb82xje","tag_id":"cji1sigjd000kxwqtzuuamv7t","_id":"cji1sigji000uxwqtk9m2bow7"},{"post_id":"cji1sigjf000oxwqttrb86kip","tag_id":"cji1sigj30008xwqtb35s7dd4","_id":"cji1sigjk000xxwqtfw9tnf0a"},{"post_id":"cji1sigj20006xwqt6rshui72","tag_id":"cji1sigjg000rxwqtt1pqcswi","_id":"cji1sigjm0011xwqtootlixkx"},{"post_id":"cji1sigjo0014xwqt5vw1p7zy","tag_id":"cji1sigjg000rxwqtt1pqcswi","_id":"cji1sigjr0019xwqthvwg6f82"},{"post_id":"cji1sigjr001axwqtvh97fulj","tag_id":"cji1sigj30008xwqtb35s7dd4","_id":"cji1sigju001fxwqtrp5ynur2"},{"post_id":"cji1sigj5000axwqt2ujrquqr","tag_id":"cji1sigjl0010xwqtq2k2dbql","_id":"cji1sigjy001lxwqt3yraw4i7"},{"post_id":"cji1sigj5000axwqt2ujrquqr","tag_id":"cji1sigjp0016xwqt38pqyr27","_id":"cji1sigjz001oxwqtf9vb1lmu"},{"post_id":"cji1sigj5000axwqt2ujrquqr","tag_id":"cji1sigjs001cxwqt6lwofxb3","_id":"cji1sigk1001sxwqtlxd9g1xg"},{"post_id":"cji1sigj7000bxwqtlfy7fzxx","tag_id":"cji1sigjw001ixwqtlpniyt2i","_id":"cji1sigk4001vxwqtcdeqijga"},{"post_id":"cji1sigj9000fxwqtg0iaxbig","tag_id":"cji1sigk1001rxwqtpg8yi8c5","_id":"cji1sigk70021xwqtkitnpjcn"},{"post_id":"cji1sigjb000ixwqtyhfmfl50","tag_id":"cji1sigk5001yxwqtmpouhi7k","_id":"cji1sigka002axwqtavpllc51"},{"post_id":"cji1sigjb000ixwqtyhfmfl50","tag_id":"cji1sigk80023xwqtp70qc6h5","_id":"cji1sigka002bxwqtnqmkmmgz"},{"post_id":"cji1sigjb000ixwqtyhfmfl50","tag_id":"cji1sigk90026xwqtvxrgmye0","_id":"cji1sigkb002dxwqtt8ck7vqj"},{"post_id":"cji1sigjh000sxwqtv1l61y2t","tag_id":"cji1sigka0029xwqtudln0jzz","_id":"cji1sigkb002fxwqt6n4nneig"},{"post_id":"cji1sigjh000sxwqtv1l61y2t","tag_id":"cji1sigkb002cxwqtlz3yfxxy","_id":"cji1sigkb002gxwqtmo2svcvj"},{"post_id":"cji1sigji000vxwqtii2t9exe","tag_id":"cji1sigkb002exwqtnn942pfv","_id":"cji1sigkd002lxwqtiex30xoq"},{"post_id":"cji1sigji000vxwqtii2t9exe","tag_id":"cji1sigkc002hxwqtu007505d","_id":"cji1sigkd002mxwqtz9u0w8c4"},{"post_id":"cji1sigji000vxwqtii2t9exe","tag_id":"cji1sigkc002ixwqtfpgjqasx","_id":"cji1sigkd002oxwqtkty0ib5p"},{"post_id":"cji1sigji000vxwqtii2t9exe","tag_id":"cji1sigkc002jxwqt6qgsc5al","_id":"cji1sigkd002pxwqtlmttwrn4"},{"post_id":"cji1sigjk000yxwqt191mp6h6","tag_id":"cji1sigkc002kxwqtgwtyo7ks","_id":"cji1sigkd002rxwqtbvtobsir"},{"post_id":"cji1sigjm0012xwqtqzx4r5o9","tag_id":"cji1sigkd002nxwqtbutlu187","_id":"cji1sigke002txwqt104vll7m"},{"post_id":"cji1sigjm0012xwqtqzx4r5o9","tag_id":"cji1sigkd002qxwqtr81o3qwu","_id":"cji1sigke002uxwqtvljl7139"},{"post_id":"cji1sigjp0017xwqteqv4tzob","tag_id":"cji1sigke002sxwqttc3n1b4z","_id":"cji1sigkf002wxwqtiy2paii7"},{"post_id":"cji1sigjt001dxwqtszxzb547","tag_id":"cji1sigke002vxwqt3hslayt0","_id":"cji1sigkg002zxwqt7ovr5atj"},{"post_id":"cji1sigjt001dxwqtszxzb547","tag_id":"cji1sigke002sxwqttc3n1b4z","_id":"cji1sigkg0030xwqtps0ye82t"},{"post_id":"cji1sigju001gxwqtg81bahk6","tag_id":"cji1sigkf002yxwqtblpe3kyp","_id":"cji1sigkh0033xwqtuk3byt29"},{"post_id":"cji1sigju001gxwqtg81bahk6","tag_id":"cji1sigkg0031xwqtjrldjzrs","_id":"cji1sigkh0034xwqtun4hyjpx"},{"post_id":"cji1sigjw001jxwqtudz9q97k","tag_id":"cji1sigkg0032xwqti555tsaj","_id":"cji1sigkh0036xwqtjdutkq58"},{"post_id":"cji1sigk0001pxwqtvanotjs6","tag_id":"cji1sigkh0035xwqtcg9ih9ed","_id":"cji1sigki0038xwqtyx26eiub"},{"post_id":"cji1sigk2001txwqt641loqoq","tag_id":"cji1sigj30008xwqtb35s7dd4","_id":"cji1sigkj003cxwqtwxy8ymfl"},{"post_id":"cji1sigk2001txwqt641loqoq","tag_id":"cji1sigkh0037xwqt0h3nffex","_id":"cji1sigkj003dxwqtl9g9hi3o"},{"post_id":"cji1sigk2001txwqt641loqoq","tag_id":"cji1sigki0039xwqta2anugx6","_id":"cji1sigkk003fxwqtrgmwttop"},{"post_id":"cji1sigk2001txwqt641loqoq","tag_id":"cji1sigki003axwqt1k0pbp34","_id":"cji1sigkk003gxwqt0llrg9ct"},{"post_id":"cji1sigk4001wxwqtfxal81mg","tag_id":"cji1sigkj003bxwqtx9rems0g","_id":"cji1sigkk003ixwqt1phajn7i"},{"post_id":"cji1sigk6001zxwqtsfcplexy","tag_id":"cji1sigj30008xwqtb35s7dd4","_id":"cji1sigkl003jxwqtl1ojpxtj"},{"post_id":"cji1sigk6001zxwqtsfcplexy","tag_id":"cji1sigkk003exwqtw0qxtc1o","_id":"cji1sigkl003kxwqtzt6bpvz9"},{"post_id":"cji1sigk6001zxwqtsfcplexy","tag_id":"cji1sigkk003hxwqt9qbnpi3p","_id":"cji1sigkl003lxwqtm47o4p4y"},{"post_id":"cji1sjglp003mxwqtgnhr51rf","tag_id":"cji1sigkc002kxwqtgwtyo7ks","_id":"cji1sjglr003pxwqtzzx7zr2x"},{"post_id":"cji1sjglp003mxwqtgnhr51rf","tag_id":"cji1sjglr003oxwqtjsiv1rcy","_id":"cji1sjgls003qxwqto43kj0vt"}],"Tag":[{"name":"dns","_id":"cji1sigiy0003xwqt7hgvymdf"},{"name":"js","_id":"cji1sigj30008xwqtb35s7dd4"},{"name":"git","_id":"cji1sigj9000exwqt6tkmvxup"},{"name":"gulp","_id":"cji1sigjd000kxwqtzuuamv7t"},{"name":"nginx","_id":"cji1sigjg000rxwqtt1pqcswi"},{"name":"http","_id":"cji1sigjl0010xwqtq2k2dbql"},{"name":"cache","_id":"cji1sigjp0016xwqt38pqyr27"},{"name":"缓存","_id":"cji1sigjs001cxwqt6lwofxb3"},{"name":"http2","_id":"cji1sigjw001ixwqtlpniyt2i"},{"name":"https","_id":"cji1sigk1001rxwqtpg8yi8c5"},{"name":"java","_id":"cji1sigk5001yxwqtmpouhi7k"},{"name":"apache","_id":"cji1sigk80023xwqtp70qc6h5"},{"name":"jdk","_id":"cji1sigk90026xwqtvxrgmye0"},{"name":"mac","_id":"cji1sigka0029xwqtudln0jzz"},{"name":"terminal","_id":"cji1sigkb002cxwqtlz3yfxxy"},{"name":"AES","_id":"cji1sigkb002exwqtnn942pfv"},{"name":"RSA","_id":"cji1sigkc002hxwqtu007505d"},{"name":"加密","_id":"cji1sigkc002ixwqtfpgjqasx"},{"name":"安全","_id":"cji1sigkc002jxwqt6qgsc5al"},{"name":"linux","_id":"cji1sigkc002kxwqtgwtyo7ks"},{"name":"mysql","_id":"cji1sigkd002nxwqtbutlu187"},{"name":"数据库","_id":"cji1sigkd002qxwqtr81o3qwu"},{"name":"nodejs","_id":"cji1sigke002sxwqttc3n1b4z"},{"name":"pm2","_id":"cji1sigke002vxwqt3hslayt0"},{"name":"npm","_id":"cji1sigkf002yxwqtblpe3kyp"},{"name":"proxy","_id":"cji1sigkg0031xwqtjrldjzrs"},{"name":"svn","_id":"cji1sigkg0032xwqti555tsaj"},{"name":"vim","_id":"cji1sigkh0035xwqtcg9ih9ed"},{"name":"react","_id":"cji1sigkh0037xwqt0h3nffex"},{"name":"flux","_id":"cji1sigki0039xwqta2anugx6"},{"name":"redux","_id":"cji1sigki003axwqt1k0pbp34"},{"name":"webpack","_id":"cji1sigkj003bxwqtx9rems0g"},{"name":"cors","_id":"cji1sigkk003exwqtw0qxtc1o"},{"name":"web安全","_id":"cji1sigkk003hxwqt9qbnpi3p"},{"name":"shell","_id":"cji1sjglr003oxwqtjsiv1rcy"}]}}